"""
==============================================
Discrete Fourier transforms (:mod:`scipy.fft`)
==============================================

.. currentmodule:: scipy.fft

Fast Fourier Transforms (FFTs)
==============================

.. autosummary::
   :toctree: generated/

   fft - Fast (discrete) Fourier Transform (FFT)
   ifft - Inverse FFT
   fft2 - 2-D FFT
   ifft2 - 2-D inverse FFT
   fftn - N-D FFT
   ifftn - N-D inverse FFT
   rfft - FFT of strictly real-valued sequence
   irfft - Inverse of rfft
   rfft2 - 2-D FFT of real sequence
   irfft2 - Inverse of rfft2
   rfftn - N-D FFT of real sequence
   irfftn - Inverse of rfftn
   hfft - FFT of a Hermitian sequence (real spectrum)
   ihfft - Inverse of hfft
   hfft2 - 2-D FFT of a Hermitian sequence
   ihfft2 - Inverse of hfft2
   hfftn - N-D FFT of a Hermitian sequence
   ihfftn - Inverse of hfftn

Discrete Sin and Cosine Transforms (DST and DCT)
================================================

.. autosummary::
   :toctree: generated/

   dct - Discrete cosine transform
   idct - Inverse discrete cosine transform
   dctn - N-D Discrete cosine transform
   idctn - N-D Inverse discrete cosine transform
   dst - Discrete sine transform
   idst - Inverse discrete sine transform
   dstn - N-D Discrete sine transform
   idstn - N-D Inverse discrete sine transform

Fast Hankel Transforms
======================

.. autosummary::
   :toctree: generated/

   fht - Fast Hankel transform
   ifht - Inverse of fht

Helper functions
================

.. autosummary::
   :toctree: generated/

   fftshift - Shift the zero-frequency component to the center of the spectrum
   ifftshift - The inverse of `fftshift`
   fftfreq - Return the Discrete Fourier Transform sample frequencies
   rfftfreq - DFT sample frequencies (for usage with rfft, irfft)
   fhtoffset - Compute an optimal offset for the Fast Hankel Transform
   next_fast_len - Find the optimal length to zero-pad an FFT for speed
   prev_fast_len - Find the maximum slice length that results in a fast FFT
   set_workers - Context manager to set default number of workers
   get_workers - Get the current default number of workers

Backend control
===============

.. autosummary::
   :toctree: generated/

   set_backend - Context manager to set the backend within a fixed scope
   skip_backend - Context manager to skip a backend within a fixed scope
   set_global_backend - Sets the global fft backend
   register_backend - Register a backend for permanent use

"""

from ._backend import register_backend, set_backend, set_global_backend, skip_backend
from ._basic import (
    fft,
    fft2,
    fftn,
    hfft,
    hfft2,
    hfftn,
    ifft,
    ifft2,
    ifftn,
    ihfft,
    ihfft2,
    ihfftn,
    irfft,
    irfft2,
    irfftn,
    rfft,
    rfft2,
    rfftn,
)
from ._fftlog import fht, fhtoffset, ifht
from ._helper import (
    fftfreq,
    fftshift,
    ifftshift,
    next_fast_len,
    prev_fast_len,
    rfftfreq,
)
from ._pocketfft.helper import get_workers, set_workers
from ._realtransforms import dct, dctn, dst, dstn, idct, idctn, idst, idstn

__all__ = [
    "dct",
    "dctn",
    "dst",
    "dstn",
    "fft",
    "fft2",
    "fftfreq",
    "fftn",
    "fftshift",
    "fht",
    "fhtoffset",
    "get_workers",
    "hfft",
    "hfft2",
    "hfftn",
    "idct",
    "idctn",
    "idst",
    "idstn",
    "ifft",
    "ifft2",
    "ifftn",
    "ifftshift",
    "ifht",
    "ihfft",
    "ihfft2",
    "ihfftn",
    "irfft",
    "irfft2",
    "irfftn",
    "next_fast_len",
    "prev_fast_len",
    "register_backend",
    "rfft",
    "rfft2",
    "rfftfreq",
    "rfftn",
    "set_backend",
    "set_global_backend",
    "set_workers",
    "skip_backend",
]


from scipy._lib._testutils import PytestTester

test = PytestTester(__name__)
del PytestTester
