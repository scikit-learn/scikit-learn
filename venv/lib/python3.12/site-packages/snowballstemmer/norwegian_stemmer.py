# -*- coding: utf-8 -*-
# Generated from norwegian.sbl by Snowball 3.0.1 - https://snowballstem.org/

from .among import Among
from .basestemmer import BaseStemmer


class NorwegianStemmer(BaseStemmer):
    """
    This class implements the stemming algorithm defined by a snowball script.
    Generated from norwegian.sbl by Snowball 3.0.1 - https://snowballstem.org/
    """

    g_v = {"a", "e", "ê", "i", "o", "ò", "ó", "ô", "u", "y", "æ", "å", "ø"}

    g_s_ending = {
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "l",
        "m",
        "n",
        "o",
        "p",
        "t",
        "v",
        "y",
        "z",
    }

    I_x = 0
    I_p1 = 0

    def __r_mark_regions(self):
        self.I_p1 = self.limit
        v_1 = self.cursor
        c = self.cursor + 3
        if c > self.limit:
            return False
        self.cursor = c
        self.I_x = self.cursor
        self.cursor = v_1
        if not self.go_out_grouping(NorwegianStemmer.g_v):
            return False
        self.cursor += 1
        if not self.go_in_grouping(NorwegianStemmer.g_v):
            return False
        self.cursor += 1
        self.I_p1 = self.cursor
        try:
            if self.I_p1 >= self.I_x:
                raise lab0()
            self.I_p1 = self.I_x
        except lab0:
            pass
        return True

    def __r_main_suffix(self):
        if self.cursor < self.I_p1:
            return False
        v_2 = self.limit_backward
        self.limit_backward = self.I_p1
        self.ket = self.cursor
        among_var = self.find_among_b(NorwegianStemmer.a_1)
        if among_var == 0:
            self.limit_backward = v_2
            return False
        self.bra = self.cursor
        self.limit_backward = v_2
        if among_var == 1:
            if not self.slice_del():
                return False

        elif among_var == 2:
            among_var = self.find_among_b(NorwegianStemmer.a_0)
            if among_var == 1:
                if not self.slice_del():
                    return False

        elif among_var == 3:
            try:
                v_3 = self.limit - self.cursor
                try:
                    if not self.in_grouping_b(NorwegianStemmer.g_s_ending):
                        raise lab1()
                    raise lab0()
                except lab1:
                    pass
                self.cursor = self.limit - v_3
                try:
                    if not self.eq_s_b("r"):
                        raise lab2()
                    v_4 = self.limit - self.cursor
                    try:
                        if not self.eq_s_b("e"):
                            raise lab3()
                        raise lab2()
                    except lab3:
                        pass
                    self.cursor = self.limit - v_4
                    raise lab0()
                except lab2:
                    pass
                self.cursor = self.limit - v_3
                if not self.eq_s_b("k"):
                    return False
                if not self.out_grouping_b(NorwegianStemmer.g_v):
                    return False
            except lab0:
                pass
            if not self.slice_del():
                return False

        else:
            if not self.slice_from("er"):
                return False
        return True

    def __r_consonant_pair(self):
        v_1 = self.limit - self.cursor
        if self.cursor < self.I_p1:
            return False
        v_3 = self.limit_backward
        self.limit_backward = self.I_p1
        self.ket = self.cursor
        if self.find_among_b(NorwegianStemmer.a_2) == 0:
            self.limit_backward = v_3
            return False
        self.bra = self.cursor
        self.limit_backward = v_3
        self.cursor = self.limit - v_1
        if self.cursor <= self.limit_backward:
            return False
        self.cursor -= 1
        self.bra = self.cursor
        if not self.slice_del():
            return False

        return True

    def __r_other_suffix(self):
        if self.cursor < self.I_p1:
            return False
        v_2 = self.limit_backward
        self.limit_backward = self.I_p1
        self.ket = self.cursor
        if self.find_among_b(NorwegianStemmer.a_3) == 0:
            self.limit_backward = v_2
            return False
        self.bra = self.cursor
        self.limit_backward = v_2
        if not self.slice_del():
            return False

        return True

    def _stem(self):
        v_1 = self.cursor
        self.__r_mark_regions()
        self.cursor = v_1
        self.limit_backward = self.cursor
        self.cursor = self.limit
        v_2 = self.limit - self.cursor
        self.__r_main_suffix()
        self.cursor = self.limit - v_2
        v_3 = self.limit - self.cursor
        self.__r_consonant_pair()
        self.cursor = self.limit - v_3
        v_4 = self.limit - self.cursor
        self.__r_other_suffix()
        self.cursor = self.limit - v_4
        self.cursor = self.limit_backward
        return True

    a_0 = [
        Among("", -1, 1),
        Among("ind", 0, -1),
        Among("kk", 0, -1),
        Among("nk", 0, -1),
        Among("amm", 0, -1),
        Among("omm", 0, -1),
        Among("kap", 0, -1),
        Among("skap", 6, 1),
        Among("pp", 0, -1),
        Among("lt", 0, -1),
        Among("ast", 0, -1),
        Among("øst", 0, -1),
        Among("v", 0, -1),
        Among("hav", 12, 1),
        Among("giv", 12, 1),
    ]

    a_1 = [
        Among("a", -1, 1),
        Among("e", -1, 1),
        Among("ede", 1, 1),
        Among("ande", 1, 1),
        Among("ende", 1, 1),
        Among("ane", 1, 1),
        Among("ene", 1, 1),
        Among("hetene", 6, 1),
        Among("erte", 1, 4),
        Among("en", -1, 1),
        Among("heten", 9, 1),
        Among("ar", -1, 1),
        Among("er", -1, 1),
        Among("heter", 12, 1),
        Among("s", -1, 3),
        Among("as", 14, 1),
        Among("es", 14, 1),
        Among("edes", 16, 1),
        Among("endes", 16, 1),
        Among("enes", 16, 1),
        Among("hetenes", 19, 1),
        Among("ens", 14, 1),
        Among("hetens", 21, 1),
        Among("ers", 14, 2),
        Among("ets", 14, 1),
        Among("et", -1, 1),
        Among("het", 25, 1),
        Among("ert", -1, 4),
        Among("ast", -1, 1),
    ]

    a_2 = [Among("dt", -1, -1), Among("vt", -1, -1)]

    a_3 = [
        Among("leg", -1, 1),
        Among("eleg", 0, 1),
        Among("ig", -1, 1),
        Among("eig", 2, 1),
        Among("lig", 2, 1),
        Among("elig", 4, 1),
        Among("els", -1, 1),
        Among("lov", -1, 1),
        Among("elov", 7, 1),
        Among("slov", 7, 1),
        Among("hetslov", 9, 1),
    ]


class lab0(BaseException):
    pass


class lab1(BaseException):
    pass


class lab2(BaseException):
    pass


class lab3(BaseException):
    pass
