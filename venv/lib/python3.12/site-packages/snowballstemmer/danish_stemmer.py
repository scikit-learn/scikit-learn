# -*- coding: utf-8 -*-
# Generated from danish.sbl by Snowball 3.0.1 - https://snowballstem.org/

from .among import Among
from .basestemmer import BaseStemmer


class DanishStemmer(BaseStemmer):
    """
    This class implements the stemming algorithm defined by a snowball script.
    Generated from danish.sbl by Snowball 3.0.1 - https://snowballstem.org/
    """

    g_c = {
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    }

    g_v = {"a", "e", "i", "o", "u", "y", "æ", "å", "ø"}

    g_s_ending = {
        "a",
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "o",
        "p",
        "r",
        "t",
        "v",
        "y",
        "z",
        "å",
    }

    I_x = 0
    I_p1 = 0
    S_ch = ""

    def __r_mark_regions(self):
        self.I_p1 = self.limit
        v_1 = self.cursor
        c = self.cursor + 3
        if c > self.limit:
            return False
        self.cursor = c
        self.I_x = self.cursor
        self.cursor = v_1
        if not self.go_out_grouping(DanishStemmer.g_v):
            return False
        self.cursor += 1
        if not self.go_in_grouping(DanishStemmer.g_v):
            return False
        self.cursor += 1
        self.I_p1 = self.cursor
        try:
            if self.I_p1 >= self.I_x:
                raise lab0()
            self.I_p1 = self.I_x
        except lab0:
            pass
        return True

    def __r_main_suffix(self):
        if self.cursor < self.I_p1:
            return False
        v_2 = self.limit_backward
        self.limit_backward = self.I_p1
        self.ket = self.cursor
        among_var = self.find_among_b(DanishStemmer.a_0)
        if among_var == 0:
            self.limit_backward = v_2
            return False
        self.bra = self.cursor
        self.limit_backward = v_2
        if among_var == 1:
            if not self.slice_del():
                return False

        else:
            if not self.in_grouping_b(DanishStemmer.g_s_ending):
                return False
            if not self.slice_del():
                return False

        return True

    def __r_consonant_pair(self):
        v_1 = self.limit - self.cursor
        if self.cursor < self.I_p1:
            return False
        v_3 = self.limit_backward
        self.limit_backward = self.I_p1
        self.ket = self.cursor
        if self.find_among_b(DanishStemmer.a_1) == 0:
            self.limit_backward = v_3
            return False
        self.bra = self.cursor
        self.limit_backward = v_3
        self.cursor = self.limit - v_1
        if self.cursor <= self.limit_backward:
            return False
        self.cursor -= 1
        self.bra = self.cursor
        if not self.slice_del():
            return False

        return True

    def __r_other_suffix(self):
        v_1 = self.limit - self.cursor
        try:
            self.ket = self.cursor
            if not self.eq_s_b("st"):
                raise lab0()
            self.bra = self.cursor
            if not self.eq_s_b("ig"):
                raise lab0()
            if not self.slice_del():
                return False

        except lab0:
            pass
        self.cursor = self.limit - v_1
        if self.cursor < self.I_p1:
            return False
        v_3 = self.limit_backward
        self.limit_backward = self.I_p1
        self.ket = self.cursor
        among_var = self.find_among_b(DanishStemmer.a_2)
        if among_var == 0:
            self.limit_backward = v_3
            return False
        self.bra = self.cursor
        self.limit_backward = v_3
        if among_var == 1:
            if not self.slice_del():
                return False

            v_4 = self.limit - self.cursor
            self.__r_consonant_pair()
            self.cursor = self.limit - v_4
        else:
            if not self.slice_from("løs"):
                return False
        return True

    def __r_undouble(self):
        if self.cursor < self.I_p1:
            return False
        v_2 = self.limit_backward
        self.limit_backward = self.I_p1
        self.ket = self.cursor
        if not self.in_grouping_b(DanishStemmer.g_c):
            self.limit_backward = v_2
            return False
        self.bra = self.cursor
        self.S_ch = self.slice_to()
        if self.S_ch == "":
            return False
        self.limit_backward = v_2
        if not self.eq_s_b(self.S_ch):
            return False
        if not self.slice_del():
            return False

        return True

    def _stem(self):
        v_1 = self.cursor
        self.__r_mark_regions()
        self.cursor = v_1
        self.limit_backward = self.cursor
        self.cursor = self.limit
        v_2 = self.limit - self.cursor
        self.__r_main_suffix()
        self.cursor = self.limit - v_2
        v_3 = self.limit - self.cursor
        self.__r_consonant_pair()
        self.cursor = self.limit - v_3
        v_4 = self.limit - self.cursor
        self.__r_other_suffix()
        self.cursor = self.limit - v_4
        v_5 = self.limit - self.cursor
        self.__r_undouble()
        self.cursor = self.limit - v_5
        self.cursor = self.limit_backward
        return True

    a_0 = [
        Among("hed", -1, 1),
        Among("ethed", 0, 1),
        Among("ered", -1, 1),
        Among("e", -1, 1),
        Among("erede", 3, 1),
        Among("ende", 3, 1),
        Among("erende", 5, 1),
        Among("ene", 3, 1),
        Among("erne", 3, 1),
        Among("ere", 3, 1),
        Among("en", -1, 1),
        Among("heden", 10, 1),
        Among("eren", 10, 1),
        Among("er", -1, 1),
        Among("heder", 13, 1),
        Among("erer", 13, 1),
        Among("s", -1, 2),
        Among("heds", 16, 1),
        Among("es", 16, 1),
        Among("endes", 18, 1),
        Among("erendes", 19, 1),
        Among("enes", 18, 1),
        Among("ernes", 18, 1),
        Among("eres", 18, 1),
        Among("ens", 16, 1),
        Among("hedens", 24, 1),
        Among("erens", 24, 1),
        Among("ers", 16, 1),
        Among("ets", 16, 1),
        Among("erets", 28, 1),
        Among("et", -1, 1),
        Among("eret", 30, 1),
    ]

    a_1 = [
        Among("gd", -1, -1),
        Among("dt", -1, -1),
        Among("gt", -1, -1),
        Among("kt", -1, -1),
    ]

    a_2 = [
        Among("ig", -1, 1),
        Among("lig", 0, 1),
        Among("elig", 1, 1),
        Among("els", -1, 1),
        Among("løst", -1, 2),
    ]


class lab0(BaseException):
    pass
