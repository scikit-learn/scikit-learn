# -*- coding: utf-8 -*-
# Generated from hindi.sbl by Snowball 3.0.1 - https://snowballstem.org/

from .among import Among
from .basestemmer import BaseStemmer


class HindiStemmer(BaseStemmer):
    """
    This class implements the stemming algorithm defined by a snowball script.
    Generated from hindi.sbl by Snowball 3.0.1 - https://snowballstem.org/
    """

    g_consonant = {
        "\u0915",
        "\u0916",
        "\u0917",
        "\u0918",
        "\u0919",
        "\u091a",
        "\u091b",
        "\u091c",
        "\u091d",
        "\u091e",
        "\u091f",
        "\u0920",
        "\u0921",
        "\u0922",
        "\u0923",
        "\u0924",
        "\u0925",
        "\u0926",
        "\u0927",
        "\u0928",
        "\u092a",
        "\u092b",
        "\u092c",
        "\u092d",
        "\u092e",
        "\u092f",
        "\u0930",
        "\u0932",
        "\u0935",
        "\u0936",
        "\u0937",
        "\u0938",
        "\u0939",
        "\u0933",
        "\u093c",
        "\u0929",
        "\u0931",
        "\u0934",
        "\u0958",
        "\u0959",
        "\u095a",
        "\u095b",
        "\u095c",
        "\u095d",
        "\u095e",
        "\u095f",
    }

    def __r_CONSONANT(self):
        if not self.in_grouping_b(HindiStemmer.g_consonant):
            return False
        return True

    def _stem(self):
        if self.cursor >= self.limit:
            return False
        self.cursor += 1
        self.limit_backward = self.cursor
        self.cursor = self.limit
        self.ket = self.cursor
        if self.find_among_b(HindiStemmer.a_0) == 0:
            return False
        self.bra = self.cursor
        if not self.slice_del():
            return False

        self.cursor = self.limit_backward
        return True

    a_0 = [
        Among("\u0906\u0901", -1, -1),
        Among("\u093e\u0901", -1, -1),
        Among("\u0907\u092f\u093e\u0901", 1, -1),
        Among("\u0906\u0907\u092f\u093e\u0901", 2, -1),
        Among("\u093e\u0907\u092f\u093e\u0901", 2, -1),
        Among("\u093f\u092f\u093e\u0901", 1, -1),
        Among("\u0906\u0902", -1, -1),
        Among("\u0909\u0906\u0902", 6, -1),
        Among("\u0941\u0906\u0902", 6, -1),
        Among("\u0908\u0902", -1, -1),
        Among("\u0906\u0908\u0902", 9, -1),
        Among("\u093e\u0908\u0902", 9, -1),
        Among("\u090f\u0902", -1, -1),
        Among("\u0906\u090f\u0902", 12, -1),
        Among("\u0909\u090f\u0902", 12, -1),
        Among("\u093e\u090f\u0902", 12, -1),
        Among("\u0924\u093e\u090f\u0902", 15, -1, __r_CONSONANT),
        Among("\u0905\u0924\u093e\u090f\u0902", 16, -1),
        Among("\u0928\u093e\u090f\u0902", 15, -1, __r_CONSONANT),
        Among("\u0905\u0928\u093e\u090f\u0902", 18, -1),
        Among("\u0941\u090f\u0902", 12, -1),
        Among("\u0913\u0902", -1, -1),
        Among("\u0906\u0913\u0902", 21, -1),
        Among("\u0909\u0913\u0902", 21, -1),
        Among("\u093e\u0913\u0902", 21, -1),
        Among("\u0924\u093e\u0913\u0902", 24, -1, __r_CONSONANT),
        Among("\u0905\u0924\u093e\u0913\u0902", 25, -1),
        Among("\u0928\u093e\u0913\u0902", 24, -1, __r_CONSONANT),
        Among("\u0905\u0928\u093e\u0913\u0902", 27, -1),
        Among("\u0941\u0913\u0902", 21, -1),
        Among("\u093e\u0902", -1, -1),
        Among("\u0907\u092f\u093e\u0902", 30, -1),
        Among("\u0906\u0907\u092f\u093e\u0902", 31, -1),
        Among("\u093e\u0907\u092f\u093e\u0902", 31, -1),
        Among("\u093f\u092f\u093e\u0902", 30, -1),
        Among("\u0940\u0902", -1, -1),
        Among("\u0924\u0940\u0902", 35, -1, __r_CONSONANT),
        Among("\u0905\u0924\u0940\u0902", 36, -1),
        Among("\u0906\u0924\u0940\u0902", 36, -1),
        Among("\u093e\u0924\u0940\u0902", 36, -1),
        Among("\u0947\u0902", -1, -1),
        Among("\u094b\u0902", -1, -1),
        Among("\u0907\u092f\u094b\u0902", 41, -1),
        Among("\u0906\u0907\u092f\u094b\u0902", 42, -1),
        Among("\u093e\u0907\u092f\u094b\u0902", 42, -1),
        Among("\u093f\u092f\u094b\u0902", 41, -1),
        Among("\u0905", -1, -1),
        Among("\u0906", -1, -1),
        Among("\u0907", -1, -1),
        Among("\u0908", -1, -1),
        Among("\u0906\u0908", 49, -1),
        Among("\u093e\u0908", 49, -1),
        Among("\u0909", -1, -1),
        Among("\u090a", -1, -1),
        Among("\u090f", -1, -1),
        Among("\u0906\u090f", 54, -1),
        Among("\u0907\u090f", 54, -1),
        Among("\u0906\u0907\u090f", 56, -1),
        Among("\u093e\u0907\u090f", 56, -1),
        Among("\u093e\u090f", 54, -1),
        Among("\u093f\u090f", 54, -1),
        Among("\u0913", -1, -1),
        Among("\u0906\u0913", 61, -1),
        Among("\u093e\u0913", 61, -1),
        Among("\u0915\u0930", -1, -1, __r_CONSONANT),
        Among("\u0905\u0915\u0930", 64, -1),
        Among("\u0906\u0915\u0930", 64, -1),
        Among("\u093e\u0915\u0930", 64, -1),
        Among("\u093e", -1, -1),
        Among("\u090a\u0902\u0917\u093e", 68, -1),
        Among("\u0906\u090a\u0902\u0917\u093e", 69, -1),
        Among("\u093e\u090a\u0902\u0917\u093e", 69, -1),
        Among("\u0942\u0902\u0917\u093e", 68, -1),
        Among("\u090f\u0917\u093e", 68, -1),
        Among("\u0906\u090f\u0917\u093e", 73, -1),
        Among("\u093e\u090f\u0917\u093e", 73, -1),
        Among("\u0947\u0917\u093e", 68, -1),
        Among("\u0924\u093e", 68, -1, __r_CONSONANT),
        Among("\u0905\u0924\u093e", 77, -1),
        Among("\u0906\u0924\u093e", 77, -1),
        Among("\u093e\u0924\u093e", 77, -1),
        Among("\u0928\u093e", 68, -1, __r_CONSONANT),
        Among("\u0905\u0928\u093e", 81, -1),
        Among("\u0906\u0928\u093e", 81, -1),
        Among("\u093e\u0928\u093e", 81, -1),
        Among("\u0906\u092f\u093e", 68, -1),
        Among("\u093e\u092f\u093e", 68, -1),
        Among("\u093f", -1, -1),
        Among("\u0940", -1, -1),
        Among("\u090a\u0902\u0917\u0940", 88, -1),
        Among("\u0906\u090a\u0902\u0917\u0940", 89, -1),
        Among("\u093e\u090a\u0902\u0917\u0940", 89, -1),
        Among("\u090f\u0902\u0917\u0940", 88, -1),
        Among("\u0906\u090f\u0902\u0917\u0940", 92, -1),
        Among("\u093e\u090f\u0902\u0917\u0940", 92, -1),
        Among("\u0942\u0902\u0917\u0940", 88, -1),
        Among("\u0947\u0902\u0917\u0940", 88, -1),
        Among("\u090f\u0917\u0940", 88, -1),
        Among("\u0906\u090f\u0917\u0940", 97, -1),
        Among("\u093e\u090f\u0917\u0940", 97, -1),
        Among("\u0913\u0917\u0940", 88, -1),
        Among("\u0906\u0913\u0917\u0940", 100, -1),
        Among("\u093e\u0913\u0917\u0940", 100, -1),
        Among("\u0947\u0917\u0940", 88, -1),
        Among("\u094b\u0917\u0940", 88, -1),
        Among("\u0924\u0940", 88, -1, __r_CONSONANT),
        Among("\u0905\u0924\u0940", 105, -1),
        Among("\u0906\u0924\u0940", 105, -1),
        Among("\u093e\u0924\u0940", 105, -1),
        Among("\u0928\u0940", 88, -1, __r_CONSONANT),
        Among("\u0905\u0928\u0940", 109, -1),
        Among("\u0941", -1, -1),
        Among("\u0942", -1, -1),
        Among("\u0947", -1, -1),
        Among("\u090f\u0902\u0917\u0947", 113, -1),
        Among("\u0906\u090f\u0902\u0917\u0947", 114, -1),
        Among("\u093e\u090f\u0902\u0917\u0947", 114, -1),
        Among("\u0947\u0902\u0917\u0947", 113, -1),
        Among("\u0913\u0917\u0947", 113, -1),
        Among("\u0906\u0913\u0917\u0947", 118, -1),
        Among("\u093e\u0913\u0917\u0947", 118, -1),
        Among("\u094b\u0917\u0947", 113, -1),
        Among("\u0924\u0947", 113, -1, __r_CONSONANT),
        Among("\u0905\u0924\u0947", 122, -1),
        Among("\u0906\u0924\u0947", 122, -1),
        Among("\u093e\u0924\u0947", 122, -1),
        Among("\u0928\u0947", 113, -1, __r_CONSONANT),
        Among("\u0905\u0928\u0947", 126, -1),
        Among("\u0906\u0928\u0947", 126, -1),
        Among("\u093e\u0928\u0947", 126, -1),
        Among("\u094b", -1, -1),
        Among("\u094d", -1, -1),
    ]


class lab0(BaseException):
    pass
