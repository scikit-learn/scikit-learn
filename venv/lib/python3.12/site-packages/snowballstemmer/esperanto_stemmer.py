# -*- coding: utf-8 -*-
# Generated from esperanto.sbl by Snowball 3.0.1 - https://snowballstem.org/

from .among import Among
from .basestemmer import BaseStemmer


class EsperantoStemmer(BaseStemmer):
    """
    This class implements the stemming algorithm defined by a snowball script.
    Generated from esperanto.sbl by Snowball 3.0.1 - https://snowballstem.org/
    """

    g_vowel = {"a", "e", "i", "o", "u"}

    g_aou = {"a", "o", "u"}

    g_digit = {"0", "1", "2", "3", "4", "5", "6", "7", "8", "9"}

    B_foreign = False

    def __r_canonical_form(self):
        self.B_foreign = False
        while True:
            v_1 = self.cursor
            try:
                self.bra = self.cursor
                among_var = self.find_among(EsperantoStemmer.a_0)
                self.ket = self.cursor
                if among_var == 1:
                    if not self.slice_from("ĉ"):
                        return False
                elif among_var == 2:
                    if not self.slice_from("ĝ"):
                        return False
                elif among_var == 3:
                    if not self.slice_from("ĥ"):
                        return False
                elif among_var == 4:
                    if not self.slice_from("ĵ"):
                        return False
                elif among_var == 5:
                    if not self.slice_from("ŝ"):
                        return False
                elif among_var == 6:
                    if not self.slice_from("ŭ"):
                        return False
                elif among_var == 7:
                    if not self.slice_from("a"):
                        return False
                    self.B_foreign = True
                elif among_var == 8:
                    if not self.slice_from("e"):
                        return False
                    self.B_foreign = True
                elif among_var == 9:
                    if not self.slice_from("i"):
                        return False
                    self.B_foreign = True
                elif among_var == 10:
                    if not self.slice_from("o"):
                        return False
                    self.B_foreign = True
                elif among_var == 11:
                    if not self.slice_from("u"):
                        return False
                    self.B_foreign = True
                elif among_var == 12:
                    self.B_foreign = True
                elif among_var == 13:
                    self.B_foreign = False
                else:
                    if self.cursor >= self.limit:
                        raise lab0()
                    self.cursor += 1
                continue
            except lab0:
                pass
            self.cursor = v_1
            break
        try:
            if not self.B_foreign:
                raise lab1()
            return False
        except lab1:
            pass
        return True

    def __r_initial_apostrophe(self):
        self.bra = self.cursor
        if not self.eq_s("'"):
            return False
        self.ket = self.cursor
        if not self.eq_s("st"):
            return False
        if self.find_among(EsperantoStemmer.a_1) == 0:
            return False
        if self.cursor < self.limit:
            return False
        if not self.slice_from("e"):
            return False
        return True

    def __r_pronoun(self):
        self.ket = self.cursor
        v_1 = self.limit - self.cursor
        try:
            if not self.eq_s_b("n"):
                self.cursor = self.limit - v_1
                raise lab0()
        except lab0:
            pass
        self.bra = self.cursor
        if self.find_among_b(EsperantoStemmer.a_2) == 0:
            return False
        try:
            v_2 = self.limit - self.cursor
            try:
                if self.cursor > self.limit_backward:
                    raise lab2()
                raise lab1()
            except lab2:
                pass
            self.cursor = self.limit - v_2
            if not self.eq_s_b("-"):
                return False
        except lab1:
            pass
        if not self.slice_del():
            return False

        return True

    def __r_final_apostrophe(self):
        self.ket = self.cursor
        if not self.eq_s_b("'"):
            return False
        self.bra = self.cursor
        try:
            v_1 = self.limit - self.cursor
            try:
                if not self.eq_s_b("l"):
                    raise lab1()
                if self.cursor > self.limit_backward:
                    raise lab1()
                if not self.slice_from("a"):
                    return False
                raise lab0()
            except lab1:
                pass
            self.cursor = self.limit - v_1
            try:
                if not self.eq_s_b("un"):
                    raise lab2()
                if self.cursor > self.limit_backward:
                    raise lab2()
                if not self.slice_from("u"):
                    return False
                raise lab0()
            except lab2:
                pass
            self.cursor = self.limit - v_1
            try:
                if self.find_among_b(EsperantoStemmer.a_3) == 0:
                    raise lab3()
                try:
                    v_2 = self.limit - self.cursor
                    try:
                        if self.cursor > self.limit_backward:
                            raise lab5()
                        raise lab4()
                    except lab5:
                        pass
                    self.cursor = self.limit - v_2
                    if not self.eq_s_b("-"):
                        raise lab3()
                except lab4:
                    pass
                if not self.slice_from("aŭ"):
                    return False
                raise lab0()
            except lab3:
                pass
            self.cursor = self.limit - v_1
            if not self.slice_from("o"):
                return False
        except lab0:
            pass
        return True

    def __r_ujn_suffix(self):
        self.ket = self.cursor
        v_1 = self.limit - self.cursor
        try:
            if not self.eq_s_b("n"):
                self.cursor = self.limit - v_1
                raise lab0()
        except lab0:
            pass
        v_2 = self.limit - self.cursor
        try:
            if not self.eq_s_b("j"):
                self.cursor = self.limit - v_2
                raise lab1()
        except lab1:
            pass
        self.bra = self.cursor
        if self.find_among_b(EsperantoStemmer.a_4) == 0:
            return False
        try:
            v_3 = self.limit - self.cursor
            try:
                if self.cursor > self.limit_backward:
                    raise lab3()
                raise lab2()
            except lab3:
                pass
            self.cursor = self.limit - v_3
            if not self.eq_s_b("-"):
                return False
        except lab2:
            pass
        if not self.slice_del():
            return False

        return True

    def __r_uninflected(self):
        if self.find_among_b(EsperantoStemmer.a_5) == 0:
            return False
        try:
            v_1 = self.limit - self.cursor
            try:
                if self.cursor > self.limit_backward:
                    raise lab1()
                raise lab0()
            except lab1:
                pass
            self.cursor = self.limit - v_1
            if not self.eq_s_b("-"):
                return False
        except lab0:
            pass
        return True

    def __r_merged_numeral(self):
        if self.find_among_b(EsperantoStemmer.a_6) == 0:
            return False
        if self.find_among_b(EsperantoStemmer.a_7) == 0:
            return False
        return True

    def __r_correlative(self):
        self.ket = self.cursor
        self.bra = self.cursor
        v_1 = self.limit - self.cursor
        try:
            v_2 = self.limit - self.cursor
            try:
                v_3 = self.limit - self.cursor
                try:
                    if not self.eq_s_b("n"):
                        self.cursor = self.limit - v_3
                        raise lab2()
                except lab2:
                    pass
                self.bra = self.cursor
                if not self.eq_s_b("e"):
                    raise lab1()
                raise lab0()
            except lab1:
                pass
            self.cursor = self.limit - v_2
            v_4 = self.limit - self.cursor
            try:
                if not self.eq_s_b("n"):
                    self.cursor = self.limit - v_4
                    raise lab3()
            except lab3:
                pass
            v_5 = self.limit - self.cursor
            try:
                if not self.eq_s_b("j"):
                    self.cursor = self.limit - v_5
                    raise lab4()
            except lab4:
                pass
            self.bra = self.cursor
            if not self.in_grouping_b(EsperantoStemmer.g_aou):
                return False
        except lab0:
            pass
        if not self.eq_s_b("i"):
            return False
        v_6 = self.limit - self.cursor
        try:
            if self.find_among_b(EsperantoStemmer.a_8) == 0:
                self.cursor = self.limit - v_6
                raise lab5()
        except lab5:
            pass
        try:
            v_7 = self.limit - self.cursor
            try:
                if self.cursor > self.limit_backward:
                    raise lab7()
                raise lab6()
            except lab7:
                pass
            self.cursor = self.limit - v_7
            if not self.eq_s_b("-"):
                return False
        except lab6:
            pass
        self.cursor = self.limit - v_1
        if not self.slice_del():
            return False

        return True

    def __r_long_word(self):
        try:
            v_1 = self.limit - self.cursor
            try:
                for v_2 in 0, 0:
                    if not self.go_out_grouping_b(EsperantoStemmer.g_vowel):
                        raise lab1()
                    self.cursor -= 1
                raise lab0()
            except lab1:
                pass
            self.cursor = self.limit - v_1
            try:
                try:
                    while True:
                        try:
                            if not self.eq_s_b("-"):
                                raise lab4()
                            raise lab3()
                        except lab4:
                            pass
                        if self.cursor <= self.limit_backward:
                            raise lab2()
                        self.cursor -= 1
                except lab3:
                    pass
                if self.cursor <= self.limit_backward:
                    raise lab2()
                self.cursor -= 1
                raise lab0()
            except lab2:
                pass
            self.cursor = self.limit - v_1
            if not self.go_out_grouping_b(EsperantoStemmer.g_digit):
                return False
            self.cursor -= 1
        except lab0:
            pass
        return True

    def __r_not_after_letter(self):
        try:
            v_1 = self.limit - self.cursor
            try:
                if not self.eq_s_b("-"):
                    raise lab1()
                raise lab0()
            except lab1:
                pass
            self.cursor = self.limit - v_1
            if not self.in_grouping_b(EsperantoStemmer.g_digit):
                return False
        except lab0:
            pass
        return True

    def __r_standard_suffix(self):
        self.ket = self.cursor
        if self.find_among_b(EsperantoStemmer.a_9) == 0:
            return False
        v_1 = self.limit - self.cursor
        try:
            if not self.eq_s_b("-"):
                self.cursor = self.limit - v_1
                raise lab0()
        except lab0:
            pass
        self.bra = self.cursor
        if not self.slice_del():
            return False

        return True

    def _stem(self):
        v_1 = self.cursor
        if not self.__r_canonical_form():
            return False
        self.cursor = v_1
        v_2 = self.cursor
        self.__r_initial_apostrophe()
        self.cursor = v_2
        self.limit_backward = self.cursor
        self.cursor = self.limit
        v_3 = self.limit - self.cursor
        try:
            if not self.__r_pronoun():
                raise lab0()
            return False
        except lab0:
            pass
        self.cursor = self.limit - v_3
        v_4 = self.limit - self.cursor
        self.__r_final_apostrophe()
        self.cursor = self.limit - v_4
        v_5 = self.limit - self.cursor
        try:
            if not self.__r_correlative():
                raise lab1()
            return False
        except lab1:
            pass
        self.cursor = self.limit - v_5
        v_6 = self.limit - self.cursor
        try:
            if not self.__r_uninflected():
                raise lab2()
            return False
        except lab2:
            pass
        self.cursor = self.limit - v_6
        v_7 = self.limit - self.cursor
        try:
            if not self.__r_merged_numeral():
                raise lab3()
            return False
        except lab3:
            pass
        self.cursor = self.limit - v_7
        v_8 = self.limit - self.cursor
        try:
            if not self.__r_ujn_suffix():
                raise lab4()
            return False
        except lab4:
            pass
        self.cursor = self.limit - v_8
        v_9 = self.limit - self.cursor
        if not self.__r_long_word():
            return False
        self.cursor = self.limit - v_9
        if not self.__r_standard_suffix():
            return False
        self.cursor = self.limit_backward
        return True

    a_0 = [
        Among("", -1, 14),
        Among("-", 0, 13),
        Among("cx", 0, 1),
        Among("gx", 0, 2),
        Among("hx", 0, 3),
        Among("jx", 0, 4),
        Among("q", 0, 12),
        Among("sx", 0, 5),
        Among("ux", 0, 6),
        Among("w", 0, 12),
        Among("x", 0, 12),
        Among("y", 0, 12),
        Among("á", 0, 7),
        Among("é", 0, 8),
        Among("í", 0, 9),
        Among("ó", 0, 10),
        Among("ú", 0, 11),
    ]

    a_1 = [
        Among("as", -1, -1),
        Among("i", -1, -1),
        Among("is", 1, -1),
        Among("os", -1, -1),
        Among("u", -1, -1),
        Among("us", 4, -1),
    ]

    a_2 = [
        Among("ci", -1, -1),
        Among("gi", -1, -1),
        Among("hi", -1, -1),
        Among("li", -1, -1),
        Among("ili", 3, -1),
        Among("ŝli", 3, -1),
        Among("mi", -1, -1),
        Among("ni", -1, -1),
        Among("oni", 7, -1),
        Among("ri", -1, -1),
        Among("si", -1, -1),
        Among("vi", -1, -1),
        Among("ivi", 11, -1),
        Among("ĝi", -1, -1),
        Among("ŝi", -1, -1),
        Among("iŝi", 14, -1),
        Among("malŝi", 14, -1),
    ]

    a_3 = [
        Among("amb", -1, -1),
        Among("bald", -1, -1),
        Among("malbald", 1, -1),
        Among("morg", -1, -1),
        Among("postmorg", 3, -1),
        Among("adi", -1, -1),
        Among("hodi", -1, -1),
        Among("ank", -1, -1),
        Among("ĉirk", -1, -1),
        Among("tutĉirk", 8, -1),
        Among("presk", -1, -1),
        Among("almen", -1, -1),
        Among("apen", -1, -1),
        Among("hier", -1, -1),
        Among("antaŭhier", 13, -1),
        Among("malgr", -1, -1),
        Among("ankor", -1, -1),
        Among("kontr", -1, -1),
        Among("anstat", -1, -1),
        Among("kvaz", -1, -1),
    ]

    a_4 = [Among("aliu", -1, -1), Among("unu", -1, -1)]

    a_5 = [
        Among("aha", -1, -1),
        Among("haha", 0, -1),
        Among("haleluja", -1, -1),
        Among("hola", -1, -1),
        Among("hosana", -1, -1),
        Among("maltra", -1, -1),
        Among("hura", -1, -1),
        Among("ĥaĥa", -1, -1),
        Among("ekde", -1, -1),
        Among("elde", -1, -1),
        Among("disde", -1, -1),
        Among("ehe", -1, -1),
        Among("maltre", -1, -1),
        Among("dirlididi", -1, -1),
        Among("malpli", -1, -1),
        Among("malĉi", -1, -1),
        Among("malkaj", -1, -1),
        Among("amen", -1, -1),
        Among("tamen", 17, -1),
        Among("oho", -1, -1),
        Among("maltro", -1, -1),
        Among("minus", -1, -1),
        Among("uhu", -1, -1),
        Among("muu", -1, -1),
    ]

    a_6 = [Among("tri", -1, -1), Among("du", -1, -1), Among("unu", -1, -1)]

    a_7 = [Among("dek", -1, -1), Among("cent", -1, -1)]

    a_8 = [
        Among("k", -1, -1),
        Among("kelk", 0, -1),
        Among("nen", -1, -1),
        Among("t", -1, -1),
        Among("mult", 3, -1),
        Among("samt", 3, -1),
        Among("ĉ", -1, -1),
    ]

    a_9 = [
        Among("a", -1, -1),
        Among("e", -1, -1),
        Among("i", -1, -1),
        Among("j", -1, -1, __r_not_after_letter),
        Among("aj", 3, -1),
        Among("oj", 3, -1),
        Among("n", -1, -1, __r_not_after_letter),
        Among("an", 6, -1),
        Among("en", 6, -1),
        Among("jn", 6, -1, __r_not_after_letter),
        Among("ajn", 9, -1),
        Among("ojn", 9, -1),
        Among("on", 6, -1),
        Among("o", -1, -1),
        Among("as", -1, -1),
        Among("is", -1, -1),
        Among("os", -1, -1),
        Among("us", -1, -1),
        Among("u", -1, -1),
    ]


class lab0(BaseException):
    pass


class lab1(BaseException):
    pass


class lab2(BaseException):
    pass


class lab3(BaseException):
    pass


class lab4(BaseException):
    pass


class lab5(BaseException):
    pass


class lab6(BaseException):
    pass


class lab7(BaseException):
    pass
