# -*- coding: utf-8 -*-
# Generated from nepali.sbl by Snowball 3.0.1 - https://snowballstem.org/

from .among import Among
from .basestemmer import BaseStemmer


class NepaliStemmer(BaseStemmer):
    """
    This class implements the stemming algorithm defined by a snowball script.
    Generated from nepali.sbl by Snowball 3.0.1 - https://snowballstem.org/
    """

    def __r_remove_category_1(self):
        self.ket = self.cursor
        among_var = self.find_among_b(NepaliStemmer.a_0)
        if among_var == 0:
            return False
        self.bra = self.cursor
        if among_var == 1:
            if not self.slice_del():
                return False

        else:
            try:
                v_1 = self.limit - self.cursor
                try:
                    if not self.eq_s_b("\u090f"):
                        raise lab1()
                    raise lab0()
                except lab1:
                    pass
                self.cursor = self.limit - v_1
                try:
                    if not self.eq_s_b("\u0947"):
                        raise lab2()
                    raise lab0()
                except lab2:
                    pass
                self.cursor = self.limit - v_1
                if not self.slice_del():
                    return False

            except lab0:
                pass
        return True

    def __r_remove_category_2(self):
        self.ket = self.cursor
        among_var = self.find_among_b(NepaliStemmer.a_1)
        if among_var == 0:
            return False
        self.bra = self.cursor
        if among_var == 1:
            try:
                v_1 = self.limit - self.cursor
                try:
                    if not self.eq_s_b("\u092f\u094c"):
                        raise lab1()
                    raise lab0()
                except lab1:
                    pass
                self.cursor = self.limit - v_1
                try:
                    if not self.eq_s_b("\u091b\u094c"):
                        raise lab2()
                    raise lab0()
                except lab2:
                    pass
                self.cursor = self.limit - v_1
                try:
                    if not self.eq_s_b("\u0928\u094c"):
                        raise lab3()
                    raise lab0()
                except lab3:
                    pass
                self.cursor = self.limit - v_1
                if not self.eq_s_b("\u0925\u0947"):
                    return False
            except lab0:
                pass
            if not self.slice_del():
                return False

        else:
            if not self.eq_s_b("\u0924\u094d\u0930"):
                return False
            if not self.slice_del():
                return False

        return True

    def __r_remove_category_3(self):
        self.ket = self.cursor
        if self.find_among_b(NepaliStemmer.a_2) == 0:
            return False
        self.bra = self.cursor
        if not self.slice_del():
            return False

        return True

    def _stem(self):
        self.limit_backward = self.cursor
        self.cursor = self.limit
        v_1 = self.limit - self.cursor
        self.__r_remove_category_1()
        self.cursor = self.limit - v_1
        while True:
            v_2 = self.limit - self.cursor
            try:
                v_3 = self.limit - self.cursor
                self.__r_remove_category_2()
                self.cursor = self.limit - v_3
                if not self.__r_remove_category_3():
                    raise lab0()
                continue
            except lab0:
                pass
            self.cursor = self.limit - v_2
            break
        self.cursor = self.limit_backward
        return True

    a_0 = [
        Among("\u0932\u093e\u0907", -1, 1),
        Among("\u0932\u093e\u0908", -1, 1),
        Among("\u0938\u0901\u0917", -1, 1),
        Among("\u0938\u0902\u0917", -1, 1),
        Among("\u092e\u093e\u0930\u094d\u092b\u0924", -1, 1),
        Among("\u0930\u0924", -1, 1),
        Among("\u0915\u093e", -1, 2),
        Among("\u092e\u093e", -1, 1),
        Among("\u0926\u094d\u0935\u093e\u0930\u093e", -1, 1),
        Among("\u0915\u093f", -1, 2),
        Among("\u092a\u091b\u093f", -1, 1),
        Among("\u0915\u0940", -1, 2),
        Among("\u0932\u0947", -1, 1),
        Among("\u0915\u0948", -1, 2),
        Among("\u0938\u0901\u0917\u0948", -1, 1),
        Among("\u092e\u0948", -1, 1),
        Among("\u0915\u094b", -1, 2),
    ]

    a_1 = [Among("\u0901", -1, 1), Among("\u0902", -1, 1), Among("\u0948", -1, 2)]

    a_2 = [
        Among("\u0925\u093f\u090f", -1, 1),
        Among("\u091b", -1, 1),
        Among("\u0907\u091b", 1, 1),
        Among("\u090f\u091b", 1, 1),
        Among("\u093f\u091b", 1, 1),
        Among("\u0947\u091b", 1, 1),
        Among("\u0928\u0947\u091b", 5, 1),
        Among("\u0939\u0941\u0928\u0947\u091b", 6, 1),
        Among("\u0907\u0928\u094d\u091b", 1, 1),
        Among("\u093f\u0928\u094d\u091b", 1, 1),
        Among("\u0939\u0941\u0928\u094d\u091b", 1, 1),
        Among("\u090f\u0915\u093e", -1, 1),
        Among("\u0907\u090f\u0915\u093e", 11, 1),
        Among("\u093f\u090f\u0915\u093e", 11, 1),
        Among("\u0947\u0915\u093e", -1, 1),
        Among("\u0928\u0947\u0915\u093e", 14, 1),
        Among("\u0926\u093e", -1, 1),
        Among("\u0907\u0926\u093e", 16, 1),
        Among("\u093f\u0926\u093e", 16, 1),
        Among("\u0926\u0947\u0916\u093f", -1, 1),
        Among("\u092e\u093e\u0925\u093f", -1, 1),
        Among("\u090f\u0915\u0940", -1, 1),
        Among("\u0907\u090f\u0915\u0940", 21, 1),
        Among("\u093f\u090f\u0915\u0940", 21, 1),
        Among("\u0947\u0915\u0940", -1, 1),
        Among("\u0926\u0947\u0916\u0940", -1, 1),
        Among("\u0925\u0940", -1, 1),
        Among("\u0926\u0940", -1, 1),
        Among("\u091b\u0941", -1, 1),
        Among("\u090f\u091b\u0941", 28, 1),
        Among("\u0947\u091b\u0941", 28, 1),
        Among("\u0928\u0947\u091b\u0941", 30, 1),
        Among("\u0928\u0941", -1, 1),
        Among("\u0939\u0930\u0941", -1, 1),
        Among("\u0939\u0930\u0942", -1, 1),
        Among("\u091b\u0947", -1, 1),
        Among("\u0925\u0947", -1, 1),
        Among("\u0928\u0947", -1, 1),
        Among("\u090f\u0915\u0948", -1, 1),
        Among("\u0947\u0915\u0948", -1, 1),
        Among("\u0928\u0947\u0915\u0948", 39, 1),
        Among("\u0926\u0948", -1, 1),
        Among("\u0907\u0926\u0948", 41, 1),
        Among("\u093f\u0926\u0948", 41, 1),
        Among("\u090f\u0915\u094b", -1, 1),
        Among("\u0907\u090f\u0915\u094b", 44, 1),
        Among("\u093f\u090f\u0915\u094b", 44, 1),
        Among("\u0947\u0915\u094b", -1, 1),
        Among("\u0928\u0947\u0915\u094b", 47, 1),
        Among("\u0926\u094b", -1, 1),
        Among("\u0907\u0926\u094b", 49, 1),
        Among("\u093f\u0926\u094b", 49, 1),
        Among("\u092f\u094b", -1, 1),
        Among("\u0907\u092f\u094b", 52, 1),
        Among("\u092d\u092f\u094b", 52, 1),
        Among("\u093f\u092f\u094b", 52, 1),
        Among("\u0925\u093f\u092f\u094b", 55, 1),
        Among("\u0926\u093f\u092f\u094b", 55, 1),
        Among("\u0925\u094d\u092f\u094b", 52, 1),
        Among("\u091b\u094c", -1, 1),
        Among("\u0907\u091b\u094c", 59, 1),
        Among("\u090f\u091b\u094c", 59, 1),
        Among("\u093f\u091b\u094c", 59, 1),
        Among("\u0947\u091b\u094c", 59, 1),
        Among("\u0928\u0947\u091b\u094c", 63, 1),
        Among("\u092f\u094c", -1, 1),
        Among("\u0925\u093f\u092f\u094c", 65, 1),
        Among("\u091b\u094d\u092f\u094c", 65, 1),
        Among("\u0925\u094d\u092f\u094c", 65, 1),
        Among("\u091b\u0928\u094d", -1, 1),
        Among("\u0907\u091b\u0928\u094d", 69, 1),
        Among("\u090f\u091b\u0928\u094d", 69, 1),
        Among("\u093f\u091b\u0928\u094d", 69, 1),
        Among("\u0947\u091b\u0928\u094d", 69, 1),
        Among("\u0928\u0947\u091b\u0928\u094d", 73, 1),
        Among("\u0932\u093e\u0928\u094d", -1, 1),
        Among("\u091b\u093f\u0928\u094d", -1, 1),
        Among("\u0925\u093f\u0928\u094d", -1, 1),
        Among("\u092a\u0930\u094d", -1, 1),
        Among("\u0907\u0938\u094d", -1, 1),
        Among("\u0925\u093f\u0907\u0938\u094d", 79, 1),
        Among("\u091b\u0938\u094d", -1, 1),
        Among("\u0907\u091b\u0938\u094d", 81, 1),
        Among("\u090f\u091b\u0938\u094d", 81, 1),
        Among("\u093f\u091b\u0938\u094d", 81, 1),
        Among("\u0947\u091b\u0938\u094d", 81, 1),
        Among("\u0928\u0947\u091b\u0938\u094d", 85, 1),
        Among("\u093f\u0938\u094d", -1, 1),
        Among("\u0925\u093f\u0938\u094d", 87, 1),
        Among("\u091b\u0947\u0938\u094d", -1, 1),
        Among("\u0939\u094b\u0938\u094d", -1, 1),
    ]


class lab0(BaseException):
    pass


class lab1(BaseException):
    pass


class lab2(BaseException):
    pass


class lab3(BaseException):
    pass
