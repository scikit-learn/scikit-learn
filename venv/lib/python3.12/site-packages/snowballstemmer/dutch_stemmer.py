# -*- coding: utf-8 -*-
# Generated from dutch.sbl by Snowball 3.0.1 - https://snowballstem.org/

from .among import Among
from .basestemmer import BaseStemmer


class DutchStemmer(BaseStemmer):
    """
    This class implements the stemming algorithm defined by a snowball script.
    Generated from dutch.sbl by Snowball 3.0.1 - https://snowballstem.org/
    """

    g_E = {"e", "ë", "é", "è", "ê"}

    g_AIOU = {
        "a",
        "ä",
        "á",
        "à",
        "â",
        "i",
        "ï",
        "í",
        "ì",
        "î",
        "o",
        "ö",
        "ó",
        "ò",
        "ô",
        "u",
        "ü",
        "ú",
        "ù",
        "û",
    }

    g_AEIOU = {
        "a",
        "ä",
        "á",
        "à",
        "â",
        "e",
        "ë",
        "é",
        "è",
        "ê",
        "i",
        "ï",
        "í",
        "ì",
        "î",
        "o",
        "ö",
        "ó",
        "ò",
        "ô",
        "u",
        "ü",
        "ú",
        "ù",
        "û",
    }

    g_v = {
        "a",
        "ä",
        "á",
        "à",
        "â",
        "e",
        "ë",
        "é",
        "è",
        "ê",
        "i",
        "ï",
        "í",
        "ì",
        "î",
        "o",
        "ö",
        "ó",
        "ò",
        "ô",
        "u",
        "ü",
        "ú",
        "ù",
        "û",
        "y",
    }

    g_v_WX = {
        "a",
        "ä",
        "á",
        "à",
        "â",
        "e",
        "ë",
        "é",
        "è",
        "ê",
        "i",
        "ï",
        "í",
        "ì",
        "î",
        "o",
        "ö",
        "ó",
        "ò",
        "ô",
        "u",
        "ü",
        "ú",
        "ù",
        "û",
        "y",
        "w",
        "x",
    }

    B_GE_removed = False
    B_stemmed = False
    I_p2 = 0
    I_p1 = 0
    S_ch = ""

    def __r_R1(self):
        return self.I_p1 <= self.cursor

    def __r_R2(self):
        return self.I_p2 <= self.cursor

    def __r_V(self):
        v_1 = self.limit - self.cursor
        try:
            v_2 = self.limit - self.cursor
            try:
                if not self.in_grouping_b(DutchStemmer.g_v):
                    raise lab1()
                raise lab0()
            except lab1:
                pass
            self.cursor = self.limit - v_2
            if not self.eq_s_b("ij"):
                return False
        except lab0:
            pass
        self.cursor = self.limit - v_1
        return True

    def __r_VX(self):
        v_1 = self.limit - self.cursor
        if self.cursor <= self.limit_backward:
            return False
        self.cursor -= 1
        try:
            v_2 = self.limit - self.cursor
            try:
                if not self.in_grouping_b(DutchStemmer.g_v):
                    raise lab1()
                raise lab0()
            except lab1:
                pass
            self.cursor = self.limit - v_2
            if not self.eq_s_b("ij"):
                return False
        except lab0:
            pass
        self.cursor = self.limit - v_1
        return True

    def __r_C(self):
        v_1 = self.limit - self.cursor
        v_2 = self.limit - self.cursor
        try:
            if not self.eq_s_b("ij"):
                raise lab0()
            return False
        except lab0:
            pass
        self.cursor = self.limit - v_2
        if not self.out_grouping_b(DutchStemmer.g_v):
            return False
        self.cursor = self.limit - v_1
        return True

    def __r_lengthen_V(self):
        v_1 = self.limit - self.cursor
        try:
            if not self.out_grouping_b(DutchStemmer.g_v_WX):
                raise lab0()
            self.ket = self.cursor
            among_var = self.find_among_b(DutchStemmer.a_0)
            if among_var == 0:
                raise lab0()
            self.bra = self.cursor
            if among_var == 1:
                v_2 = self.limit - self.cursor
                try:
                    v_3 = self.limit - self.cursor
                    try:
                        if not self.out_grouping_b(DutchStemmer.g_AEIOU):
                            raise lab2()
                        raise lab1()
                    except lab2:
                        pass
                    self.cursor = self.limit - v_3
                    if self.cursor > self.limit_backward:
                        raise lab0()
                except lab1:
                    pass
                self.cursor = self.limit - v_2
                self.S_ch = self.slice_to()
                if self.S_ch == "":
                    return False
                c = self.cursor
                self.insert(self.cursor, self.cursor, self.S_ch)
                self.cursor = c
            elif among_var == 2:
                v_4 = self.limit - self.cursor
                try:
                    v_5 = self.limit - self.cursor
                    try:
                        if not self.out_grouping_b(DutchStemmer.g_AEIOU):
                            raise lab4()
                        raise lab3()
                    except lab4:
                        pass
                    self.cursor = self.limit - v_5
                    if self.cursor > self.limit_backward:
                        raise lab0()
                except lab3:
                    pass
                v_6 = self.limit - self.cursor
                try:
                    try:
                        v_7 = self.limit - self.cursor
                        try:
                            if not self.in_grouping_b(DutchStemmer.g_AIOU):
                                raise lab7()
                            raise lab6()
                        except lab7:
                            pass
                        self.cursor = self.limit - v_7
                        if not self.in_grouping_b(DutchStemmer.g_E):
                            raise lab5()
                        if self.cursor > self.limit_backward:
                            raise lab5()
                    except lab6:
                        pass
                    raise lab0()
                except lab5:
                    pass
                self.cursor = self.limit - v_6
                v_8 = self.limit - self.cursor
                try:
                    if self.cursor <= self.limit_backward:
                        raise lab8()
                    self.cursor -= 1
                    if not self.in_grouping_b(DutchStemmer.g_AIOU):
                        raise lab8()
                    if not self.out_grouping_b(DutchStemmer.g_AEIOU):
                        raise lab8()
                    raise lab0()
                except lab8:
                    pass
                self.cursor = self.limit - v_8
                self.cursor = self.limit - v_4
                self.S_ch = self.slice_to()
                if self.S_ch == "":
                    return False
                c = self.cursor
                self.insert(self.cursor, self.cursor, self.S_ch)
                self.cursor = c
            elif among_var == 3:
                if not self.slice_from("eëe"):
                    return False
            else:
                if not self.slice_from("iee"):
                    return False
        except lab0:
            pass
        self.cursor = self.limit - v_1
        return True

    def __r_Step_1(self):
        self.ket = self.cursor
        among_var = self.find_among_b(DutchStemmer.a_1)
        if among_var == 0:
            return False
        self.bra = self.cursor
        if among_var == 1:
            if not self.slice_del():
                return False

        elif among_var == 2:
            if not self.__r_R1():
                return False
            v_1 = self.limit - self.cursor
            try:
                if not self.eq_s_b("t"):
                    raise lab0()
                if not self.__r_R1():
                    raise lab0()
                return False
            except lab0:
                pass
            self.cursor = self.limit - v_1
            if not self.__r_C():
                return False
            if not self.slice_del():
                return False

        elif among_var == 3:
            if not self.__r_R1():
                return False
            if not self.slice_from("ie"):
                return False
        elif among_var == 4:
            try:
                v_2 = self.limit - self.cursor
                try:
                    v_3 = self.limit - self.cursor
                    if not self.eq_s_b("ar"):
                        raise lab2()
                    if not self.__r_R1():
                        raise lab2()
                    if not self.__r_C():
                        raise lab2()
                    self.cursor = self.limit - v_3
                    if not self.slice_del():
                        return False

                    self.__r_lengthen_V()
                    raise lab1()
                except lab2:
                    pass
                self.cursor = self.limit - v_2
                try:
                    v_4 = self.limit - self.cursor
                    if not self.eq_s_b("er"):
                        raise lab3()
                    if not self.__r_R1():
                        raise lab3()
                    if not self.__r_C():
                        raise lab3()
                    self.cursor = self.limit - v_4
                    if not self.slice_del():
                        return False

                    raise lab1()
                except lab3:
                    pass
                self.cursor = self.limit - v_2
                if not self.__r_R1():
                    return False
                if not self.__r_C():
                    return False
                if not self.slice_from("e"):
                    return False
            except lab1:
                pass
        elif among_var == 5:
            if not self.__r_R1():
                return False
            if not self.slice_from("é"):
                return False
        elif among_var == 6:
            if not self.__r_R1():
                return False
            if not self.__r_V():
                return False
            if not self.slice_from("au"):
                return False
        elif among_var == 7:
            try:
                v_5 = self.limit - self.cursor
                try:
                    if not self.eq_s_b("hed"):
                        raise lab5()
                    if not self.__r_R1():
                        raise lab5()
                    self.bra = self.cursor
                    if not self.slice_from("heid"):
                        return False
                    raise lab4()
                except lab5:
                    pass
                self.cursor = self.limit - v_5
                try:
                    if not self.eq_s_b("nd"):
                        raise lab6()
                    if not self.slice_del():
                        return False

                    raise lab4()
                except lab6:
                    pass
                self.cursor = self.limit - v_5
                try:
                    if not self.eq_s_b("d"):
                        raise lab7()
                    if not self.__r_R1():
                        raise lab7()
                    if not self.__r_C():
                        raise lab7()
                    self.bra = self.cursor
                    if not self.slice_del():
                        return False

                    raise lab4()
                except lab7:
                    pass
                self.cursor = self.limit - v_5
                try:
                    try:
                        v_6 = self.limit - self.cursor
                        try:
                            if not self.eq_s_b("i"):
                                raise lab10()
                            raise lab9()
                        except lab10:
                            pass
                        self.cursor = self.limit - v_6
                        if not self.eq_s_b("j"):
                            raise lab8()
                    except lab9:
                        pass
                    if not self.__r_V():
                        raise lab8()
                    if not self.slice_del():
                        return False

                    raise lab4()
                except lab8:
                    pass
                self.cursor = self.limit - v_5
                if not self.__r_R1():
                    return False
                if not self.__r_C():
                    return False
                if not self.slice_del():
                    return False

                self.__r_lengthen_V()
            except lab4:
                pass
        else:
            if not self.slice_from("nd"):
                return False
        return True

    def __r_Step_2(self):
        self.ket = self.cursor
        among_var = self.find_among_b(DutchStemmer.a_2)
        if among_var == 0:
            return False
        self.bra = self.cursor
        if among_var == 1:
            try:
                v_1 = self.limit - self.cursor
                try:
                    if not self.eq_s_b("'t"):
                        raise lab1()
                    self.bra = self.cursor
                    if not self.slice_del():
                        return False

                    raise lab0()
                except lab1:
                    pass
                self.cursor = self.limit - v_1
                try:
                    if not self.eq_s_b("et"):
                        raise lab2()
                    self.bra = self.cursor
                    if not self.__r_R1():
                        raise lab2()
                    if not self.__r_C():
                        raise lab2()
                    if not self.slice_del():
                        return False

                    raise lab0()
                except lab2:
                    pass
                self.cursor = self.limit - v_1
                try:
                    if not self.eq_s_b("rnt"):
                        raise lab3()
                    self.bra = self.cursor
                    if not self.slice_from("rn"):
                        return False
                    raise lab0()
                except lab3:
                    pass
                self.cursor = self.limit - v_1
                try:
                    if not self.eq_s_b("t"):
                        raise lab4()
                    self.bra = self.cursor
                    if not self.__r_R1():
                        raise lab4()
                    if not self.__r_VX():
                        raise lab4()
                    if not self.slice_del():
                        return False

                    raise lab0()
                except lab4:
                    pass
                self.cursor = self.limit - v_1
                try:
                    if not self.eq_s_b("ink"):
                        raise lab5()
                    self.bra = self.cursor
                    if not self.slice_from("ing"):
                        return False
                    raise lab0()
                except lab5:
                    pass
                self.cursor = self.limit - v_1
                try:
                    if not self.eq_s_b("mp"):
                        raise lab6()
                    self.bra = self.cursor
                    if not self.slice_from("m"):
                        return False
                    raise lab0()
                except lab6:
                    pass
                self.cursor = self.limit - v_1
                try:
                    if not self.eq_s_b("'"):
                        raise lab7()
                    self.bra = self.cursor
                    if not self.__r_R1():
                        raise lab7()
                    if not self.slice_del():
                        return False

                    raise lab0()
                except lab7:
                    pass
                self.cursor = self.limit - v_1
                self.bra = self.cursor
                if not self.__r_R1():
                    return False
                if not self.__r_C():
                    return False
                if not self.slice_del():
                    return False

            except lab0:
                pass
        elif among_var == 2:
            if not self.__r_R1():
                return False
            if not self.slice_from("g"):
                return False
        elif among_var == 3:
            if not self.__r_R1():
                return False
            if not self.slice_from("lijk"):
                return False
        elif among_var == 4:
            if not self.__r_R1():
                return False
            if not self.slice_from("isch"):
                return False
        elif among_var == 5:
            if not self.__r_R1():
                return False
            if not self.__r_C():
                return False
            if not self.slice_del():
                return False

        elif among_var == 6:
            if not self.__r_R1():
                return False
            if not self.slice_from("t"):
                return False
        elif among_var == 7:
            if not self.__r_R1():
                return False
            if not self.slice_from("s"):
                return False
        elif among_var == 8:
            if not self.__r_R1():
                return False
            if not self.slice_from("r"):
                return False
        elif among_var == 9:
            if not self.__r_R1():
                return False
            if not self.slice_del():
                return False

            self.insert(self.cursor, self.cursor, "l")
            self.__r_lengthen_V()
        elif among_var == 10:
            if not self.__r_R1():
                return False
            if not self.__r_C():
                return False
            if not self.slice_del():
                return False

            self.insert(self.cursor, self.cursor, "en")
            self.__r_lengthen_V()
        else:
            if not self.__r_R1():
                return False
            if not self.__r_C():
                return False
            if not self.slice_from("ief"):
                return False
        return True

    def __r_Step_3(self):
        self.ket = self.cursor
        among_var = self.find_among_b(DutchStemmer.a_3)
        if among_var == 0:
            return False
        self.bra = self.cursor
        if among_var == 1:
            if not self.__r_R1():
                return False
            if not self.slice_from("eer"):
                return False
        elif among_var == 2:
            if not self.__r_R1():
                return False
            if not self.slice_del():
                return False

            self.__r_lengthen_V()
        elif among_var == 3:
            if not self.__r_R1():
                return False
            if not self.slice_del():
                return False

        elif among_var == 4:
            if not self.slice_from("r"):
                return False
        elif among_var == 5:
            try:
                v_1 = self.limit - self.cursor
                try:
                    if not self.eq_s_b("ild"):
                        raise lab1()
                    if not self.slice_from("er"):
                        return False
                    raise lab0()
                except lab1:
                    pass
                self.cursor = self.limit - v_1
                if not self.__r_R1():
                    return False
                if not self.slice_del():
                    return False

                self.__r_lengthen_V()
            except lab0:
                pass
        elif among_var == 6:
            if not self.__r_R1():
                return False
            if not self.__r_C():
                return False
            if not self.slice_from("aar"):
                return False
        elif among_var == 7:
            if not self.__r_R2():
                return False
            if not self.slice_del():
                return False

            self.insert(self.cursor, self.cursor, "f")
            self.__r_lengthen_V()
        elif among_var == 8:
            if not self.__r_R2():
                return False
            if not self.slice_del():
                return False

            self.insert(self.cursor, self.cursor, "g")
            self.__r_lengthen_V()
        elif among_var == 9:
            if not self.__r_R1():
                return False
            if not self.__r_C():
                return False
            if not self.slice_from("t"):
                return False
        else:
            if not self.__r_R1():
                return False
            if not self.__r_C():
                return False
            if not self.slice_from("d"):
                return False
        return True

    def __r_Step_4(self):
        try:
            v_1 = self.limit - self.cursor
            try:
                self.ket = self.cursor
                among_var = self.find_among_b(DutchStemmer.a_4)
                if among_var == 0:
                    raise lab1()
                self.bra = self.cursor
                if among_var == 1:
                    if not self.__r_R1():
                        raise lab1()
                    if not self.slice_from("ie"):
                        return False
                elif among_var == 2:
                    if not self.__r_R1():
                        raise lab1()
                    if not self.slice_from("eer"):
                        return False
                elif among_var == 3:
                    if not self.__r_R1():
                        raise lab1()
                    if not self.slice_del():
                        return False

                elif among_var == 4:
                    if not self.__r_R1():
                        raise lab1()
                    if not self.__r_V():
                        raise lab1()
                    if not self.slice_from("n"):
                        return False
                elif among_var == 5:
                    if not self.__r_R1():
                        raise lab1()
                    if not self.__r_V():
                        raise lab1()
                    if not self.slice_from("l"):
                        return False
                elif among_var == 6:
                    if not self.__r_R1():
                        raise lab1()
                    if not self.__r_V():
                        raise lab1()
                    if not self.slice_from("r"):
                        return False
                elif among_var == 7:
                    if not self.__r_R1():
                        raise lab1()
                    if not self.slice_from("teer"):
                        return False
                elif among_var == 8:
                    if not self.__r_R1():
                        raise lab1()
                    if not self.slice_from("lijk"):
                        return False
                else:
                    if not self.__r_R1():
                        raise lab1()
                    if not self.__r_C():
                        raise lab1()
                    if not self.slice_del():
                        return False

                    self.__r_lengthen_V()
                raise lab0()
            except lab1:
                pass
            self.cursor = self.limit - v_1
            self.ket = self.cursor
            if self.find_among_b(DutchStemmer.a_5) == 0:
                return False
            self.bra = self.cursor
            if not self.__r_R1():
                return False
            v_2 = self.limit - self.cursor
            try:
                if not self.eq_s_b("inn"):
                    raise lab2()
                if self.cursor > self.limit_backward:
                    raise lab2()
                return False
            except lab2:
                pass
            self.cursor = self.limit - v_2
            if not self.__r_C():
                return False
            if not self.slice_del():
                return False

            self.__r_lengthen_V()
        except lab0:
            pass
        return True

    def __r_Step_7(self):
        self.ket = self.cursor
        among_var = self.find_among_b(DutchStemmer.a_6)
        if among_var == 0:
            return False
        self.bra = self.cursor
        if among_var == 1:
            if not self.slice_from("k"):
                return False
        elif among_var == 2:
            if not self.slice_from("f"):
                return False
        else:
            if not self.slice_from("p"):
                return False
        return True

    def __r_Step_6(self):
        self.ket = self.cursor
        among_var = self.find_among_b(DutchStemmer.a_7)
        if among_var == 0:
            return False
        self.bra = self.cursor
        if among_var == 1:
            if not self.slice_from("b"):
                return False
        elif among_var == 2:
            if not self.slice_from("c"):
                return False
        elif among_var == 3:
            if not self.slice_from("d"):
                return False
        elif among_var == 4:
            if not self.slice_from("f"):
                return False
        elif among_var == 5:
            if not self.slice_from("g"):
                return False
        elif among_var == 6:
            if not self.slice_from("h"):
                return False
        elif among_var == 7:
            if not self.slice_from("j"):
                return False
        elif among_var == 8:
            if not self.slice_from("k"):
                return False
        elif among_var == 9:
            if not self.slice_from("l"):
                return False
        elif among_var == 10:
            if not self.slice_from("m"):
                return False
        elif among_var == 11:
            v_1 = self.limit - self.cursor
            try:
                if not self.eq_s_b("i"):
                    raise lab0()
                if self.cursor > self.limit_backward:
                    raise lab0()
                return False
            except lab0:
                pass
            self.cursor = self.limit - v_1
            if not self.slice_from("n"):
                return False
        elif among_var == 12:
            if not self.slice_from("p"):
                return False
        elif among_var == 13:
            if not self.slice_from("q"):
                return False
        elif among_var == 14:
            if not self.slice_from("r"):
                return False
        elif among_var == 15:
            if not self.slice_from("s"):
                return False
        elif among_var == 16:
            if not self.slice_from("t"):
                return False
        elif among_var == 17:
            if not self.slice_from("v"):
                return False
        elif among_var == 18:
            if not self.slice_from("w"):
                return False
        elif among_var == 19:
            if not self.slice_from("x"):
                return False
        else:
            if not self.slice_from("z"):
                return False
        return True

    def __r_Step_1c(self):
        self.ket = self.cursor
        among_var = self.find_among_b(DutchStemmer.a_8)
        if among_var == 0:
            return False
        self.bra = self.cursor
        if not self.__r_R1():
            return False
        if not self.__r_C():
            return False
        if among_var == 1:
            v_1 = self.limit - self.cursor
            try:
                if not self.eq_s_b("n"):
                    raise lab0()
                if not self.__r_R1():
                    raise lab0()
                return False
            except lab0:
                pass
            self.cursor = self.limit - v_1
            try:
                v_2 = self.limit - self.cursor
                try:
                    if not self.eq_s_b("in"):
                        raise lab2()
                    if self.cursor > self.limit_backward:
                        raise lab2()
                    if not self.slice_from("n"):
                        return False
                    raise lab1()
                except lab2:
                    pass
                self.cursor = self.limit - v_2
                if not self.slice_del():
                    return False

            except lab1:
                pass
        else:
            v_3 = self.limit - self.cursor
            try:
                if not self.eq_s_b("h"):
                    raise lab3()
                if not self.__r_R1():
                    raise lab3()
                return False
            except lab3:
                pass
            self.cursor = self.limit - v_3
            v_4 = self.limit - self.cursor
            try:
                if not self.eq_s_b("en"):
                    raise lab4()
                if self.cursor > self.limit_backward:
                    raise lab4()
                return False
            except lab4:
                pass
            self.cursor = self.limit - v_4
            if not self.slice_del():
                return False

        return True

    def __r_Lose_prefix(self):
        self.bra = self.cursor
        if not self.eq_s("ge"):
            return False
        self.ket = self.cursor
        v_1 = self.cursor
        c = self.cursor + 3
        if c > self.limit:
            return False
        self.cursor = c
        self.cursor = v_1
        v_2 = self.cursor
        try:
            while True:
                v_3 = self.cursor
                try:
                    try:
                        v_4 = self.cursor
                        try:
                            if not self.eq_s("ij"):
                                raise lab3()
                            raise lab2()
                        except lab3:
                            pass
                        self.cursor = v_4
                        if not self.in_grouping(DutchStemmer.g_v):
                            raise lab1()
                    except lab2:
                        pass
                    raise lab0()
                except lab1:
                    pass
                self.cursor = v_3
                if self.cursor >= self.limit:
                    return False
                self.cursor += 1
        except lab0:
            pass
        while True:
            v_5 = self.cursor
            try:
                try:
                    v_6 = self.cursor
                    try:
                        if not self.eq_s("ij"):
                            raise lab6()
                        raise lab5()
                    except lab6:
                        pass
                    self.cursor = v_6
                    if not self.in_grouping(DutchStemmer.g_v):
                        raise lab4()
                except lab5:
                    pass
                continue
            except lab4:
                pass
            self.cursor = v_5
            break
        try:
            if self.cursor < self.limit:
                raise lab7()
            return False
        except lab7:
            pass
        self.cursor = v_2
        among_var = self.find_among(DutchStemmer.a_9)
        if among_var == 1:
            return False
        self.B_GE_removed = True
        if not self.slice_del():
            return False

        v_8 = self.cursor
        try:
            self.bra = self.cursor
            among_var = self.find_among(DutchStemmer.a_10)
            if among_var == 0:
                raise lab8()
            self.ket = self.cursor
            if among_var == 1:
                if not self.slice_from("e"):
                    return False
            else:
                if not self.slice_from("i"):
                    return False
        except lab8:
            pass
        self.cursor = v_8
        return True

    def __r_Lose_infix(self):
        if self.cursor >= self.limit:
            return False
        self.cursor += 1
        try:
            while True:
                try:
                    self.bra = self.cursor
                    if not self.eq_s("ge"):
                        raise lab1()
                    self.ket = self.cursor
                    raise lab0()
                except lab1:
                    pass
                if self.cursor >= self.limit:
                    return False
                self.cursor += 1
        except lab0:
            pass
        v_2 = self.cursor
        c = self.cursor + 3
        if c > self.limit:
            return False
        self.cursor = c
        self.cursor = v_2
        v_3 = self.cursor
        try:
            while True:
                v_4 = self.cursor
                try:
                    try:
                        v_5 = self.cursor
                        try:
                            if not self.eq_s("ij"):
                                raise lab5()
                            raise lab4()
                        except lab5:
                            pass
                        self.cursor = v_5
                        if not self.in_grouping(DutchStemmer.g_v):
                            raise lab3()
                    except lab4:
                        pass
                    raise lab2()
                except lab3:
                    pass
                self.cursor = v_4
                if self.cursor >= self.limit:
                    return False
                self.cursor += 1
        except lab2:
            pass
        while True:
            v_6 = self.cursor
            try:
                try:
                    v_7 = self.cursor
                    try:
                        if not self.eq_s("ij"):
                            raise lab8()
                        raise lab7()
                    except lab8:
                        pass
                    self.cursor = v_7
                    if not self.in_grouping(DutchStemmer.g_v):
                        raise lab6()
                except lab7:
                    pass
                continue
            except lab6:
                pass
            self.cursor = v_6
            break
        try:
            if self.cursor < self.limit:
                raise lab9()
            return False
        except lab9:
            pass
        self.cursor = v_3
        self.B_GE_removed = True
        if not self.slice_del():
            return False

        v_9 = self.cursor
        try:
            self.bra = self.cursor
            among_var = self.find_among(DutchStemmer.a_11)
            if among_var == 0:
                raise lab10()
            self.ket = self.cursor
            if among_var == 1:
                if not self.slice_from("e"):
                    return False
            else:
                if not self.slice_from("i"):
                    return False
        except lab10:
            pass
        self.cursor = v_9
        return True

    def __r_measure(self):
        self.I_p1 = self.limit
        self.I_p2 = self.limit
        v_1 = self.cursor
        try:
            while True:
                try:
                    if not self.out_grouping(DutchStemmer.g_v):
                        raise lab1()
                    continue
                except lab1:
                    pass
                break
            v_3 = 1
            while True:
                v_4 = self.cursor
                try:
                    try:
                        v_5 = self.cursor
                        try:
                            if not self.eq_s("ij"):
                                raise lab4()
                            raise lab3()
                        except lab4:
                            pass
                        self.cursor = v_5
                        if not self.in_grouping(DutchStemmer.g_v):
                            raise lab2()
                    except lab3:
                        pass
                    v_3 -= 1
                    continue
                except lab2:
                    pass
                self.cursor = v_4
                break
            if v_3 > 0:
                raise lab0()
            if not self.out_grouping(DutchStemmer.g_v):
                raise lab0()
            self.I_p1 = self.cursor
            while True:
                try:
                    if not self.out_grouping(DutchStemmer.g_v):
                        raise lab5()
                    continue
                except lab5:
                    pass
                break
            v_7 = 1
            while True:
                v_8 = self.cursor
                try:
                    try:
                        v_9 = self.cursor
                        try:
                            if not self.eq_s("ij"):
                                raise lab8()
                            raise lab7()
                        except lab8:
                            pass
                        self.cursor = v_9
                        if not self.in_grouping(DutchStemmer.g_v):
                            raise lab6()
                    except lab7:
                        pass
                    v_7 -= 1
                    continue
                except lab6:
                    pass
                self.cursor = v_8
                break
            if v_7 > 0:
                raise lab0()
            if not self.out_grouping(DutchStemmer.g_v):
                raise lab0()
            self.I_p2 = self.cursor
        except lab0:
            pass
        self.cursor = v_1
        return True

    def _stem(self):
        self.B_stemmed = False
        self.__r_measure()
        self.limit_backward = self.cursor
        self.cursor = self.limit
        v_1 = self.limit - self.cursor
        try:
            if not self.__r_Step_1():
                raise lab0()
            self.B_stemmed = True
        except lab0:
            pass
        self.cursor = self.limit - v_1
        v_2 = self.limit - self.cursor
        try:
            if not self.__r_Step_2():
                raise lab1()
            self.B_stemmed = True
        except lab1:
            pass
        self.cursor = self.limit - v_2
        v_3 = self.limit - self.cursor
        try:
            if not self.__r_Step_3():
                raise lab2()
            self.B_stemmed = True
        except lab2:
            pass
        self.cursor = self.limit - v_3
        v_4 = self.limit - self.cursor
        try:
            if not self.__r_Step_4():
                raise lab3()
            self.B_stemmed = True
        except lab3:
            pass
        self.cursor = self.limit - v_4
        self.cursor = self.limit_backward
        self.B_GE_removed = False
        v_5 = self.cursor
        try:
            v_6 = self.cursor
            if not self.__r_Lose_prefix():
                raise lab4()
            self.cursor = v_6
            self.__r_measure()
        except lab4:
            pass
        self.cursor = v_5
        self.limit_backward = self.cursor
        self.cursor = self.limit
        v_7 = self.limit - self.cursor
        try:
            if not self.B_GE_removed:
                raise lab5()
            self.B_stemmed = True
            if not self.__r_Step_1c():
                raise lab5()
        except lab5:
            pass
        self.cursor = self.limit - v_7
        self.cursor = self.limit_backward
        self.B_GE_removed = False
        v_8 = self.cursor
        try:
            v_9 = self.cursor
            if not self.__r_Lose_infix():
                raise lab6()
            self.cursor = v_9
            self.__r_measure()
        except lab6:
            pass
        self.cursor = v_8
        self.limit_backward = self.cursor
        self.cursor = self.limit
        v_10 = self.limit - self.cursor
        try:
            if not self.B_GE_removed:
                raise lab7()
            self.B_stemmed = True
            if not self.__r_Step_1c():
                raise lab7()
        except lab7:
            pass
        self.cursor = self.limit - v_10
        self.cursor = self.limit_backward
        self.limit_backward = self.cursor
        self.cursor = self.limit
        v_11 = self.limit - self.cursor
        try:
            if not self.__r_Step_7():
                raise lab8()
            self.B_stemmed = True
        except lab8:
            pass
        self.cursor = self.limit - v_11
        v_12 = self.limit - self.cursor
        try:
            if not self.B_stemmed:
                raise lab9()
            if not self.__r_Step_6():
                raise lab9()
        except lab9:
            pass
        self.cursor = self.limit - v_12
        self.cursor = self.limit_backward
        return True

    a_0 = [
        Among("a", -1, 1),
        Among("e", -1, 2),
        Among("o", -1, 1),
        Among("u", -1, 1),
        Among("à", -1, 1),
        Among("á", -1, 1),
        Among("â", -1, 1),
        Among("ä", -1, 1),
        Among("è", -1, 2),
        Among("é", -1, 2),
        Among("ê", -1, 2),
        Among("eë", -1, 3),
        Among("ië", -1, 4),
        Among("ò", -1, 1),
        Among("ó", -1, 1),
        Among("ô", -1, 1),
        Among("ö", -1, 1),
        Among("ù", -1, 1),
        Among("ú", -1, 1),
        Among("û", -1, 1),
        Among("ü", -1, 1),
    ]

    a_1 = [
        Among("nde", -1, 8),
        Among("en", -1, 7),
        Among("s", -1, 2),
        Among("'s", 2, 1),
        Among("es", 2, 4),
        Among("ies", 4, 3),
        Among("aus", 2, 6),
        Among("és", 2, 5),
    ]

    a_2 = [
        Among("de", -1, 5),
        Among("ge", -1, 2),
        Among("ische", -1, 4),
        Among("je", -1, 1),
        Among("lijke", -1, 3),
        Among("le", -1, 9),
        Among("ene", -1, 10),
        Among("re", -1, 8),
        Among("se", -1, 7),
        Among("te", -1, 6),
        Among("ieve", -1, 11),
    ]

    a_3 = [
        Among("heid", -1, 3),
        Among("fie", -1, 7),
        Among("gie", -1, 8),
        Among("atie", -1, 1),
        Among("isme", -1, 5),
        Among("ing", -1, 5),
        Among("arij", -1, 6),
        Among("erij", -1, 5),
        Among("sel", -1, 3),
        Among("rder", -1, 4),
        Among("ster", -1, 3),
        Among("iteit", -1, 2),
        Among("dst", -1, 10),
        Among("tst", -1, 9),
    ]

    a_4 = [
        Among("end", -1, 9),
        Among("atief", -1, 2),
        Among("erig", -1, 9),
        Among("achtig", -1, 3),
        Among("ioneel", -1, 1),
        Among("baar", -1, 3),
        Among("laar", -1, 5),
        Among("naar", -1, 4),
        Among("raar", -1, 6),
        Among("eriger", -1, 9),
        Among("achtiger", -1, 3),
        Among("lijker", -1, 8),
        Among("tant", -1, 7),
        Among("erigst", -1, 9),
        Among("achtigst", -1, 3),
        Among("lijkst", -1, 8),
    ]

    a_5 = [Among("ig", -1, 1), Among("iger", -1, 1), Among("igst", -1, 1)]

    a_6 = [Among("ft", -1, 2), Among("kt", -1, 1), Among("pt", -1, 3)]

    a_7 = [
        Among("bb", -1, 1),
        Among("cc", -1, 2),
        Among("dd", -1, 3),
        Among("ff", -1, 4),
        Among("gg", -1, 5),
        Among("hh", -1, 6),
        Among("jj", -1, 7),
        Among("kk", -1, 8),
        Among("ll", -1, 9),
        Among("mm", -1, 10),
        Among("nn", -1, 11),
        Among("pp", -1, 12),
        Among("qq", -1, 13),
        Among("rr", -1, 14),
        Among("ss", -1, 15),
        Among("tt", -1, 16),
        Among("v", -1, 4),
        Among("vv", 16, 17),
        Among("ww", -1, 18),
        Among("xx", -1, 19),
        Among("z", -1, 15),
        Among("zz", 20, 20),
    ]

    a_8 = [Among("d", -1, 1), Among("t", -1, 2)]

    a_9 = [
        Among("", -1, -1),
        Among("eft", 0, 1),
        Among("vaa", 0, 1),
        Among("val", 0, 1),
        Among("vali", 3, -1),
        Among("vare", 0, 1),
    ]

    a_10 = [Among("ë", -1, 1), Among("ï", -1, 2)]

    a_11 = [Among("ë", -1, 1), Among("ï", -1, 2)]


class lab0(BaseException):
    pass


class lab1(BaseException):
    pass


class lab2(BaseException):
    pass


class lab3(BaseException):
    pass


class lab4(BaseException):
    pass


class lab5(BaseException):
    pass


class lab6(BaseException):
    pass


class lab7(BaseException):
    pass


class lab8(BaseException):
    pass


class lab9(BaseException):
    pass


class lab10(BaseException):
    pass
