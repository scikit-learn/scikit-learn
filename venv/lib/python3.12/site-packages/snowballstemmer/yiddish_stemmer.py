# -*- coding: utf-8 -*-
# Generated from yiddish.sbl by Snowball 3.0.1 - https://snowballstem.org/

from .among import Among
from .basestemmer import BaseStemmer


class YiddishStemmer(BaseStemmer):
    """
    This class implements the stemming algorithm defined by a snowball script.
    Generated from yiddish.sbl by Snowball 3.0.1 - https://snowballstem.org/
    """

    g_niked = {
        "\u05b0",
        "\u05b4",
        "\u05b5",
        "\u05b6",
        "\u05b1",
        "\u05b7",
        "\u05b2",
        "\u05b8",
        "\u05b3",
        "\u05c2",
        "\u05c1",
        "\u05b9",
        "\u05bc",
        "\u05bb",
        "\u05bf",
    }

    g_vowel = {"\u05d0", "\u05d5", "\u05d9", "\u05e2", "\u05f1", "\u05f2"}

    g_consonant = {
        "\u05d1",
        "\u05d2",
        "\u05d3",
        "\u05d4",
        "\u05d6",
        "\u05d7",
        "\u05d8",
        "\u05da",
        "\u05db",
        "\u05dc",
        "\u05dd",
        "\u05de",
        "\u05df",
        "\u05e0",
        "\u05e1",
        "\u05e3",
        "\u05e4",
        "\u05e5",
        "\u05e6",
        "\u05e7",
        "\u05e8",
        "\u05e9",
        "\u05ea",
        "\u05f0",
    }

    I_x = 0
    I_p1 = 0

    def __r_prelude(self):
        v_1 = self.cursor
        try:
            while True:
                v_2 = self.cursor
                try:
                    try:
                        while True:
                            v_3 = self.cursor
                            try:
                                self.bra = self.cursor
                                among_var = self.find_among(YiddishStemmer.a_0)
                                if among_var == 0:
                                    raise lab3()
                                self.ket = self.cursor
                                if among_var == 1:
                                    v_4 = self.cursor
                                    try:
                                        if not self.eq_s("\u05bc"):
                                            raise lab4()
                                        raise lab3()
                                    except lab4:
                                        pass
                                    self.cursor = v_4
                                    if not self.slice_from("\u05f0"):
                                        return False
                                elif among_var == 2:
                                    v_5 = self.cursor
                                    try:
                                        if not self.eq_s("\u05b4"):
                                            raise lab5()
                                        raise lab3()
                                    except lab5:
                                        pass
                                    self.cursor = v_5
                                    if not self.slice_from("\u05f1"):
                                        return False
                                elif among_var == 3:
                                    v_6 = self.cursor
                                    try:
                                        if not self.eq_s("\u05b4"):
                                            raise lab6()
                                        raise lab3()
                                    except lab6:
                                        pass
                                    self.cursor = v_6
                                    if not self.slice_from("\u05f2"):
                                        return False
                                elif among_var == 4:
                                    if not self.slice_from("\u05db"):
                                        return False
                                elif among_var == 5:
                                    if not self.slice_from("\u05de"):
                                        return False
                                elif among_var == 6:
                                    if not self.slice_from("\u05e0"):
                                        return False
                                elif among_var == 7:
                                    if not self.slice_from("\u05e4"):
                                        return False
                                else:
                                    if not self.slice_from("\u05e6"):
                                        return False
                                self.cursor = v_3
                                raise lab2()
                            except lab3:
                                pass
                            self.cursor = v_3
                            if self.cursor >= self.limit:
                                raise lab1()
                            self.cursor += 1
                    except lab2:
                        pass
                    continue
                except lab1:
                    pass
                self.cursor = v_2
                break
        except lab0:
            pass
        self.cursor = v_1
        v_7 = self.cursor
        try:
            while True:
                v_8 = self.cursor
                try:
                    try:
                        while True:
                            v_9 = self.cursor
                            try:
                                self.bra = self.cursor
                                if not self.in_grouping(YiddishStemmer.g_niked):
                                    raise lab10()
                                self.ket = self.cursor
                                if not self.slice_del():
                                    return False

                                self.cursor = v_9
                                raise lab9()
                            except lab10:
                                pass
                            self.cursor = v_9
                            if self.cursor >= self.limit:
                                raise lab8()
                            self.cursor += 1
                    except lab9:
                        pass
                    continue
                except lab8:
                    pass
                self.cursor = v_8
                break
        except lab7:
            pass
        self.cursor = v_7
        return True

    def __r_mark_regions(self):
        self.I_p1 = self.limit
        v_1 = self.cursor
        try:
            self.bra = self.cursor
            if not self.eq_s("\u05d2\u05e2"):
                self.cursor = v_1
                raise lab0()
            self.ket = self.cursor
            v_2 = self.cursor
            try:
                try:
                    v_3 = self.cursor
                    try:
                        if not self.eq_s("\u05dc\u05d8"):
                            raise lab3()
                        raise lab2()
                    except lab3:
                        pass
                    self.cursor = v_3
                    try:
                        if not self.eq_s("\u05d1\u05e0"):
                            raise lab4()
                        raise lab2()
                    except lab4:
                        pass
                    self.cursor = v_3
                    if self.cursor < self.limit:
                        raise lab1()
                except lab2:
                    pass
                self.cursor = v_1
                raise lab0()
            except lab1:
                pass
            self.cursor = v_2
            if not self.slice_from("GE"):
                return False
        except lab0:
            pass
        v_4 = self.cursor
        try:
            if self.find_among(YiddishStemmer.a_1) == 0:
                self.cursor = v_4
                raise lab5()
            try:
                v_5 = self.cursor
                try:
                    v_6 = self.cursor
                    try:
                        v_7 = self.cursor
                        try:
                            if not self.eq_s("\u05e6\u05d5\u05d2\u05e0"):
                                raise lab9()
                            raise lab8()
                        except lab9:
                            pass
                        self.cursor = v_7
                        try:
                            if not self.eq_s("\u05e6\u05d5\u05e7\u05d8"):
                                raise lab10()
                            raise lab8()
                        except lab10:
                            pass
                        self.cursor = v_7
                        if not self.eq_s("\u05e6\u05d5\u05e7\u05e0"):
                            raise lab7()
                    except lab8:
                        pass
                    if self.cursor < self.limit:
                        raise lab7()
                    self.cursor = v_6
                    raise lab6()
                except lab7:
                    pass
                self.cursor = v_5
                try:
                    v_8 = self.cursor
                    if not self.eq_s("\u05d2\u05e2\u05d1\u05e0"):
                        raise lab11()
                    self.cursor = v_8
                    raise lab6()
                except lab11:
                    pass
                self.cursor = v_5
                try:
                    self.bra = self.cursor
                    if not self.eq_s("\u05d2\u05e2"):
                        raise lab12()
                    self.ket = self.cursor
                    if not self.slice_from("GE"):
                        return False
                    raise lab6()
                except lab12:
                    pass
                self.cursor = v_5
                self.bra = self.cursor
                if not self.eq_s("\u05e6\u05d5"):
                    self.cursor = v_4
                    raise lab5()
                self.ket = self.cursor
                if not self.slice_from("TSU"):
                    return False
            except lab6:
                pass
        except lab5:
            pass
        v_9 = self.cursor
        c = self.cursor + 3
        if c > self.limit:
            return False
        self.cursor = c
        self.I_x = self.cursor
        self.cursor = v_9
        v_10 = self.cursor
        try:
            if self.find_among(YiddishStemmer.a_2) == 0:
                self.cursor = v_10
                raise lab13()
        except lab13:
            pass
        v_11 = self.cursor
        try:
            if not self.in_grouping(YiddishStemmer.g_consonant):
                raise lab14()
            if not self.in_grouping(YiddishStemmer.g_consonant):
                raise lab14()
            if not self.in_grouping(YiddishStemmer.g_consonant):
                raise lab14()
            self.I_p1 = self.cursor
            return False
        except lab14:
            pass
        self.cursor = v_11
        if not self.go_out_grouping(YiddishStemmer.g_vowel):
            return False
        self.cursor += 1
        if not self.go_in_grouping(YiddishStemmer.g_vowel):
            return False
        self.I_p1 = self.cursor
        try:
            if self.I_p1 >= self.I_x:
                raise lab15()
            self.I_p1 = self.I_x
        except lab15:
            pass
        return True

    def __r_R1(self):
        return self.I_p1 <= self.cursor

    def __r_R1plus3(self):
        return self.I_p1 <= (self.cursor + 3)

    def __r_standard_suffix(self):
        v_1 = self.limit - self.cursor
        try:
            self.ket = self.cursor
            among_var = self.find_among_b(YiddishStemmer.a_4)
            if among_var == 0:
                raise lab0()
            self.bra = self.cursor
            if among_var == 1:
                if not self.__r_R1():
                    raise lab0()
                if not self.slice_del():
                    return False

            elif among_var == 2:
                if not self.__r_R1():
                    raise lab0()
                if not self.slice_from("\u05d9\u05e2"):
                    return False
            elif among_var == 3:
                if not self.__r_R1():
                    raise lab0()
                if not self.slice_del():
                    return False

                self.ket = self.cursor
                among_var = self.find_among_b(YiddishStemmer.a_3)
                if among_var == 0:
                    raise lab0()
                self.bra = self.cursor
                if among_var == 1:
                    if not self.slice_from("\u05d2\u05f2"):
                        return False
                elif among_var == 2:
                    if not self.slice_from("\u05e0\u05e2\u05de"):
                        return False
                elif among_var == 3:
                    if not self.slice_from("\u05de\u05f2\u05d3"):
                        return False
                elif among_var == 4:
                    if not self.slice_from("\u05d1\u05f2\u05d8"):
                        return False
                elif among_var == 5:
                    if not self.slice_from("\u05d1\u05f2\u05e1"):
                        return False
                elif among_var == 6:
                    if not self.slice_from("\u05f0\u05f2\u05d6"):
                        return False
                elif among_var == 7:
                    if not self.slice_from("\u05d8\u05e8\u05f2\u05d1"):
                        return False
                elif among_var == 8:
                    if not self.slice_from("\u05dc\u05f2\u05d8"):
                        return False
                elif among_var == 9:
                    if not self.slice_from("\u05e7\u05dc\u05f2\u05d1"):
                        return False
                elif among_var == 10:
                    if not self.slice_from("\u05e8\u05f2\u05d1"):
                        return False
                elif among_var == 11:
                    if not self.slice_from("\u05e8\u05f2\u05e1"):
                        return False
                elif among_var == 12:
                    if not self.slice_from("\u05e9\u05f0\u05f2\u05d2"):
                        return False
                elif among_var == 13:
                    if not self.slice_from("\u05e9\u05de\u05f2\u05e1"):
                        return False
                elif among_var == 14:
                    if not self.slice_from("\u05e9\u05e0\u05f2\u05d3"):
                        return False
                elif among_var == 15:
                    if not self.slice_from("\u05e9\u05e8\u05f2\u05d1"):
                        return False
                elif among_var == 16:
                    if not self.slice_from("\u05d1\u05d9\u05e0\u05d3"):
                        return False
                elif among_var == 17:
                    if not self.slice_from("\u05f0\u05d9\u05d8\u05e9"):
                        return False
                elif among_var == 18:
                    if not self.slice_from("\u05d6\u05d9\u05e0\u05d2"):
                        return False
                elif among_var == 19:
                    if not self.slice_from("\u05d8\u05e8\u05d9\u05e0\u05e7"):
                        return False
                elif among_var == 20:
                    if not self.slice_from("\u05e6\u05f0\u05d9\u05e0\u05d2"):
                        return False
                elif among_var == 21:
                    if not self.slice_from("\u05e9\u05dc\u05d9\u05e0\u05d2"):
                        return False
                elif among_var == 22:
                    if not self.slice_from("\u05d1\u05f2\u05d2"):
                        return False
                elif among_var == 23:
                    if not self.slice_from("\u05d4\u05f2\u05d1"):
                        return False
                elif among_var == 24:
                    if not self.slice_from("\u05e4\u05d0\u05e8\u05dc\u05d9\u05e8"):
                        return False
                elif among_var == 25:
                    if not self.slice_from("\u05e9\u05d8\u05f2"):
                        return False
                else:
                    if not self.slice_from("\u05e9\u05f0\u05e2\u05e8"):
                        return False
            elif among_var == 4:
                try:
                    v_2 = self.limit - self.cursor
                    try:
                        if not self.__r_R1():
                            raise lab2()
                        if not self.slice_del():
                            return False

                        raise lab1()
                    except lab2:
                        pass
                    self.cursor = self.limit - v_2
                    if not self.slice_from("\u05d8"):
                        return False
                except lab1:
                    pass
                self.ket = self.cursor
                if not self.eq_s_b("\u05d1\u05e8\u05d0\u05db"):
                    raise lab0()
                v_3 = self.limit - self.cursor
                try:
                    if not self.eq_s_b("\u05d2\u05e2"):
                        self.cursor = self.limit - v_3
                        raise lab3()
                except lab3:
                    pass
                self.bra = self.cursor
                if not self.slice_from("\u05d1\u05e8\u05e2\u05e0\u05d2"):
                    return False
            elif among_var == 5:
                if not self.slice_from("\u05d2\u05f2"):
                    return False
            elif among_var == 6:
                if not self.slice_from("\u05e0\u05e2\u05de"):
                    return False
            elif among_var == 7:
                if not self.slice_from("\u05e9\u05e8\u05f2\u05d1"):
                    return False
            elif among_var == 8:
                if not self.slice_from("\u05de\u05f2\u05d3"):
                    return False
            elif among_var == 9:
                if not self.slice_from("\u05d1\u05f2\u05d8"):
                    return False
            elif among_var == 10:
                if not self.slice_from("\u05d1\u05f2\u05e1"):
                    return False
            elif among_var == 11:
                if not self.slice_from("\u05f0\u05f2\u05d6"):
                    return False
            elif among_var == 12:
                if not self.slice_from("\u05d8\u05e8\u05f2\u05d1"):
                    return False
            elif among_var == 13:
                if not self.slice_from("\u05dc\u05f2\u05d8"):
                    return False
            elif among_var == 14:
                if not self.slice_from("\u05e7\u05dc\u05f2\u05d1"):
                    return False
            elif among_var == 15:
                if not self.slice_from("\u05e8\u05f2\u05d1"):
                    return False
            elif among_var == 16:
                if not self.slice_from("\u05e8\u05f2\u05e1"):
                    return False
            elif among_var == 17:
                if not self.slice_from("\u05e9\u05f0\u05f2\u05d2"):
                    return False
            elif among_var == 18:
                if not self.slice_from("\u05e9\u05de\u05f2\u05e1"):
                    return False
            elif among_var == 19:
                if not self.slice_from("\u05e9\u05e0\u05f2\u05d3"):
                    return False
            elif among_var == 20:
                if not self.slice_from("\u05d1\u05d9\u05e0\u05d3"):
                    return False
            elif among_var == 21:
                if not self.slice_from("\u05f0\u05d9\u05d8\u05e9"):
                    return False
            elif among_var == 22:
                if not self.slice_from("\u05d6\u05d9\u05e0\u05d2"):
                    return False
            elif among_var == 23:
                if not self.slice_from("\u05d8\u05e8\u05d9\u05e0\u05e7"):
                    return False
            elif among_var == 24:
                if not self.slice_from("\u05e6\u05f0\u05d9\u05e0\u05d2"):
                    return False
            elif among_var == 25:
                if not self.slice_from("\u05e9\u05dc\u05d9\u05e0\u05d2"):
                    return False
            elif among_var == 26:
                if not self.slice_from("\u05d1\u05f2\u05d2"):
                    return False
            elif among_var == 27:
                if not self.slice_from("\u05d4\u05f2\u05d1"):
                    return False
            elif among_var == 28:
                if not self.slice_from("\u05e4\u05d0\u05e8\u05dc\u05d9\u05e8"):
                    return False
            elif among_var == 29:
                if not self.slice_from("\u05e9\u05d8\u05f2"):
                    return False
            elif among_var == 30:
                if not self.slice_from("\u05e9\u05f0\u05e2\u05e8"):
                    return False
            elif among_var == 31:
                if not self.slice_from("\u05d1\u05e8\u05e2\u05e0\u05d2"):
                    return False
            elif among_var == 32:
                if not self.__r_R1():
                    raise lab0()
                if not self.slice_from("\u05d4"):
                    return False
            elif among_var == 33:
                try:
                    v_4 = self.limit - self.cursor
                    try:
                        try:
                            v_5 = self.limit - self.cursor
                            try:
                                if not self.eq_s_b("\u05d2"):
                                    raise lab7()
                                raise lab6()
                            except lab7:
                                pass
                            self.cursor = self.limit - v_5
                            if not self.eq_s_b("\u05e9"):
                                raise lab5()
                        except lab6:
                            pass
                        v_6 = self.limit - self.cursor
                        try:
                            if not self.__r_R1plus3():
                                self.cursor = self.limit - v_6
                                raise lab8()
                            if not self.slice_from("\u05d9\u05e1"):
                                return False
                        except lab8:
                            pass
                        raise lab4()
                    except lab5:
                        pass
                    self.cursor = self.limit - v_4
                    if not self.__r_R1():
                        raise lab0()
                    if not self.slice_del():
                        return False

                except lab4:
                    pass
        except lab0:
            pass
        self.cursor = self.limit - v_1
        v_7 = self.limit - self.cursor
        try:
            self.ket = self.cursor
            among_var = self.find_among_b(YiddishStemmer.a_5)
            if among_var == 0:
                raise lab9()
            self.bra = self.cursor
            if among_var == 1:
                if not self.__r_R1():
                    raise lab9()
                if not self.slice_del():
                    return False

            else:
                if not self.__r_R1():
                    raise lab9()
                if not self.in_grouping_b(YiddishStemmer.g_consonant):
                    raise lab9()
                if not self.slice_del():
                    return False

        except lab9:
            pass
        self.cursor = self.limit - v_7
        v_8 = self.limit - self.cursor
        try:
            self.ket = self.cursor
            among_var = self.find_among_b(YiddishStemmer.a_6)
            if among_var == 0:
                raise lab10()
            self.bra = self.cursor
            if among_var == 1:
                if not self.__r_R1():
                    raise lab10()
                if not self.slice_del():
                    return False

        except lab10:
            pass
        self.cursor = self.limit - v_8
        v_9 = self.limit - self.cursor
        try:
            while True:
                v_10 = self.limit - self.cursor
                try:
                    try:
                        while True:
                            v_11 = self.limit - self.cursor
                            try:
                                self.ket = self.cursor
                                try:
                                    v_12 = self.limit - self.cursor
                                    try:
                                        if not self.eq_s_b("GE"):
                                            raise lab16()
                                        raise lab15()
                                    except lab16:
                                        pass
                                    self.cursor = self.limit - v_12
                                    if not self.eq_s_b("TSU"):
                                        raise lab14()
                                except lab15:
                                    pass
                                self.bra = self.cursor
                                if not self.slice_del():
                                    return False

                                self.cursor = self.limit - v_11
                                raise lab13()
                            except lab14:
                                pass
                            self.cursor = self.limit - v_11
                            if self.cursor <= self.limit_backward:
                                raise lab12()
                            self.cursor -= 1
                    except lab13:
                        pass
                    continue
                except lab12:
                    pass
                self.cursor = self.limit - v_10
                break
        except lab11:
            pass
        self.cursor = self.limit - v_9
        return True

    def _stem(self):
        self.__r_prelude()
        v_2 = self.cursor
        self.__r_mark_regions()
        self.cursor = v_2
        self.limit_backward = self.cursor
        self.cursor = self.limit
        self.__r_standard_suffix()
        self.cursor = self.limit_backward
        return True

    a_0 = [
        Among("\u05d5\u05d5", -1, 1),
        Among("\u05d5\u05d9", -1, 2),
        Among("\u05d9\u05d9", -1, 3),
        Among("\u05da", -1, 4),
        Among("\u05dd", -1, 5),
        Among("\u05df", -1, 6),
        Among("\u05e3", -1, 7),
        Among("\u05e5", -1, 8),
    ]

    a_1 = [
        Among("\u05d0\u05d3\u05d5\u05e8\u05db", -1, 1),
        Among("\u05d0\u05d4\u05d9\u05e0", -1, 1),
        Among("\u05d0\u05d4\u05e2\u05e8", -1, 1),
        Among("\u05d0\u05d4\u05f2\u05de", -1, 1),
        Among("\u05d0\u05d5\u05de", -1, 1),
        Among("\u05d0\u05d5\u05e0\u05d8\u05e2\u05e8", -1, 1),
        Among("\u05d0\u05d9\u05d1\u05e2\u05e8", -1, 1),
        Among("\u05d0\u05e0", -1, 1),
        Among("\u05d0\u05e0\u05d8", 7, 1),
        Among("\u05d0\u05e0\u05d8\u05e7\u05e2\u05d2\u05e0", 8, 1),
        Among("\u05d0\u05e0\u05d9\u05d3\u05e2\u05e8", 7, 1),
        Among("\u05d0\u05e4", -1, 1),
        Among("\u05d0\u05e4\u05d9\u05e8", 11, 1),
        Among("\u05d0\u05e7\u05e2\u05d2\u05e0", -1, 1),
        Among("\u05d0\u05e8\u05d0\u05e4", -1, 1),
        Among("\u05d0\u05e8\u05d5\u05de", -1, 1),
        Among("\u05d0\u05e8\u05d5\u05e0\u05d8\u05e2\u05e8", -1, 1),
        Among("\u05d0\u05e8\u05d9\u05d1\u05e2\u05e8", -1, 1),
        Among("\u05d0\u05e8\u05f1\u05e1", -1, 1),
        Among("\u05d0\u05e8\u05f1\u05e4", -1, 1),
        Among("\u05d0\u05e8\u05f2\u05e0", -1, 1),
        Among("\u05d0\u05f0\u05e2\u05e7", -1, 1),
        Among("\u05d0\u05f1\u05e1", -1, 1),
        Among("\u05d0\u05f1\u05e4", -1, 1),
        Among("\u05d0\u05f2\u05e0", -1, 1),
        Among("\u05d1\u05d0", -1, 1),
        Among("\u05d1\u05f2", -1, 1),
        Among("\u05d3\u05d5\u05e8\u05db", -1, 1),
        Among("\u05d3\u05e2\u05e8", -1, 1),
        Among("\u05de\u05d9\u05d8", -1, 1),
        Among("\u05e0\u05d0\u05db", -1, 1),
        Among("\u05e4\u05d0\u05e8", -1, 1),
        Among("\u05e4\u05d0\u05e8\u05d1\u05f2", 31, 1),
        Among("\u05e4\u05d0\u05e8\u05f1\u05e1", 31, 1),
        Among("\u05e4\u05d5\u05e0\u05d0\u05e0\u05d3\u05e2\u05e8", -1, 1),
        Among("\u05e6\u05d5", -1, 1),
        Among("\u05e6\u05d5\u05d6\u05d0\u05de\u05e2\u05e0", 35, 1),
        Among("\u05e6\u05d5\u05e0\u05f1\u05e4", 35, 1),
        Among("\u05e6\u05d5\u05e8\u05d9\u05e7", 35, 1),
        Among("\u05e6\u05e2", -1, 1),
    ]

    a_2 = [
        Among("\u05d3\u05d6\u05e9", -1, -1),
        Among("\u05e9\u05d8\u05e8", -1, -1),
        Among("\u05e9\u05d8\u05e9", -1, -1),
        Among("\u05e9\u05e4\u05e8", -1, -1),
    ]

    a_3 = [
        Among("\u05e7\u05dc\u05d9\u05d1", -1, 9),
        Among("\u05e8\u05d9\u05d1", -1, 10),
        Among("\u05d8\u05e8\u05d9\u05d1", 1, 7),
        Among("\u05e9\u05e8\u05d9\u05d1", 1, 15),
        Among("\u05d4\u05f1\u05d1", -1, 23),
        Among("\u05e9\u05f0\u05d9\u05d2", -1, 12),
        Among("\u05d2\u05d0\u05e0\u05d2", -1, 1),
        Among("\u05d6\u05d5\u05e0\u05d2", -1, 18),
        Among("\u05e9\u05dc\u05d5\u05e0\u05d2", -1, 21),
        Among("\u05e6\u05f0\u05d5\u05e0\u05d2", -1, 20),
        Among("\u05d1\u05f1\u05d2", -1, 22),
        Among("\u05d1\u05d5\u05e0\u05d3", -1, 16),
        Among("\u05f0\u05d9\u05d6", -1, 6),
        Among("\u05d1\u05d9\u05d8", -1, 4),
        Among("\u05dc\u05d9\u05d8", -1, 8),
        Among("\u05de\u05d9\u05d8", -1, 3),
        Among("\u05e9\u05e0\u05d9\u05d8", -1, 14),
        Among("\u05e0\u05d5\u05de", -1, 2),
        Among("\u05e9\u05d8\u05d0\u05e0", -1, 25),
        Among("\u05d1\u05d9\u05e1", -1, 5),
        Among("\u05e9\u05de\u05d9\u05e1", -1, 13),
        Among("\u05e8\u05d9\u05e1", -1, 11),
        Among("\u05d8\u05e8\u05d5\u05e0\u05e7", -1, 19),
        Among("\u05e4\u05d0\u05e8\u05dc\u05f1\u05e8", -1, 24),
        Among("\u05e9\u05f0\u05f1\u05e8", -1, 26),
        Among("\u05f0\u05d5\u05d8\u05e9", -1, 17),
    ]

    a_4 = [
        Among("\u05d5\u05e0\u05d2", -1, 1),
        Among("\u05e1\u05d8\u05d5", -1, 1),
        Among("\u05d8", -1, 1),
        Among("\u05d1\u05e8\u05d0\u05db\u05d8", 2, 31),
        Among("\u05e1\u05d8", 2, 1),
        Among("\u05d9\u05e1\u05d8", 4, 33),
        Among("\u05e2\u05d8", 2, 1),
        Among("\u05e9\u05d0\u05e4\u05d8", 2, 1),
        Among("\u05d4\u05f2\u05d8", 2, 1),
        Among("\u05e7\u05f2\u05d8", 2, 1),
        Among("\u05d9\u05e7\u05f2\u05d8", 9, 1),
        Among("\u05dc\u05e2\u05db", -1, 1),
        Among("\u05e2\u05dc\u05e2\u05db", 11, 1),
        Among("\u05d9\u05d6\u05de", -1, 1),
        Among("\u05d9\u05de", -1, 1),
        Among("\u05e2\u05de", -1, 1),
        Among("\u05e2\u05e0\u05e2\u05de", 15, 3),
        Among("\u05d8\u05e2\u05e0\u05e2\u05de", 16, 4),
        Among("\u05e0", -1, 1),
        Among("\u05e7\u05dc\u05d9\u05d1\u05e0", 18, 14),
        Among("\u05e8\u05d9\u05d1\u05e0", 18, 15),
        Among("\u05d8\u05e8\u05d9\u05d1\u05e0", 20, 12),
        Among("\u05e9\u05e8\u05d9\u05d1\u05e0", 20, 7),
        Among("\u05d4\u05f1\u05d1\u05e0", 18, 27),
        Among("\u05e9\u05f0\u05d9\u05d2\u05e0", 18, 17),
        Among("\u05d6\u05d5\u05e0\u05d2\u05e0", 18, 22),
        Among("\u05e9\u05dc\u05d5\u05e0\u05d2\u05e0", 18, 25),
        Among("\u05e6\u05f0\u05d5\u05e0\u05d2\u05e0", 18, 24),
        Among("\u05d1\u05f1\u05d2\u05e0", 18, 26),
        Among("\u05d1\u05d5\u05e0\u05d3\u05e0", 18, 20),
        Among("\u05f0\u05d9\u05d6\u05e0", 18, 11),
        Among("\u05d8\u05e0", 18, 4),
        Among("GE\u05d1\u05d9\u05d8\u05e0", 31, 9),
        Among("GE\u05dc\u05d9\u05d8\u05e0", 31, 13),
        Among("GE\u05de\u05d9\u05d8\u05e0", 31, 8),
        Among("\u05e9\u05e0\u05d9\u05d8\u05e0", 31, 19),
        Among("\u05e1\u05d8\u05e0", 31, 1),
        Among("\u05d9\u05e1\u05d8\u05e0", 36, 1),
        Among("\u05e2\u05d8\u05e0", 31, 1),
        Among("GE\u05d1\u05d9\u05e1\u05e0", 18, 10),
        Among("\u05e9\u05de\u05d9\u05e1\u05e0", 18, 18),
        Among("GE\u05e8\u05d9\u05e1\u05e0", 18, 16),
        Among("\u05e2\u05e0", 18, 1),
        Among("\u05d2\u05d0\u05e0\u05d2\u05e2\u05e0", 42, 5),
        Among("\u05e2\u05dc\u05e2\u05e0", 42, 1),
        Among("\u05e0\u05d5\u05de\u05e2\u05e0", 42, 6),
        Among("\u05d9\u05d6\u05de\u05e2\u05e0", 42, 1),
        Among("\u05e9\u05d8\u05d0\u05e0\u05e2\u05e0", 42, 29),
        Among("\u05d8\u05e8\u05d5\u05e0\u05e7\u05e0", 18, 23),
        Among("\u05e4\u05d0\u05e8\u05dc\u05f1\u05e8\u05e0", 18, 28),
        Among("\u05e9\u05f0\u05f1\u05e8\u05e0", 18, 30),
        Among("\u05f0\u05d5\u05d8\u05e9\u05e0", 18, 21),
        Among("\u05d2\u05f2\u05e0", 18, 5),
        Among("\u05e1", -1, 1),
        Among("\u05d8\u05e1", 53, 4),
        Among("\u05e2\u05d8\u05e1", 54, 1),
        Among("\u05e0\u05e1", 53, 1),
        Among("\u05d8\u05e0\u05e1", 56, 4),
        Among("\u05e2\u05e0\u05e1", 56, 3),
        Among("\u05e2\u05e1", 53, 1),
        Among("\u05d9\u05e2\u05e1", 59, 2),
        Among("\u05e2\u05dc\u05e2\u05e1", 59, 1),
        Among("\u05e2\u05e8\u05e1", 53, 1),
        Among("\u05e2\u05e0\u05e2\u05e8\u05e1", 62, 1),
        Among("\u05e2", -1, 1),
        Among("\u05d8\u05e2", 64, 4),
        Among("\u05e1\u05d8\u05e2", 65, 1),
        Among("\u05e2\u05d8\u05e2", 65, 1),
        Among("\u05d9\u05e2", 64, -1),
        Among("\u05e2\u05dc\u05e2", 64, 1),
        Among("\u05e2\u05e0\u05e2", 64, 3),
        Among("\u05d8\u05e2\u05e0\u05e2", 70, 4),
        Among("\u05e2\u05e8", -1, 1),
        Among("\u05d8\u05e2\u05e8", 72, 4),
        Among("\u05e1\u05d8\u05e2\u05e8", 73, 1),
        Among("\u05e2\u05d8\u05e2\u05e8", 73, 1),
        Among("\u05e2\u05e0\u05e2\u05e8", 72, 3),
        Among("\u05d8\u05e2\u05e0\u05e2\u05e8", 76, 4),
        Among("\u05d5\u05ea", -1, 32),
    ]

    a_5 = [
        Among("\u05d5\u05e0\u05d2", -1, 1),
        Among("\u05e9\u05d0\u05e4\u05d8", -1, 1),
        Among("\u05d4\u05f2\u05d8", -1, 1),
        Among("\u05e7\u05f2\u05d8", -1, 1),
        Among("\u05d9\u05e7\u05f2\u05d8", 3, 1),
        Among("\u05dc", -1, 2),
    ]

    a_6 = [
        Among("\u05d9\u05d2", -1, 1),
        Among("\u05d9\u05e7", -1, 1),
        Among("\u05d3\u05d9\u05e7", 1, 1),
        Among("\u05e0\u05d3\u05d9\u05e7", 2, 1),
        Among("\u05e2\u05e0\u05d3\u05d9\u05e7", 3, 1),
        Among("\u05d1\u05dc\u05d9\u05e7", 1, -1),
        Among("\u05d2\u05dc\u05d9\u05e7", 1, -1),
        Among("\u05e0\u05d9\u05e7", 1, 1),
        Among("\u05d9\u05e9", -1, 1),
    ]


class lab0(BaseException):
    pass


class lab1(BaseException):
    pass


class lab2(BaseException):
    pass


class lab3(BaseException):
    pass


class lab4(BaseException):
    pass


class lab5(BaseException):
    pass


class lab6(BaseException):
    pass


class lab7(BaseException):
    pass


class lab8(BaseException):
    pass


class lab9(BaseException):
    pass


class lab10(BaseException):
    pass


class lab11(BaseException):
    pass


class lab12(BaseException):
    pass


class lab13(BaseException):
    pass


class lab14(BaseException):
    pass


class lab15(BaseException):
    pass


class lab16(BaseException):
    pass
