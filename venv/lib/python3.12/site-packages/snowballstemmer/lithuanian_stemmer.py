# -*- coding: utf-8 -*-
# Generated from lithuanian.sbl by Snowball 3.0.1 - https://snowballstem.org/

from .among import Among
from .basestemmer import BaseStemmer


class LithuanianStemmer(BaseStemmer):
    """
    This class implements the stemming algorithm defined by a snowball script.
    Generated from lithuanian.sbl by Snowball 3.0.1 - https://snowballstem.org/
    """

    g_v = {"a", "e", "i", "y", "o", "u", "ą", "ę", "į", "ų", "ė", "ū"}

    I_p1 = 0

    def __r_step1(self):
        if self.cursor < self.I_p1:
            return False
        v_2 = self.limit_backward
        self.limit_backward = self.I_p1
        self.ket = self.cursor
        if self.find_among_b(LithuanianStemmer.a_0) == 0:
            self.limit_backward = v_2
            return False
        self.bra = self.cursor
        self.limit_backward = v_2
        if not self.slice_del():
            return False

        return True

    def __r_step2(self):
        while True:
            v_1 = self.limit - self.cursor
            try:
                if self.cursor < self.I_p1:
                    raise lab0()
                v_3 = self.limit_backward
                self.limit_backward = self.I_p1
                self.ket = self.cursor
                if self.find_among_b(LithuanianStemmer.a_1) == 0:
                    self.limit_backward = v_3
                    raise lab0()
                self.bra = self.cursor
                self.limit_backward = v_3
                if not self.slice_del():
                    return False

                continue
            except lab0:
                pass
            self.cursor = self.limit - v_1
            break
        return True

    def __r_fix_conflicts(self):
        self.ket = self.cursor
        among_var = self.find_among_b(LithuanianStemmer.a_2)
        if among_var == 0:
            return False
        self.bra = self.cursor
        if among_var == 1:
            if not self.slice_from("aitė"):
                return False
        elif among_var == 2:
            if not self.slice_from("uotė"):
                return False
        elif among_var == 3:
            if not self.slice_from("ėjimas"):
                return False
        elif among_var == 4:
            if not self.slice_from("esys"):
                return False
        elif among_var == 5:
            if not self.slice_from("asys"):
                return False
        elif among_var == 6:
            if not self.slice_from("avimas"):
                return False
        elif among_var == 7:
            if not self.slice_from("ojimas"):
                return False
        else:
            if not self.slice_from("okatė"):
                return False
        return True

    def __r_fix_chdz(self):
        self.ket = self.cursor
        among_var = self.find_among_b(LithuanianStemmer.a_3)
        if among_var == 0:
            return False
        self.bra = self.cursor
        if among_var == 1:
            if not self.slice_from("t"):
                return False
        else:
            if not self.slice_from("d"):
                return False
        return True

    def __r_fix_gd(self):
        self.ket = self.cursor
        if self.find_among_b(LithuanianStemmer.a_4) == 0:
            return False
        self.bra = self.cursor
        if not self.slice_from("g"):
            return False
        return True

    def _stem(self):
        self.I_p1 = self.limit
        v_1 = self.cursor
        try:
            v_2 = self.cursor
            try:
                v_3 = self.cursor
                if not self.eq_s("a"):
                    self.cursor = v_2
                    raise lab1()
                self.cursor = v_3
                if len(self.current) <= 6:
                    self.cursor = v_2
                    raise lab1()
                if self.cursor >= self.limit:
                    self.cursor = v_2
                    raise lab1()
                self.cursor += 1
            except lab1:
                pass
            if not self.go_out_grouping(LithuanianStemmer.g_v):
                raise lab0()
            self.cursor += 1
            if not self.go_in_grouping(LithuanianStemmer.g_v):
                raise lab0()
            self.cursor += 1
            self.I_p1 = self.cursor
        except lab0:
            pass
        self.cursor = v_1
        self.limit_backward = self.cursor
        self.cursor = self.limit
        v_4 = self.limit - self.cursor
        self.__r_fix_conflicts()
        self.cursor = self.limit - v_4
        v_5 = self.limit - self.cursor
        self.__r_step1()
        self.cursor = self.limit - v_5
        v_6 = self.limit - self.cursor
        self.__r_fix_chdz()
        self.cursor = self.limit - v_6
        v_7 = self.limit - self.cursor
        self.__r_step2()
        self.cursor = self.limit - v_7
        v_8 = self.limit - self.cursor
        self.__r_fix_chdz()
        self.cursor = self.limit - v_8
        v_9 = self.limit - self.cursor
        self.__r_fix_gd()
        self.cursor = self.limit - v_9
        self.cursor = self.limit_backward
        return True

    a_0 = [
        Among("a", -1, -1),
        Among("ia", 0, -1),
        Among("eria", 1, -1),
        Among("osna", 0, -1),
        Among("iosna", 3, -1),
        Among("uosna", 3, -1),
        Among("iuosna", 5, -1),
        Among("ysna", 0, -1),
        Among("ėsna", 0, -1),
        Among("e", -1, -1),
        Among("ie", 9, -1),
        Among("enie", 10, -1),
        Among("erie", 10, -1),
        Among("oje", 9, -1),
        Among("ioje", 13, -1),
        Among("uje", 9, -1),
        Among("iuje", 15, -1),
        Among("yje", 9, -1),
        Among("enyje", 17, -1),
        Among("eryje", 17, -1),
        Among("ėje", 9, -1),
        Among("ame", 9, -1),
        Among("iame", 21, -1),
        Among("sime", 9, -1),
        Among("ome", 9, -1),
        Among("ėme", 9, -1),
        Among("tumėme", 25, -1),
        Among("ose", 9, -1),
        Among("iose", 27, -1),
        Among("uose", 27, -1),
        Among("iuose", 29, -1),
        Among("yse", 9, -1),
        Among("enyse", 31, -1),
        Among("eryse", 31, -1),
        Among("ėse", 9, -1),
        Among("ate", 9, -1),
        Among("iate", 35, -1),
        Among("ite", 9, -1),
        Among("kite", 37, -1),
        Among("site", 37, -1),
        Among("ote", 9, -1),
        Among("tute", 9, -1),
        Among("ėte", 9, -1),
        Among("tumėte", 42, -1),
        Among("i", -1, -1),
        Among("ai", 44, -1),
        Among("iai", 45, -1),
        Among("eriai", 46, -1),
        Among("ei", 44, -1),
        Among("tumei", 48, -1),
        Among("ki", 44, -1),
        Among("imi", 44, -1),
        Among("erimi", 51, -1),
        Among("umi", 44, -1),
        Among("iumi", 53, -1),
        Among("si", 44, -1),
        Among("asi", 55, -1),
        Among("iasi", 56, -1),
        Among("esi", 55, -1),
        Among("iesi", 58, -1),
        Among("siesi", 59, -1),
        Among("isi", 55, -1),
        Among("aisi", 61, -1),
        Among("eisi", 61, -1),
        Among("tumeisi", 63, -1),
        Among("uisi", 61, -1),
        Among("osi", 55, -1),
        Among("ėjosi", 66, -1),
        Among("uosi", 66, -1),
        Among("iuosi", 68, -1),
        Among("siuosi", 69, -1),
        Among("usi", 55, -1),
        Among("ausi", 71, -1),
        Among("čiausi", 72, -1),
        Among("ąsi", 55, -1),
        Among("ėsi", 55, -1),
        Among("ųsi", 55, -1),
        Among("tųsi", 76, -1),
        Among("ti", 44, -1),
        Among("enti", 78, -1),
        Among("inti", 78, -1),
        Among("oti", 78, -1),
        Among("ioti", 81, -1),
        Among("uoti", 81, -1),
        Among("iuoti", 83, -1),
        Among("auti", 78, -1),
        Among("iauti", 85, -1),
        Among("yti", 78, -1),
        Among("ėti", 78, -1),
        Among("telėti", 88, -1),
        Among("inėti", 88, -1),
        Among("terėti", 88, -1),
        Among("ui", 44, -1),
        Among("iui", 92, -1),
        Among("eniui", 93, -1),
        Among("oj", -1, -1),
        Among("ėj", -1, -1),
        Among("k", -1, -1),
        Among("am", -1, -1),
        Among("iam", 98, -1),
        Among("iem", -1, -1),
        Among("im", -1, -1),
        Among("sim", 101, -1),
        Among("om", -1, -1),
        Among("tum", -1, -1),
        Among("ėm", -1, -1),
        Among("tumėm", 105, -1),
        Among("an", -1, -1),
        Among("on", -1, -1),
        Among("ion", 108, -1),
        Among("un", -1, -1),
        Among("iun", 110, -1),
        Among("ėn", -1, -1),
        Among("o", -1, -1),
        Among("io", 113, -1),
        Among("enio", 114, -1),
        Among("ėjo", 113, -1),
        Among("uo", 113, -1),
        Among("s", -1, -1),
        Among("as", 118, -1),
        Among("ias", 119, -1),
        Among("es", 118, -1),
        Among("ies", 121, -1),
        Among("is", 118, -1),
        Among("ais", 123, -1),
        Among("iais", 124, -1),
        Among("tumeis", 123, -1),
        Among("imis", 123, -1),
        Among("enimis", 127, -1),
        Among("omis", 123, -1),
        Among("iomis", 129, -1),
        Among("umis", 123, -1),
        Among("ėmis", 123, -1),
        Among("enis", 123, -1),
        Among("asis", 123, -1),
        Among("ysis", 123, -1),
        Among("ams", 118, -1),
        Among("iams", 136, -1),
        Among("iems", 118, -1),
        Among("ims", 118, -1),
        Among("enims", 139, -1),
        Among("erims", 139, -1),
        Among("oms", 118, -1),
        Among("ioms", 142, -1),
        Among("ums", 118, -1),
        Among("ėms", 118, -1),
        Among("ens", 118, -1),
        Among("os", 118, -1),
        Among("ios", 147, -1),
        Among("uos", 147, -1),
        Among("iuos", 149, -1),
        Among("ers", 118, -1),
        Among("us", 118, -1),
        Among("aus", 152, -1),
        Among("iaus", 153, -1),
        Among("ius", 152, -1),
        Among("ys", 118, -1),
        Among("enys", 156, -1),
        Among("erys", 156, -1),
        Among("ąs", 118, -1),
        Among("iąs", 159, -1),
        Among("ės", 118, -1),
        Among("amės", 161, -1),
        Among("iamės", 162, -1),
        Among("imės", 161, -1),
        Among("kimės", 164, -1),
        Among("simės", 164, -1),
        Among("omės", 161, -1),
        Among("ėmės", 161, -1),
        Among("tumėmės", 168, -1),
        Among("atės", 161, -1),
        Among("iatės", 170, -1),
        Among("sitės", 161, -1),
        Among("otės", 161, -1),
        Among("ėtės", 161, -1),
        Among("tumėtės", 174, -1),
        Among("įs", 118, -1),
        Among("ūs", 118, -1),
        Among("tųs", 118, -1),
        Among("at", -1, -1),
        Among("iat", 179, -1),
        Among("it", -1, -1),
        Among("sit", 181, -1),
        Among("ot", -1, -1),
        Among("ėt", -1, -1),
        Among("tumėt", 184, -1),
        Among("u", -1, -1),
        Among("au", 186, -1),
        Among("iau", 187, -1),
        Among("čiau", 188, -1),
        Among("iu", 186, -1),
        Among("eniu", 190, -1),
        Among("siu", 190, -1),
        Among("y", -1, -1),
        Among("ą", -1, -1),
        Among("ią", 194, -1),
        Among("ė", -1, -1),
        Among("ę", -1, -1),
        Among("į", -1, -1),
        Among("enį", 198, -1),
        Among("erį", 198, -1),
        Among("ų", -1, -1),
        Among("ių", 201, -1),
        Among("erų", 201, -1),
    ]

    a_1 = [
        Among("ing", -1, -1),
        Among("aj", -1, -1),
        Among("iaj", 1, -1),
        Among("iej", -1, -1),
        Among("oj", -1, -1),
        Among("ioj", 4, -1),
        Among("uoj", 4, -1),
        Among("iuoj", 6, -1),
        Among("auj", -1, -1),
        Among("ąj", -1, -1),
        Among("iąj", 9, -1),
        Among("ėj", -1, -1),
        Among("ųj", -1, -1),
        Among("iųj", 12, -1),
        Among("ok", -1, -1),
        Among("iok", 14, -1),
        Among("iuk", -1, -1),
        Among("uliuk", 16, -1),
        Among("učiuk", 16, -1),
        Among("išk", -1, -1),
        Among("iul", -1, -1),
        Among("yl", -1, -1),
        Among("ėl", -1, -1),
        Among("am", -1, -1),
        Among("dam", 23, -1),
        Among("jam", 23, -1),
        Among("zgan", -1, -1),
        Among("ain", -1, -1),
        Among("esn", -1, -1),
        Among("op", -1, -1),
        Among("iop", 29, -1),
        Among("ias", -1, -1),
        Among("ies", -1, -1),
        Among("ais", -1, -1),
        Among("iais", 33, -1),
        Among("os", -1, -1),
        Among("ios", 35, -1),
        Among("uos", 35, -1),
        Among("iuos", 37, -1),
        Among("aus", -1, -1),
        Among("iaus", 39, -1),
        Among("ąs", -1, -1),
        Among("iąs", 41, -1),
        Among("ęs", -1, -1),
        Among("utėait", -1, -1),
        Among("ant", -1, -1),
        Among("iant", 45, -1),
        Among("siant", 46, -1),
        Among("int", -1, -1),
        Among("ot", -1, -1),
        Among("uot", 49, -1),
        Among("iuot", 50, -1),
        Among("yt", -1, -1),
        Among("ėt", -1, -1),
        Among("ykšt", -1, -1),
        Among("iau", -1, -1),
        Among("dav", -1, -1),
        Among("sv", -1, -1),
        Among("šv", -1, -1),
        Among("ykšč", -1, -1),
        Among("ę", -1, -1),
        Among("ėję", 60, -1),
    ]

    a_2 = [
        Among("ojime", -1, 7),
        Among("ėjime", -1, 3),
        Among("avime", -1, 6),
        Among("okate", -1, 8),
        Among("aite", -1, 1),
        Among("uote", -1, 2),
        Among("asius", -1, 5),
        Among("okatės", -1, 8),
        Among("aitės", -1, 1),
        Among("uotės", -1, 2),
        Among("esiu", -1, 4),
    ]

    a_3 = [Among("č", -1, 1), Among("dž", -1, 2)]

    a_4 = [Among("gd", -1, 1)]


class lab0(BaseException):
    pass


class lab1(BaseException):
    pass
