# -*- coding: utf-8 -*-
# Generated from finnish.sbl by Snowball 3.0.1 - https://snowballstem.org/

from .among import Among
from .basestemmer import BaseStemmer


class FinnishStemmer(BaseStemmer):
    """
    This class implements the stemming algorithm defined by a snowball script.
    Generated from finnish.sbl by Snowball 3.0.1 - https://snowballstem.org/
    """

    g_AEI = {"a", "ä", "e", "i"}

    g_C = {
        "b",
        "c",
        "d",
        "f",
        "g",
        "h",
        "j",
        "k",
        "l",
        "m",
        "n",
        "p",
        "q",
        "r",
        "s",
        "t",
        "v",
        "w",
        "x",
        "z",
    }

    g_V1 = {"a", "e", "i", "o", "u", "y", "ä", "ö"}

    g_V2 = {"a", "e", "i", "o", "u", "ä", "ö"}

    g_particle_end = {"a", "e", "i", "o", "u", "y", "ä", "ö", "n", "t"}

    B_ending_removed = False
    S_x = ""
    I_p2 = 0
    I_p1 = 0

    def __r_mark_regions(self):
        self.I_p1 = self.limit
        self.I_p2 = self.limit
        if not self.go_out_grouping(FinnishStemmer.g_V1):
            return False
        self.cursor += 1
        if not self.go_in_grouping(FinnishStemmer.g_V1):
            return False
        self.cursor += 1
        self.I_p1 = self.cursor
        if not self.go_out_grouping(FinnishStemmer.g_V1):
            return False
        self.cursor += 1
        if not self.go_in_grouping(FinnishStemmer.g_V1):
            return False
        self.cursor += 1
        self.I_p2 = self.cursor
        return True

    def __r_R2(self):
        return self.I_p2 <= self.cursor

    def __r_particle_etc(self):
        if self.cursor < self.I_p1:
            return False
        v_2 = self.limit_backward
        self.limit_backward = self.I_p1
        self.ket = self.cursor
        among_var = self.find_among_b(FinnishStemmer.a_0)
        if among_var == 0:
            self.limit_backward = v_2
            return False
        self.bra = self.cursor
        self.limit_backward = v_2
        if among_var == 1:
            if not self.in_grouping_b(FinnishStemmer.g_particle_end):
                return False
        else:
            if not self.__r_R2():
                return False
        if not self.slice_del():
            return False

        return True

    def __r_possessive(self):
        if self.cursor < self.I_p1:
            return False
        v_2 = self.limit_backward
        self.limit_backward = self.I_p1
        self.ket = self.cursor
        among_var = self.find_among_b(FinnishStemmer.a_4)
        if among_var == 0:
            self.limit_backward = v_2
            return False
        self.bra = self.cursor
        self.limit_backward = v_2
        if among_var == 1:
            v_3 = self.limit - self.cursor
            try:
                if not self.eq_s_b("k"):
                    raise lab0()
                return False
            except lab0:
                pass
            self.cursor = self.limit - v_3
            if not self.slice_del():
                return False

        elif among_var == 2:
            if not self.slice_del():
                return False

            self.ket = self.cursor
            if not self.eq_s_b("kse"):
                return False
            self.bra = self.cursor
            if not self.slice_from("ksi"):
                return False
        elif among_var == 3:
            if not self.slice_del():
                return False

        elif among_var == 4:
            if self.find_among_b(FinnishStemmer.a_1) == 0:
                return False
            if not self.slice_del():
                return False

        elif among_var == 5:
            if self.find_among_b(FinnishStemmer.a_2) == 0:
                return False
            if not self.slice_del():
                return False

        else:
            if self.find_among_b(FinnishStemmer.a_3) == 0:
                return False
            if not self.slice_del():
                return False

        return True

    def __r_LONG(self):
        if self.find_among_b(FinnishStemmer.a_5) == 0:
            return False
        return True

    def __r_VI(self):
        if not self.eq_s_b("i"):
            return False
        if not self.in_grouping_b(FinnishStemmer.g_V2):
            return False
        return True

    def __r_case_ending(self):
        if self.cursor < self.I_p1:
            return False
        v_2 = self.limit_backward
        self.limit_backward = self.I_p1
        self.ket = self.cursor
        among_var = self.find_among_b(FinnishStemmer.a_6)
        if among_var == 0:
            self.limit_backward = v_2
            return False
        self.bra = self.cursor
        self.limit_backward = v_2
        if among_var == 1:
            if not self.eq_s_b("a"):
                return False
        elif among_var == 2:
            if not self.eq_s_b("e"):
                return False
        elif among_var == 3:
            if not self.eq_s_b("i"):
                return False
        elif among_var == 4:
            if not self.eq_s_b("o"):
                return False
        elif among_var == 5:
            if not self.eq_s_b("ä"):
                return False
        elif among_var == 6:
            if not self.eq_s_b("ö"):
                return False
        elif among_var == 7:
            v_3 = self.limit - self.cursor
            try:
                v_4 = self.limit - self.cursor
                try:
                    v_5 = self.limit - self.cursor
                    try:
                        if not self.__r_LONG():
                            raise lab2()
                        raise lab1()
                    except lab2:
                        pass
                    self.cursor = self.limit - v_5
                    if not self.eq_s_b("ie"):
                        self.cursor = self.limit - v_3
                        raise lab0()
                except lab1:
                    pass
                self.cursor = self.limit - v_4
                if self.cursor <= self.limit_backward:
                    self.cursor = self.limit - v_3
                    raise lab0()
                self.cursor -= 1
                self.bra = self.cursor
            except lab0:
                pass
        elif among_var == 8:
            if not self.in_grouping_b(FinnishStemmer.g_V1):
                return False
            if not self.in_grouping_b(FinnishStemmer.g_C):
                return False
        if not self.slice_del():
            return False

        self.B_ending_removed = True
        return True

    def __r_other_endings(self):
        if self.cursor < self.I_p2:
            return False
        v_2 = self.limit_backward
        self.limit_backward = self.I_p2
        self.ket = self.cursor
        among_var = self.find_among_b(FinnishStemmer.a_7)
        if among_var == 0:
            self.limit_backward = v_2
            return False
        self.bra = self.cursor
        self.limit_backward = v_2
        if among_var == 1:
            v_3 = self.limit - self.cursor
            try:
                if not self.eq_s_b("po"):
                    raise lab0()
                return False
            except lab0:
                pass
            self.cursor = self.limit - v_3
        if not self.slice_del():
            return False

        return True

    def __r_i_plural(self):
        if self.cursor < self.I_p1:
            return False
        v_2 = self.limit_backward
        self.limit_backward = self.I_p1
        self.ket = self.cursor
        if self.find_among_b(FinnishStemmer.a_8) == 0:
            self.limit_backward = v_2
            return False
        self.bra = self.cursor
        self.limit_backward = v_2
        if not self.slice_del():
            return False

        return True

    def __r_t_plural(self):
        if self.cursor < self.I_p1:
            return False
        v_2 = self.limit_backward
        self.limit_backward = self.I_p1
        self.ket = self.cursor
        if not self.eq_s_b("t"):
            self.limit_backward = v_2
            return False
        self.bra = self.cursor
        v_3 = self.limit - self.cursor
        if not self.in_grouping_b(FinnishStemmer.g_V1):
            self.limit_backward = v_2
            return False
        self.cursor = self.limit - v_3
        if not self.slice_del():
            return False

        self.limit_backward = v_2
        if self.cursor < self.I_p2:
            return False
        v_5 = self.limit_backward
        self.limit_backward = self.I_p2
        self.ket = self.cursor
        among_var = self.find_among_b(FinnishStemmer.a_9)
        if among_var == 0:
            self.limit_backward = v_5
            return False
        self.bra = self.cursor
        self.limit_backward = v_5
        if among_var == 1:
            v_6 = self.limit - self.cursor
            try:
                if not self.eq_s_b("po"):
                    raise lab0()
                return False
            except lab0:
                pass
            self.cursor = self.limit - v_6
        if not self.slice_del():
            return False

        return True

    def __r_tidy(self):
        if self.cursor < self.I_p1:
            return False
        v_2 = self.limit_backward
        self.limit_backward = self.I_p1
        v_3 = self.limit - self.cursor
        try:
            v_4 = self.limit - self.cursor
            if not self.__r_LONG():
                raise lab0()
            self.cursor = self.limit - v_4
            self.ket = self.cursor
            if self.cursor <= self.limit_backward:
                raise lab0()
            self.cursor -= 1
            self.bra = self.cursor
            if not self.slice_del():
                return False

        except lab0:
            pass
        self.cursor = self.limit - v_3
        v_5 = self.limit - self.cursor
        try:
            self.ket = self.cursor
            if not self.in_grouping_b(FinnishStemmer.g_AEI):
                raise lab1()
            self.bra = self.cursor
            if not self.in_grouping_b(FinnishStemmer.g_C):
                raise lab1()
            if not self.slice_del():
                return False

        except lab1:
            pass
        self.cursor = self.limit - v_5
        v_6 = self.limit - self.cursor
        try:
            self.ket = self.cursor
            if not self.eq_s_b("j"):
                raise lab2()
            self.bra = self.cursor
            try:
                v_7 = self.limit - self.cursor
                try:
                    if not self.eq_s_b("o"):
                        raise lab4()
                    raise lab3()
                except lab4:
                    pass
                self.cursor = self.limit - v_7
                if not self.eq_s_b("u"):
                    raise lab2()
            except lab3:
                pass
            if not self.slice_del():
                return False

        except lab2:
            pass
        self.cursor = self.limit - v_6
        v_8 = self.limit - self.cursor
        try:
            self.ket = self.cursor
            if not self.eq_s_b("o"):
                raise lab5()
            self.bra = self.cursor
            if not self.eq_s_b("j"):
                raise lab5()
            if not self.slice_del():
                return False

        except lab5:
            pass
        self.cursor = self.limit - v_8
        self.limit_backward = v_2
        if not self.go_in_grouping_b(FinnishStemmer.g_V1):
            return False
        self.ket = self.cursor
        if not self.in_grouping_b(FinnishStemmer.g_C):
            return False
        self.bra = self.cursor
        self.S_x = self.slice_to()
        if self.S_x == "":
            return False
        if not self.eq_s_b(self.S_x):
            return False
        if not self.slice_del():
            return False

        return True

    def _stem(self):
        v_1 = self.cursor
        self.__r_mark_regions()
        self.cursor = v_1
        self.B_ending_removed = False
        self.limit_backward = self.cursor
        self.cursor = self.limit
        v_2 = self.limit - self.cursor
        self.__r_particle_etc()
        self.cursor = self.limit - v_2
        v_3 = self.limit - self.cursor
        self.__r_possessive()
        self.cursor = self.limit - v_3
        v_4 = self.limit - self.cursor
        self.__r_case_ending()
        self.cursor = self.limit - v_4
        v_5 = self.limit - self.cursor
        self.__r_other_endings()
        self.cursor = self.limit - v_5
        try:
            try:
                if not self.B_ending_removed:
                    raise lab1()
                v_7 = self.limit - self.cursor
                self.__r_i_plural()
                self.cursor = self.limit - v_7
                raise lab0()
            except lab1:
                pass
            v_8 = self.limit - self.cursor
            self.__r_t_plural()
            self.cursor = self.limit - v_8
        except lab0:
            pass
        v_9 = self.limit - self.cursor
        self.__r_tidy()
        self.cursor = self.limit - v_9
        self.cursor = self.limit_backward
        return True

    a_0 = [
        Among("pa", -1, 1),
        Among("sti", -1, 2),
        Among("kaan", -1, 1),
        Among("han", -1, 1),
        Among("kin", -1, 1),
        Among("hän", -1, 1),
        Among("kään", -1, 1),
        Among("ko", -1, 1),
        Among("pä", -1, 1),
        Among("kö", -1, 1),
    ]

    a_1 = [
        Among("lla", -1, -1),
        Among("na", -1, -1),
        Among("ssa", -1, -1),
        Among("ta", -1, -1),
        Among("lta", 3, -1),
        Among("sta", 3, -1),
    ]

    a_2 = [
        Among("llä", -1, -1),
        Among("nä", -1, -1),
        Among("ssä", -1, -1),
        Among("tä", -1, -1),
        Among("ltä", 3, -1),
        Among("stä", 3, -1),
    ]

    a_3 = [Among("lle", -1, -1), Among("ine", -1, -1)]

    a_4 = [
        Among("nsa", -1, 3),
        Among("mme", -1, 3),
        Among("nne", -1, 3),
        Among("ni", -1, 2),
        Among("si", -1, 1),
        Among("an", -1, 4),
        Among("en", -1, 6),
        Among("än", -1, 5),
        Among("nsä", -1, 3),
    ]

    a_5 = [
        Among("aa", -1, -1),
        Among("ee", -1, -1),
        Among("ii", -1, -1),
        Among("oo", -1, -1),
        Among("uu", -1, -1),
        Among("ää", -1, -1),
        Among("öö", -1, -1),
    ]

    a_6 = [
        Among("a", -1, 8),
        Among("lla", 0, -1),
        Among("na", 0, -1),
        Among("ssa", 0, -1),
        Among("ta", 0, -1),
        Among("lta", 4, -1),
        Among("sta", 4, -1),
        Among("tta", 4, 2),
        Among("lle", -1, -1),
        Among("ine", -1, -1),
        Among("ksi", -1, -1),
        Among("n", -1, 7),
        Among("han", 11, 1),
        Among("den", 11, -1, __r_VI),
        Among("seen", 11, -1, __r_LONG),
        Among("hen", 11, 2),
        Among("tten", 11, -1, __r_VI),
        Among("hin", 11, 3),
        Among("siin", 11, -1, __r_VI),
        Among("hon", 11, 4),
        Among("hän", 11, 5),
        Among("hön", 11, 6),
        Among("ä", -1, 8),
        Among("llä", 22, -1),
        Among("nä", 22, -1),
        Among("ssä", 22, -1),
        Among("tä", 22, -1),
        Among("ltä", 26, -1),
        Among("stä", 26, -1),
        Among("ttä", 26, 2),
    ]

    a_7 = [
        Among("eja", -1, -1),
        Among("mma", -1, 1),
        Among("imma", 1, -1),
        Among("mpa", -1, 1),
        Among("impa", 3, -1),
        Among("mmi", -1, 1),
        Among("immi", 5, -1),
        Among("mpi", -1, 1),
        Among("impi", 7, -1),
        Among("ejä", -1, -1),
        Among("mmä", -1, 1),
        Among("immä", 10, -1),
        Among("mpä", -1, 1),
        Among("impä", 12, -1),
    ]

    a_8 = [Among("i", -1, -1), Among("j", -1, -1)]

    a_9 = [Among("mma", -1, 1), Among("imma", 0, -1)]


class lab0(BaseException):
    pass


class lab1(BaseException):
    pass


class lab2(BaseException):
    pass


class lab3(BaseException):
    pass


class lab4(BaseException):
    pass


class lab5(BaseException):
    pass
