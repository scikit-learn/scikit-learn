import unittest

import Cython.Compiler.StringEncoding as StringEncoding


class StringEncodingTest(unittest.TestCase):
    """
    Test the StringEncoding module.
    """

    def test_string_contains_lone_surrogates(self):
        self.assertFalse(StringEncoding.string_contains_lone_surrogates("abc"))
        self.assertFalse(StringEncoding.string_contains_lone_surrogates("\uabcd"))
        self.assertFalse(StringEncoding.string_contains_lone_surrogates("\N{SNOWMAN}"))

        self.assertTrue(StringEncoding.string_contains_lone_surrogates("\ud800\udfff"))
        obfuscated_surrogate_pair = ("\udfff" + "\ud800")[::-1]
        self.assertTrue(
            StringEncoding.string_contains_lone_surrogates(obfuscated_surrogate_pair)
        )
        self.assertTrue(StringEncoding.string_contains_lone_surrogates("\ud800"))
        self.assertTrue(StringEncoding.string_contains_lone_surrogates("\udfff"))
        self.assertTrue(StringEncoding.string_contains_lone_surrogates("\udfff\ud800"))
        self.assertTrue(StringEncoding.string_contains_lone_surrogates("\ud800x\udfff"))

    def test_string_contains_surrogates(self):
        self.assertFalse(StringEncoding.string_contains_surrogates("abc"))
        self.assertFalse(StringEncoding.string_contains_surrogates("\uabcd"))
        self.assertFalse(StringEncoding.string_contains_surrogates("\N{SNOWMAN}"))

        self.assertTrue(StringEncoding.string_contains_surrogates("\ud800"))
        self.assertTrue(StringEncoding.string_contains_surrogates("\udfff"))
        self.assertTrue(StringEncoding.string_contains_surrogates("\ud800\udfff"))
        self.assertTrue(StringEncoding.string_contains_surrogates("\udfff\ud800"))
        self.assertTrue(StringEncoding.string_contains_surrogates("\ud800x\udfff"))
