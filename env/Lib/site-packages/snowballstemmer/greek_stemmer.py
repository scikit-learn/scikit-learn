# Generated by Snowball 2.2.0 - https://snowballstem.org/

from .basestemmer import BaseStemmer
from .among import Among


class GreekStemmer(BaseStemmer):
    '''
    This class implements the stemming algorithm defined by a snowball script.
    Generated by Snowball 2.2.0 - https://snowballstem.org/
    '''

    a_0 = [
        Among(u"", -1, 25),
        Among(u"\u0386", 0, 1),
        Among(u"\u0388", 0, 5),
        Among(u"\u0389", 0, 7),
        Among(u"\u038A", 0, 9),
        Among(u"\u038C", 0, 15),
        Among(u"\u038E", 0, 20),
        Among(u"\u038F", 0, 24),
        Among(u"\u0390", 0, 7),
        Among(u"\u0391", 0, 1),
        Among(u"\u0392", 0, 2),
        Among(u"\u0393", 0, 3),
        Among(u"\u0394", 0, 4),
        Among(u"\u0395", 0, 5),
        Among(u"\u0396", 0, 6),
        Among(u"\u0397", 0, 7),
        Among(u"\u0398", 0, 8),
        Among(u"\u0399", 0, 9),
        Among(u"\u039A", 0, 10),
        Among(u"\u039B", 0, 11),
        Among(u"\u039C", 0, 12),
        Among(u"\u039D", 0, 13),
        Among(u"\u039E", 0, 14),
        Among(u"\u039F", 0, 15),
        Among(u"\u03A0", 0, 16),
        Among(u"\u03A1", 0, 17),
        Among(u"\u03A3", 0, 18),
        Among(u"\u03A4", 0, 19),
        Among(u"\u03A5", 0, 20),
        Among(u"\u03A6", 0, 21),
        Among(u"\u03A7", 0, 22),
        Among(u"\u03A8", 0, 23),
        Among(u"\u03A9", 0, 24),
        Among(u"\u03AA", 0, 9),
        Among(u"\u03AB", 0, 20),
        Among(u"\u03AC", 0, 1),
        Among(u"\u03AD", 0, 5),
        Among(u"\u03AE", 0, 7),
        Among(u"\u03AF", 0, 9),
        Among(u"\u03B0", 0, 20),
        Among(u"\u03C2", 0, 18),
        Among(u"\u03CA", 0, 7),
        Among(u"\u03CB", 0, 20),
        Among(u"\u03CC", 0, 15),
        Among(u"\u03CD", 0, 20),
        Among(u"\u03CE", 0, 24)
    ]

    a_1 = [
        Among(u"\u03C3\u03BA\u03B1\u03B3\u03B9\u03B1", -1, 2),
        Among(u"\u03C6\u03B1\u03B3\u03B9\u03B1", -1, 1),
        Among(u"\u03BF\u03BB\u03BF\u03B3\u03B9\u03B1", -1, 3),
        Among(u"\u03C3\u03BF\u03B3\u03B9\u03B1", -1, 4),
        Among(u"\u03C4\u03B1\u03C4\u03BF\u03B3\u03B9\u03B1", -1, 5),
        Among(u"\u03BA\u03C1\u03B5\u03B1\u03C4\u03B1", -1, 6),
        Among(u"\u03C0\u03B5\u03C1\u03B1\u03C4\u03B1", -1, 7),
        Among(u"\u03C4\u03B5\u03C1\u03B1\u03C4\u03B1", -1, 8),
        Among(u"\u03B3\u03B5\u03B3\u03BF\u03BD\u03BF\u03C4\u03B1", -1, 11),
        Among(u"\u03BA\u03B1\u03B8\u03B5\u03C3\u03C4\u03C9\u03C4\u03B1", -1, 10),
        Among(u"\u03C6\u03C9\u03C4\u03B1", -1, 9),
        Among(u"\u03C0\u03B5\u03C1\u03B1\u03C4\u03B7", -1, 7),
        Among(u"\u03C3\u03BA\u03B1\u03B3\u03B9\u03C9\u03BD", -1, 2),
        Among(u"\u03C6\u03B1\u03B3\u03B9\u03C9\u03BD", -1, 1),
        Among(u"\u03BF\u03BB\u03BF\u03B3\u03B9\u03C9\u03BD", -1, 3),
        Among(u"\u03C3\u03BF\u03B3\u03B9\u03C9\u03BD", -1, 4),
        Among(u"\u03C4\u03B1\u03C4\u03BF\u03B3\u03B9\u03C9\u03BD", -1, 5),
        Among(u"\u03BA\u03C1\u03B5\u03B1\u03C4\u03C9\u03BD", -1, 6),
        Among(u"\u03C0\u03B5\u03C1\u03B1\u03C4\u03C9\u03BD", -1, 7),
        Among(u"\u03C4\u03B5\u03C1\u03B1\u03C4\u03C9\u03BD", -1, 8),
        Among(u"\u03B3\u03B5\u03B3\u03BF\u03BD\u03BF\u03C4\u03C9\u03BD", -1, 11),
        Among(u"\u03BA\u03B1\u03B8\u03B5\u03C3\u03C4\u03C9\u03C4\u03C9\u03BD", -1, 10),
        Among(u"\u03C6\u03C9\u03C4\u03C9\u03BD", -1, 9),
        Among(u"\u03BA\u03C1\u03B5\u03B1\u03C3", -1, 6),
        Among(u"\u03C0\u03B5\u03C1\u03B1\u03C3", -1, 7),
        Among(u"\u03C4\u03B5\u03C1\u03B1\u03C3", -1, 8),
        Among(u"\u03B3\u03B5\u03B3\u03BF\u03BD\u03BF\u03C3", -1, 11),
        Among(u"\u03BA\u03C1\u03B5\u03B1\u03C4\u03BF\u03C3", -1, 6),
        Among(u"\u03C0\u03B5\u03C1\u03B1\u03C4\u03BF\u03C3", -1, 7),
        Among(u"\u03C4\u03B5\u03C1\u03B1\u03C4\u03BF\u03C3", -1, 8),
        Among(u"\u03B3\u03B5\u03B3\u03BF\u03BD\u03BF\u03C4\u03BF\u03C3", -1, 11),
        Among(u"\u03BA\u03B1\u03B8\u03B5\u03C3\u03C4\u03C9\u03C4\u03BF\u03C3", -1, 10),
        Among(u"\u03C6\u03C9\u03C4\u03BF\u03C3", -1, 9),
        Among(u"\u03BA\u03B1\u03B8\u03B5\u03C3\u03C4\u03C9\u03C3", -1, 10),
        Among(u"\u03C6\u03C9\u03C3", -1, 9),
        Among(u"\u03C3\u03BA\u03B1\u03B3\u03B9\u03BF\u03C5", -1, 2),
        Among(u"\u03C6\u03B1\u03B3\u03B9\u03BF\u03C5", -1, 1),
        Among(u"\u03BF\u03BB\u03BF\u03B3\u03B9\u03BF\u03C5", -1, 3),
        Among(u"\u03C3\u03BF\u03B3\u03B9\u03BF\u03C5", -1, 4),
        Among(u"\u03C4\u03B1\u03C4\u03BF\u03B3\u03B9\u03BF\u03C5", -1, 5)
    ]

    a_2 = [
        Among(u"\u03C0\u03B1", -1, 1),
        Among(u"\u03BE\u03B1\u03BD\u03B1\u03C0\u03B1", 0, 1),
        Among(u"\u03B5\u03C0\u03B1", 0, 1),
        Among(u"\u03C0\u03B5\u03C1\u03B9\u03C0\u03B1", 0, 1),
        Among(u"\u03B1\u03BD\u03B1\u03BC\u03C0\u03B1", 0, 1),
        Among(u"\u03B5\u03BC\u03C0\u03B1", 0, 1),
        Among(u"\u03B2", -1, 2),
        Among(u"\u03B4\u03B1\u03BD\u03B5", -1, 1),
        Among(u"\u03B2\u03B1\u03B8\u03C5\u03C1\u03B9", -1, 2),
        Among(u"\u03B2\u03B1\u03C1\u03BA", -1, 2),
        Among(u"\u03BC\u03B1\u03C1\u03BA", -1, 2),
        Among(u"\u03BB", -1, 2),
        Among(u"\u03BC", -1, 2),
        Among(u"\u03BA\u03BF\u03C1\u03BD", -1, 2),
        Among(u"\u03B1\u03B8\u03C1\u03BF", -1, 1),
        Among(u"\u03C3\u03C5\u03BD\u03B1\u03B8\u03C1\u03BF", 14, 1),
        Among(u"\u03C0", -1, 2),
        Among(u"\u03B9\u03BC\u03C0", 16, 2),
        Among(u"\u03C1", -1, 2),
        Among(u"\u03BC\u03B1\u03C1", 18, 2),
        Among(u"\u03B1\u03BC\u03C0\u03B1\u03C1", 18, 2),
        Among(u"\u03B3\u03BA\u03C1", 18, 2),
        Among(u"\u03B2\u03BF\u03BB\u03B2\u03BF\u03C1", 18, 2),
        Among(u"\u03B3\u03BB\u03C5\u03BA\u03BF\u03C1", 18, 2),
        Among(u"\u03C0\u03B9\u03C0\u03B5\u03C1\u03BF\u03C1", 18, 2),
        Among(u"\u03C0\u03C1", 18, 2),
        Among(u"\u03BC\u03C0\u03C1", 25, 2),
        Among(u"\u03B1\u03C1\u03C1", 18, 2),
        Among(u"\u03B3\u03BB\u03C5\u03BA\u03C5\u03C1", 18, 2),
        Among(u"\u03C0\u03BF\u03BB\u03C5\u03C1", 18, 2),
        Among(u"\u03BB\u03BF\u03C5", -1, 2)
    ]

    a_3 = [
        Among(u"\u03B9\u03B6\u03B1", -1, 1),
        Among(u"\u03B9\u03B6\u03B5", -1, 1),
        Among(u"\u03B9\u03B6\u03B1\u03BC\u03B5", -1, 1),
        Among(u"\u03B9\u03B6\u03BF\u03C5\u03BC\u03B5", -1, 1),
        Among(u"\u03B9\u03B6\u03B1\u03BD\u03B5", -1, 1),
        Among(u"\u03B9\u03B6\u03BF\u03C5\u03BD\u03B5", -1, 1),
        Among(u"\u03B9\u03B6\u03B1\u03C4\u03B5", -1, 1),
        Among(u"\u03B9\u03B6\u03B5\u03C4\u03B5", -1, 1),
        Among(u"\u03B9\u03B6\u03B5\u03B9", -1, 1),
        Among(u"\u03B9\u03B6\u03B1\u03BD", -1, 1),
        Among(u"\u03B9\u03B6\u03BF\u03C5\u03BD", -1, 1),
        Among(u"\u03B9\u03B6\u03B5\u03C3", -1, 1),
        Among(u"\u03B9\u03B6\u03B5\u03B9\u03C3", -1, 1),
        Among(u"\u03B9\u03B6\u03C9", -1, 1)
    ]

    a_4 = [
        Among(u"\u03B2\u03B9", -1, 1),
        Among(u"\u03BB\u03B9", -1, 1),
        Among(u"\u03B1\u03BB", -1, 1),
        Among(u"\u03B5\u03BD", -1, 1),
        Among(u"\u03C3", -1, 1),
        Among(u"\u03C7", -1, 1),
        Among(u"\u03C5\u03C8", -1, 1),
        Among(u"\u03B6\u03C9", -1, 1)
    ]

    a_5 = [
        Among(u"\u03C9\u03B8\u03B7\u03BA\u03B1", -1, 1),
        Among(u"\u03C9\u03B8\u03B7\u03BA\u03B5", -1, 1),
        Among(u"\u03C9\u03B8\u03B7\u03BA\u03B1\u03BC\u03B5", -1, 1),
        Among(u"\u03C9\u03B8\u03B7\u03BA\u03B1\u03BD\u03B5", -1, 1),
        Among(u"\u03C9\u03B8\u03B7\u03BA\u03B1\u03C4\u03B5", -1, 1),
        Among(u"\u03C9\u03B8\u03B7\u03BA\u03B1\u03BD", -1, 1),
        Among(u"\u03C9\u03B8\u03B7\u03BA\u03B5\u03C3", -1, 1)
    ]

    a_6 = [
        Among(u"\u03BE\u03B1\u03BD\u03B1\u03C0\u03B1", -1, 1),
        Among(u"\u03B5\u03C0\u03B1", -1, 1),
        Among(u"\u03C0\u03B5\u03C1\u03B9\u03C0\u03B1", -1, 1),
        Among(u"\u03B1\u03BD\u03B1\u03BC\u03C0\u03B1", -1, 1),
        Among(u"\u03B5\u03BC\u03C0\u03B1", -1, 1),
        Among(u"\u03C7\u03B1\u03C1\u03C4\u03BF\u03C0\u03B1", -1, 1),
        Among(u"\u03B5\u03BE\u03B1\u03C1\u03C7\u03B1", -1, 1),
        Among(u"\u03B3\u03B5", -1, 2),
        Among(u"\u03B3\u03BA\u03B5", -1, 2),
        Among(u"\u03BA\u03BB\u03B5", -1, 1),
        Among(u"\u03B5\u03BA\u03BB\u03B5", 9, 1),
        Among(u"\u03B1\u03C0\u03B5\u03BA\u03BB\u03B5", 10, 1),
        Among(u"\u03B1\u03C0\u03BF\u03BA\u03BB\u03B5", 9, 1),
        Among(u"\u03B5\u03C3\u03C9\u03BA\u03BB\u03B5", 9, 1),
        Among(u"\u03B4\u03B1\u03BD\u03B5", -1, 1),
        Among(u"\u03C0\u03B5", -1, 1),
        Among(u"\u03B5\u03C0\u03B5", 15, 1),
        Among(u"\u03BC\u03B5\u03C4\u03B5\u03C0\u03B5", 16, 1),
        Among(u"\u03B5\u03C3\u03B5", -1, 1),
        Among(u"\u03B3\u03BA", -1, 2),
        Among(u"\u03BC", -1, 2),
        Among(u"\u03C0\u03BF\u03C5\u03BA\u03B1\u03BC", 20, 2),
        Among(u"\u03BA\u03BF\u03BC", 20, 2),
        Among(u"\u03B1\u03BD", -1, 2),
        Among(u"\u03BF\u03BB\u03BF", -1, 2),
        Among(u"\u03B1\u03B8\u03C1\u03BF", -1, 1),
        Among(u"\u03C3\u03C5\u03BD\u03B1\u03B8\u03C1\u03BF", 25, 1),
        Among(u"\u03C0", -1, 2),
        Among(u"\u03BB\u03B1\u03C1", -1, 2),
        Among(u"\u03B4\u03B7\u03BC\u03BF\u03BA\u03C1\u03B1\u03C4", -1, 2),
        Among(u"\u03B1\u03C6", -1, 2),
        Among(u"\u03B3\u03B9\u03B3\u03B1\u03BD\u03C4\u03BF\u03B1\u03C6", 30, 2)
    ]

    a_7 = [
        Among(u"\u03B9\u03C3\u03B1", -1, 1),
        Among(u"\u03B9\u03C3\u03B1\u03BC\u03B5", -1, 1),
        Among(u"\u03B9\u03C3\u03B1\u03BD\u03B5", -1, 1),
        Among(u"\u03B9\u03C3\u03B5", -1, 1),
        Among(u"\u03B9\u03C3\u03B1\u03C4\u03B5", -1, 1),
        Among(u"\u03B9\u03C3\u03B1\u03BD", -1, 1),
        Among(u"\u03B9\u03C3\u03B5\u03C3", -1, 1)
    ]

    a_8 = [
        Among(u"\u03BE\u03B1\u03BD\u03B1\u03C0\u03B1", -1, 1),
        Among(u"\u03B5\u03C0\u03B1", -1, 1),
        Among(u"\u03C0\u03B5\u03C1\u03B9\u03C0\u03B1", -1, 1),
        Among(u"\u03B1\u03BD\u03B1\u03BC\u03C0\u03B1", -1, 1),
        Among(u"\u03B5\u03BC\u03C0\u03B1", -1, 1),
        Among(u"\u03C7\u03B1\u03C1\u03C4\u03BF\u03C0\u03B1", -1, 1),
        Among(u"\u03B5\u03BE\u03B1\u03C1\u03C7\u03B1", -1, 1),
        Among(u"\u03BA\u03BB\u03B5", -1, 1),
        Among(u"\u03B5\u03BA\u03BB\u03B5", 7, 1),
        Among(u"\u03B1\u03C0\u03B5\u03BA\u03BB\u03B5", 8, 1),
        Among(u"\u03B1\u03C0\u03BF\u03BA\u03BB\u03B5", 7, 1),
        Among(u"\u03B5\u03C3\u03C9\u03BA\u03BB\u03B5", 7, 1),
        Among(u"\u03B4\u03B1\u03BD\u03B5", -1, 1),
        Among(u"\u03C0\u03B5", -1, 1),
        Among(u"\u03B5\u03C0\u03B5", 13, 1),
        Among(u"\u03BC\u03B5\u03C4\u03B5\u03C0\u03B5", 14, 1),
        Among(u"\u03B5\u03C3\u03B5", -1, 1),
        Among(u"\u03B1\u03B8\u03C1\u03BF", -1, 1),
        Among(u"\u03C3\u03C5\u03BD\u03B1\u03B8\u03C1\u03BF", 17, 1)
    ]

    a_9 = [
        Among(u"\u03B9\u03C3\u03BF\u03C5\u03BC\u03B5", -1, 1),
        Among(u"\u03B9\u03C3\u03BF\u03C5\u03BD\u03B5", -1, 1),
        Among(u"\u03B9\u03C3\u03B5\u03C4\u03B5", -1, 1),
        Among(u"\u03B9\u03C3\u03B5\u03B9", -1, 1),
        Among(u"\u03B9\u03C3\u03BF\u03C5\u03BD", -1, 1),
        Among(u"\u03B9\u03C3\u03B5\u03B9\u03C3", -1, 1),
        Among(u"\u03B9\u03C3\u03C9", -1, 1)
    ]

    a_10 = [
        Among(u"\u03B1\u03C4\u03B1", -1, 2),
        Among(u"\u03C6\u03B1", -1, 2),
        Among(u"\u03B7\u03C6\u03B1", 1, 2),
        Among(u"\u03BC\u03B5\u03B3", -1, 2),
        Among(u"\u03BB\u03C5\u03B3", -1, 2),
        Among(u"\u03B7\u03B4", -1, 2),
        Among(u"\u03BA\u03BB\u03B5", -1, 1),
        Among(u"\u03B5\u03C3\u03C9\u03BA\u03BB\u03B5", 6, 1),
        Among(u"\u03C0\u03BB\u03B5", -1, 1),
        Among(u"\u03B4\u03B1\u03BD\u03B5", -1, 1),
        Among(u"\u03C3\u03B5", -1, 1),
        Among(u"\u03B1\u03C3\u03B5", 10, 1),
        Among(u"\u03BA\u03B1\u03B8", -1, 2),
        Among(u"\u03B5\u03C7\u03B8", -1, 2),
        Among(u"\u03BA\u03B1\u03BA", -1, 2),
        Among(u"\u03BC\u03B1\u03BA", -1, 2),
        Among(u"\u03C3\u03BA", -1, 2),
        Among(u"\u03C6\u03B9\u03BB", -1, 2),
        Among(u"\u03BA\u03C5\u03BB", -1, 2),
        Among(u"\u03BC", -1, 2),
        Among(u"\u03B3\u03B5\u03BC", 19, 2),
        Among(u"\u03B1\u03C7\u03BD", -1, 2),
        Among(u"\u03C3\u03C5\u03BD\u03B1\u03B8\u03C1\u03BF", -1, 1),
        Among(u"\u03C0", -1, 2),
        Among(u"\u03B1\u03C0", 23, 2),
        Among(u"\u03B5\u03BC\u03C0", 23, 2),
        Among(u"\u03B5\u03C5\u03C0", 23, 2),
        Among(u"\u03B1\u03C1", -1, 2),
        Among(u"\u03B1\u03BF\u03C1", -1, 2),
        Among(u"\u03B3\u03C5\u03C1", -1, 2),
        Among(u"\u03C7\u03C1", -1, 2),
        Among(u"\u03C7\u03C9\u03C1", -1, 2),
        Among(u"\u03BA\u03C4", -1, 2),
        Among(u"\u03B1\u03BA\u03C4", 32, 2),
        Among(u"\u03C7\u03C4", -1, 2),
        Among(u"\u03B1\u03C7\u03C4", 34, 2),
        Among(u"\u03C4\u03B1\u03C7", -1, 2),
        Among(u"\u03C3\u03C7", -1, 2),
        Among(u"\u03B1\u03C3\u03C7", 37, 2),
        Among(u"\u03C5\u03C8", -1, 2)
    ]

    a_11 = [
        Among(u"\u03B9\u03C3\u03C4\u03B1", -1, 1),
        Among(u"\u03B9\u03C3\u03C4\u03B5", -1, 1),
        Among(u"\u03B9\u03C3\u03C4\u03B7", -1, 1),
        Among(u"\u03B9\u03C3\u03C4\u03BF\u03B9", -1, 1),
        Among(u"\u03B9\u03C3\u03C4\u03C9\u03BD", -1, 1),
        Among(u"\u03B9\u03C3\u03C4\u03BF", -1, 1),
        Among(u"\u03B9\u03C3\u03C4\u03B5\u03C3", -1, 1),
        Among(u"\u03B9\u03C3\u03C4\u03B7\u03C3", -1, 1),
        Among(u"\u03B9\u03C3\u03C4\u03BF\u03C3", -1, 1),
        Among(u"\u03B9\u03C3\u03C4\u03BF\u03C5\u03C3", -1, 1),
        Among(u"\u03B9\u03C3\u03C4\u03BF\u03C5", -1, 1)
    ]

    a_12 = [
        Among(u"\u03B5\u03B3\u03BA\u03BB\u03B5", -1, 1),
        Among(u"\u03B1\u03C0\u03BF\u03BA\u03BB\u03B5", -1, 1),
        Among(u"\u03B4\u03B1\u03BD\u03B5", -1, 2),
        Among(u"\u03B1\u03BD\u03C4\u03B9\u03B4\u03B1\u03BD\u03B5", 2, 2),
        Among(u"\u03C3\u03B5", -1, 1),
        Among(u"\u03BC\u03B5\u03C4\u03B1\u03C3\u03B5", 4, 1),
        Among(u"\u03BC\u03B9\u03BA\u03C1\u03BF\u03C3\u03B5", 4, 1)
    ]

    a_13 = [
        Among(u"\u03B1\u03C4\u03BF\u03BC\u03B9\u03BA", -1, 2),
        Among(u"\u03B5\u03B8\u03BD\u03B9\u03BA", -1, 4),
        Among(u"\u03C4\u03BF\u03C0\u03B9\u03BA", -1, 7),
        Among(u"\u03B5\u03BA\u03BB\u03B5\u03BA\u03C4\u03B9\u03BA", -1, 5),
        Among(u"\u03C3\u03BA\u03B5\u03C0\u03C4\u03B9\u03BA", -1, 6),
        Among(u"\u03B3\u03BD\u03C9\u03C3\u03C4\u03B9\u03BA", -1, 3),
        Among(u"\u03B1\u03B3\u03BD\u03C9\u03C3\u03C4\u03B9\u03BA", 5, 1),
        Among(u"\u03B1\u03BB\u03B5\u03BE\u03B1\u03BD\u03B4\u03C1\u03B9\u03BD", -1, 8),
        Among(u"\u03B8\u03B5\u03B1\u03C4\u03C1\u03B9\u03BD", -1, 10),
        Among(u"\u03B2\u03C5\u03B6\u03B1\u03BD\u03C4\u03B9\u03BD", -1, 9)
    ]

    a_14 = [
        Among(u"\u03B9\u03C3\u03BC\u03BF\u03B9", -1, 1),
        Among(u"\u03B9\u03C3\u03BC\u03C9\u03BD", -1, 1),
        Among(u"\u03B9\u03C3\u03BC\u03BF", -1, 1),
        Among(u"\u03B9\u03C3\u03BC\u03BF\u03C3", -1, 1),
        Among(u"\u03B9\u03C3\u03BC\u03BF\u03C5\u03C3", -1, 1),
        Among(u"\u03B9\u03C3\u03BC\u03BF\u03C5", -1, 1)
    ]

    a_15 = [
        Among(u"\u03C3", -1, 1),
        Among(u"\u03C7", -1, 1)
    ]

    a_16 = [
        Among(u"\u03BF\u03C5\u03B4\u03B1\u03BA\u03B9\u03B1", -1, 1),
        Among(u"\u03B1\u03C1\u03B1\u03BA\u03B9\u03B1", -1, 1),
        Among(u"\u03BF\u03C5\u03B4\u03B1\u03BA\u03B9", -1, 1),
        Among(u"\u03B1\u03C1\u03B1\u03BA\u03B9", -1, 1)
    ]

    a_17 = [
        Among(u"\u03B2", -1, 2),
        Among(u"\u03B2\u03B1\u03BC\u03B2", 0, 1),
        Among(u"\u03C3\u03BB\u03BF\u03B2", 0, 1),
        Among(u"\u03C4\u03C3\u03B5\u03C7\u03BF\u03C3\u03BB\u03BF\u03B2", 2, 1),
        Among(u"\u03BA\u03B1\u03C1\u03B4", -1, 2),
        Among(u"\u03B6", -1, 2),
        Among(u"\u03C4\u03B6", 5, 1),
        Among(u"\u03BA", -1, 1),
        Among(u"\u03BA\u03B1\u03C0\u03B1\u03BA", 7, 1),
        Among(u"\u03C3\u03BF\u03BA", 7, 1),
        Among(u"\u03C3\u03BA", 7, 1),
        Among(u"\u03B2\u03B1\u03BB", -1, 2),
        Among(u"\u03BC\u03B1\u03BB", -1, 1),
        Among(u"\u03B3\u03BB", -1, 2),
        Among(u"\u03C4\u03C1\u03B9\u03C0\u03BF\u03BB", -1, 2),
        Among(u"\u03C0\u03BB", -1, 1),
        Among(u"\u03BB\u03BF\u03C5\u03BB", -1, 1),
        Among(u"\u03C6\u03C5\u03BB", -1, 1),
        Among(u"\u03BA\u03B1\u03B9\u03BC", -1, 1),
        Among(u"\u03BA\u03BB\u03B9\u03BC", -1, 1),
        Among(u"\u03C6\u03B1\u03C1\u03BC", -1, 1),
        Among(u"\u03B3\u03B9\u03B1\u03BD", -1, 2),
        Among(u"\u03C3\u03C0\u03B1\u03BD", -1, 1),
        Among(u"\u03B7\u03B3\u03BF\u03C5\u03BC\u03B5\u03BD", -1, 2),
        Among(u"\u03BA\u03BF\u03BD", -1, 1),
        Among(u"\u03BC\u03B1\u03BA\u03C1\u03C5\u03BD", -1, 2),
        Among(u"\u03C0", -1, 2),
        Among(u"\u03BA\u03B1\u03C4\u03C1\u03B1\u03C0", 26, 1),
        Among(u"\u03C1", -1, 1),
        Among(u"\u03B2\u03C1", 28, 1),
        Among(u"\u03BB\u03B1\u03B2\u03C1", 29, 1),
        Among(u"\u03B1\u03BC\u03B2\u03C1", 29, 1),
        Among(u"\u03BC\u03B5\u03C1", 28, 1),
        Among(u"\u03C0\u03B1\u03C4\u03B5\u03C1", 28, 2),
        Among(u"\u03B1\u03BD\u03B8\u03C1", 28, 1),
        Among(u"\u03BA\u03BF\u03C1", 28, 1),
        Among(u"\u03C3", -1, 1),
        Among(u"\u03BD\u03B1\u03B3\u03BA\u03B1\u03C3", 36, 1),
        Among(u"\u03C4\u03BF\u03C3", 36, 2),
        Among(u"\u03BC\u03BF\u03C5\u03C3\u03C4", -1, 1),
        Among(u"\u03C1\u03C5", -1, 1),
        Among(u"\u03C6", -1, 1),
        Among(u"\u03C3\u03C6", 41, 1),
        Among(u"\u03B1\u03BB\u03B9\u03C3\u03C6", 42, 1),
        Among(u"\u03BD\u03C5\u03C6", 41, 2),
        Among(u"\u03C7", -1, 1)
    ]

    a_18 = [
        Among(u"\u03B1\u03BA\u03B9\u03B1", -1, 1),
        Among(u"\u03B1\u03C1\u03B1\u03BA\u03B9\u03B1", 0, 1),
        Among(u"\u03B9\u03C4\u03C3\u03B1", -1, 1),
        Among(u"\u03B1\u03BA\u03B9", -1, 1),
        Among(u"\u03B1\u03C1\u03B1\u03BA\u03B9", 3, 1),
        Among(u"\u03B9\u03C4\u03C3\u03C9\u03BD", -1, 1),
        Among(u"\u03B9\u03C4\u03C3\u03B1\u03C3", -1, 1),
        Among(u"\u03B9\u03C4\u03C3\u03B5\u03C3", -1, 1)
    ]

    a_19 = [
        Among(u"\u03C8\u03B1\u03BB", -1, 1),
        Among(u"\u03B1\u03B9\u03C6\u03BD", -1, 1),
        Among(u"\u03BF\u03BB\u03BF", -1, 1),
        Among(u"\u03B9\u03C1", -1, 1)
    ]

    a_20 = [
        Among(u"\u03B5", -1, 1),
        Among(u"\u03C0\u03B1\u03B9\u03C7\u03BD", -1, 1)
    ]

    a_21 = [
        Among(u"\u03B9\u03B4\u03B9\u03B1", -1, 1),
        Among(u"\u03B9\u03B4\u03B9\u03C9\u03BD", -1, 1),
        Among(u"\u03B9\u03B4\u03B9\u03BF", -1, 1)
    ]

    a_22 = [
        Among(u"\u03B9\u03B2", -1, 1),
        Among(u"\u03B4", -1, 1),
        Among(u"\u03C6\u03C1\u03B1\u03B3\u03BA", -1, 1),
        Among(u"\u03BB\u03C5\u03BA", -1, 1),
        Among(u"\u03BF\u03B2\u03B5\u03BB", -1, 1),
        Among(u"\u03BC\u03B7\u03BD", -1, 1),
        Among(u"\u03C1", -1, 1)
    ]

    a_23 = [
        Among(u"\u03B9\u03C3\u03BA\u03B5", -1, 1),
        Among(u"\u03B9\u03C3\u03BA\u03BF", -1, 1),
        Among(u"\u03B9\u03C3\u03BA\u03BF\u03C3", -1, 1),
        Among(u"\u03B9\u03C3\u03BA\u03BF\u03C5", -1, 1)
    ]

    a_24 = [
        Among(u"\u03B1\u03B4\u03C9\u03BD", -1, 1),
        Among(u"\u03B1\u03B4\u03B5\u03C3", -1, 1)
    ]

    a_25 = [
        Among(u"\u03B3\u03B9\u03B1\u03B3\u03B9", -1, -1),
        Among(u"\u03B8\u03B5\u03B9", -1, -1),
        Among(u"\u03BF\u03BA", -1, -1),
        Among(u"\u03BC\u03B1\u03BC", -1, -1),
        Among(u"\u03BC\u03B1\u03BD", -1, -1),
        Among(u"\u03BC\u03C0\u03B1\u03BC\u03C0", -1, -1),
        Among(u"\u03C0\u03B5\u03B8\u03B5\u03C1", -1, -1),
        Among(u"\u03C0\u03B1\u03C4\u03B5\u03C1", -1, -1),
        Among(u"\u03BA\u03C5\u03C1", -1, -1),
        Among(u"\u03BD\u03C4\u03B1\u03BD\u03C4", -1, -1)
    ]

    a_26 = [
        Among(u"\u03B5\u03B4\u03C9\u03BD", -1, 1),
        Among(u"\u03B5\u03B4\u03B5\u03C3", -1, 1)
    ]

    a_27 = [
        Among(u"\u03BC\u03B9\u03BB", -1, 1),
        Among(u"\u03B4\u03B1\u03C0", -1, 1),
        Among(u"\u03B3\u03B7\u03C0", -1, 1),
        Among(u"\u03B9\u03C0", -1, 1),
        Among(u"\u03B5\u03BC\u03C0", -1, 1),
        Among(u"\u03BF\u03C0", -1, 1),
        Among(u"\u03BA\u03C1\u03B1\u03C3\u03C0", -1, 1),
        Among(u"\u03C5\u03C0", -1, 1)
    ]

    a_28 = [
        Among(u"\u03BF\u03C5\u03B4\u03C9\u03BD", -1, 1),
        Among(u"\u03BF\u03C5\u03B4\u03B5\u03C3", -1, 1)
    ]

    a_29 = [
        Among(u"\u03C4\u03C1\u03B1\u03B3", -1, 1),
        Among(u"\u03C6\u03B5", -1, 1),
        Among(u"\u03BA\u03B1\u03BB\u03B9\u03B1\u03BA", -1, 1),
        Among(u"\u03B1\u03C1\u03BA", -1, 1),
        Among(u"\u03C3\u03BA", -1, 1),
        Among(u"\u03C0\u03B5\u03C4\u03B1\u03BB", -1, 1),
        Among(u"\u03B2\u03B5\u03BB", -1, 1),
        Among(u"\u03BB\u03BF\u03C5\u03BB", -1, 1),
        Among(u"\u03C6\u03BB", -1, 1),
        Among(u"\u03C7\u03BD", -1, 1),
        Among(u"\u03C0\u03BB\u03B5\u03BE", -1, 1),
        Among(u"\u03C3\u03C0", -1, 1),
        Among(u"\u03C6\u03C1", -1, 1),
        Among(u"\u03C3", -1, 1),
        Among(u"\u03BB\u03B9\u03C7", -1, 1)
    ]

    a_30 = [
        Among(u"\u03B5\u03C9\u03BD", -1, 1),
        Among(u"\u03B5\u03C9\u03C3", -1, 1)
    ]

    a_31 = [
        Among(u"\u03B4", -1, 1),
        Among(u"\u03B9\u03B4", 0, 1),
        Among(u"\u03B8", -1, 1),
        Among(u"\u03B3\u03B1\u03BB", -1, 1),
        Among(u"\u03B5\u03BB", -1, 1),
        Among(u"\u03BD", -1, 1),
        Among(u"\u03C0", -1, 1),
        Among(u"\u03C0\u03B1\u03C1", -1, 1)
    ]

    a_32 = [
        Among(u"\u03B9\u03B1", -1, 1),
        Among(u"\u03B9\u03C9\u03BD", -1, 1),
        Among(u"\u03B9\u03BF\u03C5", -1, 1)
    ]

    a_33 = [
        Among(u"\u03B9\u03BA\u03B1", -1, 1),
        Among(u"\u03B9\u03BA\u03C9\u03BD", -1, 1),
        Among(u"\u03B9\u03BA\u03BF", -1, 1),
        Among(u"\u03B9\u03BA\u03BF\u03C5", -1, 1)
    ]

    a_34 = [
        Among(u"\u03B1\u03B4", -1, 1),
        Among(u"\u03C3\u03C5\u03BD\u03B1\u03B4", 0, 1),
        Among(u"\u03BA\u03B1\u03C4\u03B1\u03B4", 0, 1),
        Among(u"\u03B1\u03BD\u03C4\u03B9\u03B4", -1, 1),
        Among(u"\u03B5\u03BD\u03B4", -1, 1),
        Among(u"\u03C6\u03C5\u03BB\u03BF\u03B4", -1, 1),
        Among(u"\u03C5\u03C0\u03BF\u03B4", -1, 1),
        Among(u"\u03C0\u03C1\u03C9\u03C4\u03BF\u03B4", -1, 1),
        Among(u"\u03B5\u03BE\u03C9\u03B4", -1, 1),
        Among(u"\u03B7\u03B8", -1, 1),
        Among(u"\u03B1\u03BD\u03B7\u03B8", 9, 1),
        Among(u"\u03BE\u03B9\u03BA", -1, 1),
        Among(u"\u03B1\u03BB", -1, 1),
        Among(u"\u03B1\u03BC\u03BC\u03BF\u03C7\u03B1\u03BB", 12, 1),
        Among(u"\u03C3\u03C5\u03BD\u03BF\u03BC\u03B7\u03BB", -1, 1),
        Among(u"\u03BC\u03C0\u03BF\u03BB", -1, 1),
        Among(u"\u03BC\u03BF\u03C5\u03BB", -1, 1),
        Among(u"\u03C4\u03C3\u03B1\u03BC", -1, 1),
        Among(u"\u03B2\u03C1\u03C9\u03BC", -1, 1),
        Among(u"\u03B1\u03BC\u03B1\u03BD", -1, 1),
        Among(u"\u03BC\u03C0\u03B1\u03BD", -1, 1),
        Among(u"\u03BA\u03B1\u03BB\u03BB\u03B9\u03BD", -1, 1),
        Among(u"\u03C0\u03BF\u03C3\u03C4\u03B5\u03BB\u03BD", -1, 1),
        Among(u"\u03C6\u03B9\u03BB\u03BF\u03BD", -1, 1),
        Among(u"\u03BA\u03B1\u03BB\u03C0", -1, 1),
        Among(u"\u03B3\u03B5\u03C1", -1, 1),
        Among(u"\u03C7\u03B1\u03C3", -1, 1),
        Among(u"\u03BC\u03C0\u03BF\u03C3", -1, 1),
        Among(u"\u03C0\u03BB\u03B9\u03B1\u03C4\u03C3", -1, 1),
        Among(u"\u03C0\u03B5\u03C4\u03C3", -1, 1),
        Among(u"\u03C0\u03B9\u03C4\u03C3", -1, 1),
        Among(u"\u03C6\u03C5\u03C3", -1, 1),
        Among(u"\u03BC\u03C0\u03B1\u03B3\u03B9\u03B1\u03C4", -1, 1),
        Among(u"\u03BD\u03B9\u03C4", -1, 1),
        Among(u"\u03C0\u03B9\u03BA\u03B1\u03BD\u03C4", -1, 1),
        Among(u"\u03C3\u03B5\u03C1\u03C4", -1, 1)
    ]

    a_35 = [
        Among(u"\u03B1\u03B3\u03B1\u03BC\u03B5", -1, 1),
        Among(u"\u03B7\u03BA\u03B1\u03BC\u03B5", -1, 1),
        Among(u"\u03B7\u03B8\u03B7\u03BA\u03B1\u03BC\u03B5", 1, 1),
        Among(u"\u03B7\u03C3\u03B1\u03BC\u03B5", -1, 1),
        Among(u"\u03BF\u03C5\u03C3\u03B1\u03BC\u03B5", -1, 1)
    ]

    a_36 = [
        Among(u"\u03B2\u03BF\u03C5\u03B2", -1, 1),
        Among(u"\u03BE\u03B5\u03B8", -1, 1),
        Among(u"\u03C0\u03B5\u03B8", -1, 1),
        Among(u"\u03B1\u03C0\u03BF\u03B8", -1, 1),
        Among(u"\u03B1\u03C0\u03BF\u03BA", -1, 1),
        Among(u"\u03BF\u03C5\u03BB", -1, 1),
        Among(u"\u03B1\u03BD\u03B1\u03C0", -1, 1),
        Among(u"\u03C0\u03B9\u03BA\u03C1", -1, 1),
        Among(u"\u03C0\u03BF\u03C4", -1, 1),
        Among(u"\u03B1\u03C0\u03BF\u03C3\u03C4", -1, 1),
        Among(u"\u03C7", -1, 1),
        Among(u"\u03C3\u03B9\u03C7", 10, 1)
    ]

    a_37 = [
        Among(u"\u03C4\u03C1", -1, 1),
        Among(u"\u03C4\u03C3", -1, 1)
    ]

    a_38 = [
        Among(u"\u03B1\u03B3\u03B1\u03BD\u03B5", -1, 1),
        Among(u"\u03B7\u03BA\u03B1\u03BD\u03B5", -1, 1),
        Among(u"\u03B7\u03B8\u03B7\u03BA\u03B1\u03BD\u03B5", 1, 1),
        Among(u"\u03B7\u03C3\u03B1\u03BD\u03B5", -1, 1),
        Among(u"\u03BF\u03C5\u03C3\u03B1\u03BD\u03B5", -1, 1),
        Among(u"\u03BF\u03BD\u03C4\u03B1\u03BD\u03B5", -1, 1),
        Among(u"\u03B9\u03BF\u03BD\u03C4\u03B1\u03BD\u03B5", 5, 1),
        Among(u"\u03BF\u03C5\u03BD\u03C4\u03B1\u03BD\u03B5", -1, 1),
        Among(u"\u03B9\u03BF\u03C5\u03BD\u03C4\u03B1\u03BD\u03B5", 7, 1),
        Among(u"\u03BF\u03C4\u03B1\u03BD\u03B5", -1, 1),
        Among(u"\u03B9\u03BF\u03C4\u03B1\u03BD\u03B5", 9, 1)
    ]

    a_39 = [
        Among(u"\u03C4\u03B1\u03B2", -1, 1),
        Among(u"\u03BD\u03C4\u03B1\u03B2", 0, 1),
        Among(u"\u03C8\u03B7\u03BB\u03BF\u03C4\u03B1\u03B2", 0, 1),
        Among(u"\u03BB\u03B9\u03B2", -1, 1),
        Among(u"\u03BA\u03BB\u03B9\u03B2", 3, 1),
        Among(u"\u03BE\u03B7\u03C1\u03BF\u03BA\u03BB\u03B9\u03B2", 4, 1),
        Among(u"\u03B3", -1, 1),
        Among(u"\u03B1\u03B3", 6, 1),
        Among(u"\u03C4\u03C1\u03B1\u03B3", 7, 1),
        Among(u"\u03C4\u03C3\u03B1\u03B3", 7, 1),
        Among(u"\u03B1\u03B8\u03B9\u03B3\u03B3", 6, 1),
        Among(u"\u03C4\u03C3\u03B9\u03B3\u03B3", 6, 1),
        Among(u"\u03B1\u03C4\u03C3\u03B9\u03B3\u03B3", 11, 1),
        Among(u"\u03C3\u03C4\u03B5\u03B3", 6, 1),
        Among(u"\u03B1\u03C0\u03B7\u03B3", 6, 1),
        Among(u"\u03C3\u03B9\u03B3", 6, 1),
        Among(u"\u03B1\u03BD\u03BF\u03C1\u03B3", 6, 1),
        Among(u"\u03B5\u03BD\u03BF\u03C1\u03B3", 6, 1),
        Among(u"\u03BA\u03B1\u03BB\u03C0\u03BF\u03C5\u03B6", -1, 1),
        Among(u"\u03B8", -1, 1),
        Among(u"\u03BC\u03C9\u03B1\u03BC\u03B5\u03B8", 19, 1),
        Among(u"\u03C0\u03B9\u03B8", 19, 1),
        Among(u"\u03B1\u03C0\u03B9\u03B8", 21, 1),
        Among(u"\u03B4\u03B5\u03BA", -1, 1),
        Among(u"\u03C0\u03B5\u03BB\u03B5\u03BA", -1, 1),
        Among(u"\u03B9\u03BA", -1, 1),
        Among(u"\u03B1\u03BD\u03B9\u03BA", 25, 1),
        Among(u"\u03B2\u03BF\u03C5\u03BB\u03BA", -1, 1),
        Among(u"\u03B2\u03B1\u03C3\u03BA", -1, 1),
        Among(u"\u03B2\u03C1\u03B1\u03C7\u03C5\u03BA", -1, 1),
        Among(u"\u03B3\u03B1\u03BB", -1, 1),
        Among(u"\u03BA\u03B1\u03C4\u03B1\u03B3\u03B1\u03BB", 30, 1),
        Among(u"\u03BF\u03BB\u03BF\u03B3\u03B1\u03BB", 30, 1),
        Among(u"\u03B2\u03B1\u03B8\u03C5\u03B3\u03B1\u03BB", 30, 1),
        Among(u"\u03BC\u03B5\u03BB", -1, 1),
        Among(u"\u03BA\u03B1\u03C3\u03C4\u03B5\u03BB", -1, 1),
        Among(u"\u03C0\u03BF\u03C1\u03C4\u03BF\u03BB", -1, 1),
        Among(u"\u03C0\u03BB", -1, 1),
        Among(u"\u03B4\u03B9\u03C0\u03BB", 37, 1),
        Among(u"\u03BB\u03B1\u03BF\u03C0\u03BB", 37, 1),
        Among(u"\u03C8\u03C5\u03C7\u03BF\u03C0\u03BB", 37, 1),
        Among(u"\u03BF\u03C5\u03BB", -1, 1),
        Among(u"\u03BC", -1, 1),
        Among(u"\u03BF\u03BB\u03B9\u03B3\u03BF\u03B4\u03B1\u03BC", 42, 1),
        Among(u"\u03BC\u03BF\u03C5\u03C3\u03BF\u03C5\u03BB\u03BC", 42, 1),
        Among(u"\u03B4\u03C1\u03B1\u03B4\u03BF\u03C5\u03BC", 42, 1),
        Among(u"\u03B2\u03C1\u03B1\u03C7\u03BC", 42, 1),
        Among(u"\u03BD", -1, 1),
        Among(u"\u03B1\u03BC\u03B5\u03C1\u03B9\u03BA\u03B1\u03BD", 47, 1),
        Among(u"\u03C0", -1, 1),
        Among(u"\u03B1\u03B4\u03B1\u03C0", 49, 1),
        Among(u"\u03C7\u03B1\u03BC\u03B7\u03BB\u03BF\u03B4\u03B1\u03C0", 49, 1),
        Among(u"\u03C0\u03BF\u03BB\u03C5\u03B4\u03B1\u03C0", 49, 1),
        Among(u"\u03BA\u03BF\u03C0", 49, 1),
        Among(u"\u03C5\u03C0\u03BF\u03BA\u03BF\u03C0", 53, 1),
        Among(u"\u03C4\u03C3\u03BF\u03C0", 49, 1),
        Among(u"\u03C3\u03C0", 49, 1),
        Among(u"\u03B5\u03C1", -1, 1),
        Among(u"\u03B3\u03B5\u03C1", 57, 1),
        Among(u"\u03B2\u03B5\u03C4\u03B5\u03C1", 57, 1),
        Among(u"\u03BB\u03BF\u03C5\u03B8\u03B7\u03C1", -1, 1),
        Among(u"\u03BA\u03BF\u03C1\u03BC\u03BF\u03C1", -1, 1),
        Among(u"\u03C0\u03B5\u03C1\u03B9\u03C4\u03C1", -1, 1),
        Among(u"\u03BF\u03C5\u03C1", -1, 1),
        Among(u"\u03C3", -1, 1),
        Among(u"\u03B2\u03B1\u03C3", 64, 1),
        Among(u"\u03C0\u03BF\u03BB\u03B9\u03C3", 64, 1),
        Among(u"\u03C3\u03B1\u03C1\u03B1\u03BA\u03B1\u03C4\u03C3", 64, 1),
        Among(u"\u03B8\u03C5\u03C3", 64, 1),
        Among(u"\u03B4\u03B9\u03B1\u03C4", -1, 1),
        Among(u"\u03C0\u03BB\u03B1\u03C4", -1, 1),
        Among(u"\u03C4\u03C3\u03B1\u03C1\u03BB\u03B1\u03C4", -1, 1),
        Among(u"\u03C4\u03B5\u03C4", -1, 1),
        Among(u"\u03C0\u03BF\u03C5\u03C1\u03B9\u03C4", -1, 1),
        Among(u"\u03C3\u03BF\u03C5\u03BB\u03C4", -1, 1),
        Among(u"\u03BC\u03B1\u03B9\u03BD\u03C4", -1, 1),
        Among(u"\u03B6\u03C9\u03BD\u03C4", -1, 1),
        Among(u"\u03BA\u03B1\u03C3\u03C4", -1, 1),
        Among(u"\u03C6", -1, 1),
        Among(u"\u03B4\u03B9\u03B1\u03C6", 78, 1),
        Among(u"\u03C3\u03C4\u03B5\u03C6", 78, 1),
        Among(u"\u03C6\u03C9\u03C4\u03BF\u03C3\u03C4\u03B5\u03C6", 80, 1),
        Among(u"\u03C0\u03B5\u03C1\u03B7\u03C6", 78, 1),
        Among(u"\u03C5\u03C0\u03B5\u03C1\u03B7\u03C6", 82, 1),
        Among(u"\u03BA\u03BF\u03B9\u03BB\u03B1\u03C1\u03C6", 78, 1),
        Among(u"\u03C0\u03B5\u03BD\u03C4\u03B1\u03C1\u03C6", 78, 1),
        Among(u"\u03BF\u03C1\u03C6", 78, 1),
        Among(u"\u03C7", -1, 1),
        Among(u"\u03B1\u03BC\u03B7\u03C7", 87, 1),
        Among(u"\u03B2\u03B9\u03BF\u03BC\u03B7\u03C7", 87, 1),
        Among(u"\u03BC\u03B5\u03B3\u03BB\u03BF\u03B2\u03B9\u03BF\u03BC\u03B7\u03C7", 89, 1),
        Among(u"\u03BA\u03B1\u03C0\u03BD\u03BF\u03B2\u03B9\u03BF\u03BC\u03B7\u03C7", 89, 1),
        Among(u"\u03BC\u03B9\u03BA\u03C1\u03BF\u03B2\u03B9\u03BF\u03BC\u03B7\u03C7", 89, 1),
        Among(u"\u03C0\u03BF\u03BB\u03C5\u03BC\u03B7\u03C7", 87, 1),
        Among(u"\u03BB\u03B9\u03C7", 87, 1)
    ]

    a_40 = [
        Among(u"\u03B7\u03C3\u03B5\u03C4\u03B5", -1, 1)
    ]

    a_41 = [
        Among(u"\u03B5\u03BD\u03B4", -1, 1),
        Among(u"\u03C3\u03C5\u03BD\u03B4", -1, 1),
        Among(u"\u03BF\u03B4", -1, 1),
        Among(u"\u03B4\u03B9\u03B1\u03B8", -1, 1),
        Among(u"\u03BA\u03B1\u03B8", -1, 1),
        Among(u"\u03C1\u03B1\u03B8", -1, 1),
        Among(u"\u03C4\u03B1\u03B8", -1, 1),
        Among(u"\u03C4\u03B9\u03B8", -1, 1),
        Among(u"\u03B5\u03BA\u03B8", -1, 1),
        Among(u"\u03B5\u03BD\u03B8", -1, 1),
        Among(u"\u03C3\u03C5\u03BD\u03B8", -1, 1),
        Among(u"\u03C1\u03BF\u03B8", -1, 1),
        Among(u"\u03C5\u03C0\u03B5\u03C1\u03B8", -1, 1),
        Among(u"\u03C3\u03B8", -1, 1),
        Among(u"\u03B5\u03C5\u03B8", -1, 1),
        Among(u"\u03B1\u03C1\u03BA", -1, 1),
        Among(u"\u03C9\u03C6\u03B5\u03BB", -1, 1),
        Among(u"\u03B2\u03BF\u03BB", -1, 1),
        Among(u"\u03B1\u03B9\u03BD", -1, 1),
        Among(u"\u03C0\u03BF\u03BD", -1, 1),
        Among(u"\u03C1\u03BF\u03BD", -1, 1),
        Among(u"\u03C3\u03C5\u03BD", -1, 1),
        Among(u"\u03B2\u03B1\u03C1", -1, 1),
        Among(u"\u03B2\u03C1", -1, 1),
        Among(u"\u03B1\u03B9\u03C1", -1, 1),
        Among(u"\u03C6\u03BF\u03C1", -1, 1),
        Among(u"\u03B5\u03C5\u03C1", -1, 1),
        Among(u"\u03C0\u03C5\u03C1", -1, 1),
        Among(u"\u03C7\u03C9\u03C1", -1, 1),
        Among(u"\u03BD\u03B5\u03C4", -1, 1),
        Among(u"\u03C3\u03C7", -1, 1)
    ]

    a_42 = [
        Among(u"\u03C0\u03B1\u03B3", -1, 1),
        Among(u"\u03B4", -1, 1),
        Among(u"\u03B1\u03B4", 1, 1),
        Among(u"\u03B8", -1, 1),
        Among(u"\u03B1\u03B8", 3, 1),
        Among(u"\u03C4\u03BF\u03BA", -1, 1),
        Among(u"\u03C3\u03BA", -1, 1),
        Among(u"\u03C0\u03B1\u03C1\u03B1\u03BA\u03B1\u03BB", -1, 1),
        Among(u"\u03C3\u03BA\u03B5\u03BB", -1, 1),
        Among(u"\u03B1\u03C0\u03BB", -1, 1),
        Among(u"\u03B5\u03BC", -1, 1),
        Among(u"\u03B1\u03BD", -1, 1),
        Among(u"\u03B2\u03B5\u03BD", -1, 1),
        Among(u"\u03B2\u03B1\u03C1\u03BF\u03BD", -1, 1),
        Among(u"\u03BA\u03BF\u03C0", -1, 1),
        Among(u"\u03C3\u03B5\u03C1\u03C0", -1, 1),
        Among(u"\u03B1\u03B2\u03B1\u03C1", -1, 1),
        Among(u"\u03B5\u03BD\u03B1\u03C1", -1, 1),
        Among(u"\u03B1\u03B2\u03C1", -1, 1),
        Among(u"\u03BC\u03C0\u03BF\u03C1", -1, 1),
        Among(u"\u03B8\u03B1\u03C1\u03C1", -1, 1),
        Among(u"\u03BD\u03C4\u03C1", -1, 1),
        Among(u"\u03C5", -1, 1),
        Among(u"\u03BD\u03B9\u03C6", -1, 1),
        Among(u"\u03C3\u03C5\u03C1\u03C6", -1, 1)
    ]

    a_43 = [
        Among(u"\u03BF\u03BD\u03C4\u03B1\u03C3", -1, 1),
        Among(u"\u03C9\u03BD\u03C4\u03B1\u03C3", -1, 1)
    ]

    a_44 = [
        Among(u"\u03BF\u03BC\u03B1\u03C3\u03C4\u03B5", -1, 1),
        Among(u"\u03B9\u03BF\u03BC\u03B1\u03C3\u03C4\u03B5", 0, 1)
    ]

    a_45 = [
        Among(u"\u03C0", -1, 1),
        Among(u"\u03B1\u03C0", 0, 1),
        Among(u"\u03B1\u03BA\u03B1\u03C4\u03B1\u03C0", 1, 1),
        Among(u"\u03C3\u03C5\u03BC\u03C0", 0, 1),
        Among(u"\u03B1\u03C3\u03C5\u03BC\u03C0", 3, 1),
        Among(u"\u03B1\u03BC\u03B5\u03C4\u03B1\u03BC\u03C6", -1, 1)
    ]

    a_46 = [
        Among(u"\u03B6", -1, 1),
        Among(u"\u03B1\u03BB", -1, 1),
        Among(u"\u03C0\u03B1\u03C1\u03B1\u03BA\u03B1\u03BB", 1, 1),
        Among(u"\u03B5\u03BA\u03C4\u03B5\u03BB", -1, 1),
        Among(u"\u03BC", -1, 1),
        Among(u"\u03BE", -1, 1),
        Among(u"\u03C0\u03C1\u03BF", -1, 1),
        Among(u"\u03B1\u03C1", -1, 1),
        Among(u"\u03BD\u03B9\u03C3", -1, 1)
    ]

    a_47 = [
        Among(u"\u03B7\u03B8\u03B7\u03BA\u03B1", -1, 1),
        Among(u"\u03B7\u03B8\u03B7\u03BA\u03B5", -1, 1),
        Among(u"\u03B7\u03B8\u03B7\u03BA\u03B5\u03C3", -1, 1)
    ]

    a_48 = [
        Among(u"\u03C0\u03B9\u03B8", -1, 1),
        Among(u"\u03BF\u03B8", -1, 1),
        Among(u"\u03BD\u03B1\u03C1\u03B8", -1, 1),
        Among(u"\u03C3\u03BA\u03BF\u03C5\u03BB", -1, 1),
        Among(u"\u03C3\u03BA\u03C9\u03BB", -1, 1),
        Among(u"\u03C3\u03C6", -1, 1)
    ]

    a_49 = [
        Among(u"\u03B8", -1, 1),
        Among(u"\u03B4\u03B9\u03B1\u03B8", 0, 1),
        Among(u"\u03C0\u03B1\u03C1\u03B1\u03BA\u03B1\u03C4\u03B1\u03B8", 0, 1),
        Among(u"\u03C3\u03C5\u03BD\u03B8", 0, 1),
        Among(u"\u03C0\u03C1\u03BF\u03C3\u03B8", 0, 1)
    ]

    a_50 = [
        Among(u"\u03B7\u03BA\u03B1", -1, 1),
        Among(u"\u03B7\u03BA\u03B5", -1, 1),
        Among(u"\u03B7\u03BA\u03B5\u03C3", -1, 1)
    ]

    a_51 = [
        Among(u"\u03C6\u03B1\u03B3", -1, 1),
        Among(u"\u03BB\u03B7\u03B3", -1, 1),
        Among(u"\u03C6\u03C1\u03C5\u03B4", -1, 1),
        Among(u"\u03BC\u03B1\u03BD\u03C4\u03B9\u03BB", -1, 1),
        Among(u"\u03BC\u03B1\u03BB\u03BB", -1, 1),
        Among(u"\u03BF\u03BC", -1, 1),
        Among(u"\u03B2\u03BB\u03B5\u03C0", -1, 1),
        Among(u"\u03C0\u03BF\u03B4\u03B1\u03C1", -1, 1),
        Among(u"\u03BA\u03C5\u03BC\u03B1\u03C4", -1, 1),
        Among(u"\u03C0\u03C1\u03C9\u03C4", -1, 1),
        Among(u"\u03BB\u03B1\u03C7", -1, 1),
        Among(u"\u03C0\u03B1\u03BD\u03C4\u03B1\u03C7", -1, 1)
    ]

    a_52 = [
        Among(u"\u03C4\u03C3\u03B1", -1, 1),
        Among(u"\u03C7\u03B1\u03B4", -1, 1),
        Among(u"\u03BC\u03B5\u03B4", -1, 1),
        Among(u"\u03BB\u03B1\u03BC\u03C0\u03B9\u03B4", -1, 1),
        Among(u"\u03B4\u03B5", -1, 1),
        Among(u"\u03C0\u03BB\u03B5", -1, 1),
        Among(u"\u03BC\u03B5\u03C3\u03B1\u03B6", -1, 1),
        Among(u"\u03B4\u03B5\u03C3\u03C0\u03BF\u03B6", -1, 1),
        Among(u"\u03B1\u03B9\u03B8", -1, 1),
        Among(u"\u03C6\u03B1\u03C1\u03BC\u03B1\u03BA", -1, 1),
        Among(u"\u03B1\u03B3\u03BA", -1, 1),
        Among(u"\u03B1\u03BD\u03B7\u03BA", -1, 1),
        Among(u"\u03BB", -1, 1),
        Among(u"\u03BC", -1, 1),
        Among(u"\u03B1\u03BC", 13, 1),
        Among(u"\u03B2\u03C1\u03BF\u03BC", 13, 1),
        Among(u"\u03C5\u03C0\u03BF\u03C4\u03B5\u03B9\u03BD", -1, 1),
        Among(u"\u03B5\u03BA\u03BB\u03B9\u03C0", -1, 1),
        Among(u"\u03C1", -1, 1),
        Among(u"\u03B5\u03BD\u03B4\u03B9\u03B1\u03C6\u03B5\u03C1", 18, 1),
        Among(u"\u03B1\u03BD\u03B1\u03C1\u03C1", 18, 1),
        Among(u"\u03C0\u03B1\u03C4", -1, 1),
        Among(u"\u03BA\u03B1\u03B8\u03B1\u03C1\u03B5\u03C5", -1, 1),
        Among(u"\u03B4\u03B5\u03C5\u03C4\u03B5\u03C1\u03B5\u03C5", -1, 1),
        Among(u"\u03BB\u03B5\u03C7", -1, 1)
    ]

    a_53 = [
        Among(u"\u03BF\u03C5\u03C3\u03B1", -1, 1),
        Among(u"\u03BF\u03C5\u03C3\u03B5", -1, 1),
        Among(u"\u03BF\u03C5\u03C3\u03B5\u03C3", -1, 1)
    ]

    a_54 = [
        Among(u"\u03C0\u03B5\u03BB", -1, 1),
        Among(u"\u03BB\u03BB", -1, 1),
        Among(u"\u03C3\u03BC\u03B7\u03BD", -1, 1),
        Among(u"\u03C1\u03C0", -1, 1),
        Among(u"\u03C0\u03C1", -1, 1),
        Among(u"\u03C6\u03C1", -1, 1),
        Among(u"\u03C7\u03BF\u03C1\u03C4", -1, 1),
        Among(u"\u03BF\u03C6", -1, 1),
        Among(u"\u03C8\u03BF\u03C6", 7, -1),
        Among(u"\u03C3\u03C6", -1, 1),
        Among(u"\u03BB\u03BF\u03C7", -1, 1),
        Among(u"\u03BD\u03B1\u03C5\u03BB\u03BF\u03C7", 10, -1)
    ]

    a_55 = [
        Among(u"\u03B1\u03BC\u03B1\u03BB\u03BB\u03B9", -1, 1),
        Among(u"\u03BB", -1, 1),
        Among(u"\u03B1\u03BC\u03B1\u03BB", 1, 1),
        Among(u"\u03BC", -1, 1),
        Among(u"\u03BF\u03C5\u03BB\u03B1\u03BC", 3, 1),
        Among(u"\u03B5\u03BD", -1, 1),
        Among(u"\u03B4\u03B5\u03C1\u03B2\u03B5\u03BD", 5, 1),
        Among(u"\u03C0", -1, 1),
        Among(u"\u03B1\u03B5\u03B9\u03C0", 7, 1),
        Among(u"\u03B1\u03C1\u03C4\u03B9\u03C0", 7, 1),
        Among(u"\u03C3\u03C5\u03BC\u03C0", 7, 1),
        Among(u"\u03BD\u03B5\u03BF\u03C0", 7, 1),
        Among(u"\u03BA\u03C1\u03BF\u03BA\u03B1\u03BB\u03BF\u03C0", 7, 1),
        Among(u"\u03BF\u03BB\u03BF\u03C0", 7, 1),
        Among(u"\u03C0\u03C1\u03BF\u03C3\u03C9\u03C0\u03BF\u03C0", 7, 1),
        Among(u"\u03C3\u03B9\u03B4\u03B7\u03C1\u03BF\u03C0", 7, 1),
        Among(u"\u03B4\u03C1\u03BF\u03C3\u03BF\u03C0", 7, 1),
        Among(u"\u03B1\u03C3\u03C0", 7, 1),
        Among(u"\u03B1\u03BD\u03C5\u03C0", 7, 1),
        Among(u"\u03C1", -1, 1),
        Among(u"\u03B1\u03C3\u03C0\u03B1\u03C1", 19, 1),
        Among(u"\u03C7\u03B1\u03C1", 19, 1),
        Among(u"\u03B1\u03C7\u03B1\u03C1", 21, 1),
        Among(u"\u03B1\u03C0\u03B5\u03C1", 19, 1),
        Among(u"\u03C4\u03C1", 19, 1),
        Among(u"\u03BF\u03C5\u03C1", 19, 1),
        Among(u"\u03C4", -1, 1),
        Among(u"\u03B4\u03B9\u03B1\u03C4", 26, 1),
        Among(u"\u03B5\u03C0\u03B9\u03C4", 26, 1),
        Among(u"\u03C3\u03C5\u03BD\u03C4", 26, 1),
        Among(u"\u03BF\u03BC\u03BF\u03C4", 26, 1),
        Among(u"\u03BD\u03BF\u03BC\u03BF\u03C4", 30, 1),
        Among(u"\u03B1\u03C0\u03BF\u03C4", 26, 1),
        Among(u"\u03C5\u03C0\u03BF\u03C4", 26, 1),
        Among(u"\u03B1\u03B2\u03B1\u03C3\u03C4", 26, 1),
        Among(u"\u03B1\u03B9\u03BC\u03BF\u03C3\u03C4", 26, 1),
        Among(u"\u03C0\u03C1\u03BF\u03C3\u03C4", 26, 1),
        Among(u"\u03B1\u03BD\u03C5\u03C3\u03C4", 26, 1),
        Among(u"\u03BD\u03B1\u03C5", -1, 1),
        Among(u"\u03B1\u03C6", -1, 1),
        Among(u"\u03BE\u03B5\u03C6", -1, 1),
        Among(u"\u03B1\u03B4\u03B7\u03C6", -1, 1),
        Among(u"\u03C0\u03B1\u03BC\u03C6", -1, 1),
        Among(u"\u03C0\u03BF\u03BB\u03C5\u03C6", -1, 1)
    ]

    a_56 = [
        Among(u"\u03B1\u03B3\u03B1", -1, 1),
        Among(u"\u03B1\u03B3\u03B5", -1, 1),
        Among(u"\u03B1\u03B3\u03B5\u03C3", -1, 1)
    ]

    a_57 = [
        Among(u"\u03B7\u03C3\u03B1", -1, 1),
        Among(u"\u03B7\u03C3\u03B5", -1, 1),
        Among(u"\u03B7\u03C3\u03BF\u03C5", -1, 1)
    ]

    a_58 = [
        Among(u"\u03BD", -1, 1),
        Among(u"\u03B4\u03C9\u03B4\u03B5\u03BA\u03B1\u03BD", 0, 1),
        Among(u"\u03B5\u03C0\u03C4\u03B1\u03BD", 0, 1),
        Among(u"\u03BC\u03B5\u03B3\u03B1\u03BB\u03BF\u03BD", 0, 1),
        Among(u"\u03B5\u03C1\u03B7\u03BC\u03BF\u03BD", 0, 1),
        Among(u"\u03C7\u03B5\u03C1\u03C3\u03BF\u03BD", 0, 1)
    ]

    a_59 = [
        Among(u"\u03B7\u03C3\u03C4\u03B5", -1, 1)
    ]

    a_60 = [
        Among(u"\u03C3\u03B2", -1, 1),
        Among(u"\u03B1\u03C3\u03B2", 0, 1),
        Among(u"\u03B1\u03C0\u03BB", -1, 1),
        Among(u"\u03B1\u03B5\u03B9\u03BC\u03BD", -1, 1),
        Among(u"\u03C7\u03C1", -1, 1),
        Among(u"\u03B1\u03C7\u03C1", 4, 1),
        Among(u"\u03BA\u03BF\u03B9\u03BD\u03BF\u03C7\u03C1", 4, 1),
        Among(u"\u03B4\u03C5\u03C3\u03C7\u03C1", 4, 1),
        Among(u"\u03B5\u03C5\u03C7\u03C1", 4, 1),
        Among(u"\u03C0\u03B1\u03BB\u03B9\u03BC\u03C8", -1, 1)
    ]

    a_61 = [
        Among(u"\u03BF\u03C5\u03BD\u03B5", -1, 1),
        Among(u"\u03B7\u03B8\u03BF\u03C5\u03BD\u03B5", 0, 1),
        Among(u"\u03B7\u03C3\u03BF\u03C5\u03BD\u03B5", 0, 1)
    ]

    a_62 = [
        Among(u"\u03C3\u03C0\u03B9", -1, 1),
        Among(u"\u03BD", -1, 1),
        Among(u"\u03B5\u03BE\u03C9\u03BD", 1, 1),
        Among(u"\u03C1", -1, 1),
        Among(u"\u03C3\u03C4\u03C1\u03B1\u03B2\u03BF\u03BC\u03BF\u03C5\u03C4\u03C3", -1, 1),
        Among(u"\u03BA\u03B1\u03BA\u03BF\u03BC\u03BF\u03C5\u03C4\u03C3", -1, 1)
    ]

    a_63 = [
        Among(u"\u03BF\u03C5\u03BC\u03B5", -1, 1),
        Among(u"\u03B7\u03B8\u03BF\u03C5\u03BC\u03B5", 0, 1),
        Among(u"\u03B7\u03C3\u03BF\u03C5\u03BC\u03B5", 0, 1)
    ]

    a_64 = [
        Among(u"\u03B1\u03B6", -1, 1),
        Among(u"\u03C9\u03C1\u03B9\u03BF\u03C0\u03BB", -1, 1),
        Among(u"\u03B1\u03C3\u03BF\u03C5\u03C3", -1, 1),
        Among(u"\u03C0\u03B1\u03C1\u03B1\u03C3\u03BF\u03C5\u03C3", 2, 1),
        Among(u"\u03B1\u03BB\u03BB\u03BF\u03C3\u03BF\u03C5\u03C3", -1, 1),
        Among(u"\u03C6", -1, 1),
        Among(u"\u03C7", -1, 1)
    ]

    a_65 = [
        Among(u"\u03BC\u03B1\u03C4\u03B1", -1, 1),
        Among(u"\u03BC\u03B1\u03C4\u03C9\u03BD", -1, 1),
        Among(u"\u03BC\u03B1\u03C4\u03BF\u03C3", -1, 1)
    ]

    a_66 = [
        Among(u"\u03B1", -1, 1),
        Among(u"\u03B9\u03BF\u03C5\u03BC\u03B1", 0, 1),
        Among(u"\u03BF\u03BC\u03BF\u03C5\u03BD\u03B1", 0, 1),
        Among(u"\u03B9\u03BF\u03BC\u03BF\u03C5\u03BD\u03B1", 2, 1),
        Among(u"\u03BF\u03C3\u03BF\u03C5\u03BD\u03B1", 0, 1),
        Among(u"\u03B9\u03BF\u03C3\u03BF\u03C5\u03BD\u03B1", 4, 1),
        Among(u"\u03B5", -1, 1),
        Among(u"\u03B1\u03B3\u03B1\u03C4\u03B5", 6, 1),
        Among(u"\u03B7\u03BA\u03B1\u03C4\u03B5", 6, 1),
        Among(u"\u03B7\u03B8\u03B7\u03BA\u03B1\u03C4\u03B5", 8, 1),
        Among(u"\u03B7\u03C3\u03B1\u03C4\u03B5", 6, 1),
        Among(u"\u03BF\u03C5\u03C3\u03B1\u03C4\u03B5", 6, 1),
        Among(u"\u03B5\u03B9\u03C4\u03B5", 6, 1),
        Among(u"\u03B7\u03B8\u03B5\u03B9\u03C4\u03B5", 12, 1),
        Among(u"\u03B9\u03B5\u03BC\u03B1\u03C3\u03C4\u03B5", 6, 1),
        Among(u"\u03BF\u03C5\u03BC\u03B1\u03C3\u03C4\u03B5", 6, 1),
        Among(u"\u03B9\u03BF\u03C5\u03BC\u03B1\u03C3\u03C4\u03B5", 15, 1),
        Among(u"\u03B9\u03B5\u03C3\u03B1\u03C3\u03C4\u03B5", 6, 1),
        Among(u"\u03BF\u03C3\u03B1\u03C3\u03C4\u03B5", 6, 1),
        Among(u"\u03B9\u03BF\u03C3\u03B1\u03C3\u03C4\u03B5", 18, 1),
        Among(u"\u03B7", -1, 1),
        Among(u"\u03B9", -1, 1),
        Among(u"\u03B1\u03BC\u03B1\u03B9", 21, 1),
        Among(u"\u03B9\u03B5\u03BC\u03B1\u03B9", 21, 1),
        Among(u"\u03BF\u03BC\u03B1\u03B9", 21, 1),
        Among(u"\u03BF\u03C5\u03BC\u03B1\u03B9", 21, 1),
        Among(u"\u03B1\u03C3\u03B1\u03B9", 21, 1),
        Among(u"\u03B5\u03C3\u03B1\u03B9", 21, 1),
        Among(u"\u03B9\u03B5\u03C3\u03B1\u03B9", 27, 1),
        Among(u"\u03B1\u03C4\u03B1\u03B9", 21, 1),
        Among(u"\u03B5\u03C4\u03B1\u03B9", 21, 1),
        Among(u"\u03B9\u03B5\u03C4\u03B1\u03B9", 30, 1),
        Among(u"\u03BF\u03BD\u03C4\u03B1\u03B9", 21, 1),
        Among(u"\u03BF\u03C5\u03BD\u03C4\u03B1\u03B9", 21, 1),
        Among(u"\u03B9\u03BF\u03C5\u03BD\u03C4\u03B1\u03B9", 33, 1),
        Among(u"\u03B5\u03B9", 21, 1),
        Among(u"\u03B1\u03B5\u03B9", 35, 1),
        Among(u"\u03B7\u03B8\u03B5\u03B9", 35, 1),
        Among(u"\u03B7\u03C3\u03B5\u03B9", 35, 1),
        Among(u"\u03BF\u03B9", 21, 1),
        Among(u"\u03B1\u03BD", -1, 1),
        Among(u"\u03B1\u03B3\u03B1\u03BD", 40, 1),
        Among(u"\u03B7\u03BA\u03B1\u03BD", 40, 1),
        Among(u"\u03B7\u03B8\u03B7\u03BA\u03B1\u03BD", 42, 1),
        Among(u"\u03B7\u03C3\u03B1\u03BD", 40, 1),
        Among(u"\u03BF\u03C5\u03C3\u03B1\u03BD", 40, 1),
        Among(u"\u03BF\u03BD\u03C4\u03BF\u03C5\u03C3\u03B1\u03BD", 45, 1),
        Among(u"\u03B9\u03BF\u03BD\u03C4\u03BF\u03C5\u03C3\u03B1\u03BD", 46, 1),
        Among(u"\u03BF\u03BD\u03C4\u03B1\u03BD", 40, 1),
        Among(u"\u03B9\u03BF\u03BD\u03C4\u03B1\u03BD", 48, 1),
        Among(u"\u03BF\u03C5\u03BD\u03C4\u03B1\u03BD", 40, 1),
        Among(u"\u03B9\u03BF\u03C5\u03BD\u03C4\u03B1\u03BD", 50, 1),
        Among(u"\u03BF\u03C4\u03B1\u03BD", 40, 1),
        Among(u"\u03B9\u03BF\u03C4\u03B1\u03BD", 52, 1),
        Among(u"\u03BF\u03BC\u03B1\u03C3\u03C4\u03B1\u03BD", 40, 1),
        Among(u"\u03B9\u03BF\u03BC\u03B1\u03C3\u03C4\u03B1\u03BD", 54, 1),
        Among(u"\u03BF\u03C3\u03B1\u03C3\u03C4\u03B1\u03BD", 40, 1),
        Among(u"\u03B9\u03BF\u03C3\u03B1\u03C3\u03C4\u03B1\u03BD", 56, 1),
        Among(u"\u03BF\u03C5\u03BD", -1, 1),
        Among(u"\u03B7\u03B8\u03BF\u03C5\u03BD", 58, 1),
        Among(u"\u03BF\u03BC\u03BF\u03C5\u03BD", 58, 1),
        Among(u"\u03B9\u03BF\u03BC\u03BF\u03C5\u03BD", 60, 1),
        Among(u"\u03B7\u03C3\u03BF\u03C5\u03BD", 58, 1),
        Among(u"\u03BF\u03C3\u03BF\u03C5\u03BD", 58, 1),
        Among(u"\u03B9\u03BF\u03C3\u03BF\u03C5\u03BD", 63, 1),
        Among(u"\u03C9\u03BD", -1, 1),
        Among(u"\u03B7\u03B4\u03C9\u03BD", 65, 1),
        Among(u"\u03BF", -1, 1),
        Among(u"\u03B1\u03C3", -1, 1),
        Among(u"\u03B5\u03C3", -1, 1),
        Among(u"\u03B7\u03B4\u03B5\u03C3", 69, 1),
        Among(u"\u03B7\u03C3\u03B5\u03C3", 69, 1),
        Among(u"\u03B7\u03C3", -1, 1),
        Among(u"\u03B5\u03B9\u03C3", -1, 1),
        Among(u"\u03B7\u03B8\u03B5\u03B9\u03C3", 73, 1),
        Among(u"\u03BF\u03C3", -1, 1),
        Among(u"\u03C5\u03C3", -1, 1),
        Among(u"\u03BF\u03C5\u03C3", 76, 1),
        Among(u"\u03C5", -1, 1),
        Among(u"\u03BF\u03C5", 78, 1),
        Among(u"\u03C9", -1, 1),
        Among(u"\u03B1\u03C9", 80, 1),
        Among(u"\u03B7\u03B8\u03C9", 80, 1),
        Among(u"\u03B7\u03C3\u03C9", 80, 1)
    ]

    a_67 = [
        Among(u"\u03BF\u03C4\u03B5\u03C1", -1, 1),
        Among(u"\u03B5\u03C3\u03C4\u03B5\u03C1", -1, 1),
        Among(u"\u03C5\u03C4\u03B5\u03C1", -1, 1),
        Among(u"\u03C9\u03C4\u03B5\u03C1", -1, 1),
        Among(u"\u03BF\u03C4\u03B1\u03C4", -1, 1),
        Among(u"\u03B5\u03C3\u03C4\u03B1\u03C4", -1, 1),
        Among(u"\u03C5\u03C4\u03B1\u03C4", -1, 1),
        Among(u"\u03C9\u03C4\u03B1\u03C4", -1, 1)
    ]

    g_v = [81, 65, 16, 1]

    g_v2 = [81, 65, 0, 1]

    B_test1 = False

    def __r_has_min_length(self):
        if not len(self.current) >= 3:
            return False
        return True

    def __r_tolower(self):
        while True:
            v_1 = self.limit - self.cursor
            try:
                self.ket = self.cursor
                among_var = self.find_among_b(GreekStemmer.a_0)
                if among_var == 0:
                    raise lab0()
                self.bra = self.cursor
                if among_var == 1:
                    if not self.slice_from(u"\u03B1"):
                        return False
                elif among_var == 2:
                    if not self.slice_from(u"\u03B2"):
                        return False
                elif among_var == 3:
                    if not self.slice_from(u"\u03B3"):
                        return False
                elif among_var == 4:
                    if not self.slice_from(u"\u03B4"):
                        return False
                elif among_var == 5:
                    if not self.slice_from(u"\u03B5"):
                        return False
                elif among_var == 6:
                    if not self.slice_from(u"\u03B6"):
                        return False
                elif among_var == 7:
                    if not self.slice_from(u"\u03B7"):
                        return False
                elif among_var == 8:
                    if not self.slice_from(u"\u03B8"):
                        return False
                elif among_var == 9:
                    if not self.slice_from(u"\u03B9"):
                        return False
                elif among_var == 10:
                    if not self.slice_from(u"\u03BA"):
                        return False
                elif among_var == 11:
                    if not self.slice_from(u"\u03BB"):
                        return False
                elif among_var == 12:
                    if not self.slice_from(u"\u03BC"):
                        return False
                elif among_var == 13:
                    if not self.slice_from(u"\u03BD"):
                        return False
                elif among_var == 14:
                    if not self.slice_from(u"\u03BE"):
                        return False
                elif among_var == 15:
                    if not self.slice_from(u"\u03BF"):
                        return False
                elif among_var == 16:
                    if not self.slice_from(u"\u03C0"):
                        return False
                elif among_var == 17:
                    if not self.slice_from(u"\u03C1"):
                        return False
                elif among_var == 18:
                    if not self.slice_from(u"\u03C3"):
                        return False
                elif among_var == 19:
                    if not self.slice_from(u"\u03C4"):
                        return False
                elif among_var == 20:
                    if not self.slice_from(u"\u03C5"):
                        return False
                elif among_var == 21:
                    if not self.slice_from(u"\u03C6"):
                        return False
                elif among_var == 22:
                    if not self.slice_from(u"\u03C7"):
                        return False
                elif among_var == 23:
                    if not self.slice_from(u"\u03C8"):
                        return False
                elif among_var == 24:
                    if not self.slice_from(u"\u03C9"):
                        return False
                else:
                    if self.cursor <= self.limit_backward:
                        raise lab0()
                    self.cursor -= 1
                continue
            except lab0: pass
            self.cursor = self.limit - v_1
            break
        return True

    def __r_step1(self):
        self.ket = self.cursor
        among_var = self.find_among_b(GreekStemmer.a_1)
        if among_var == 0:
            return False
        self.bra = self.cursor
        if among_var == 1:
            if not self.slice_from(u"\u03C6\u03B1"):
                return False
        elif among_var == 2:
            if not self.slice_from(u"\u03C3\u03BA\u03B1"):
                return False
        elif among_var == 3:
            if not self.slice_from(u"\u03BF\u03BB\u03BF"):
                return False
        elif among_var == 4:
            if not self.slice_from(u"\u03C3\u03BF"):
                return False
        elif among_var == 5:
            if not self.slice_from(u"\u03C4\u03B1\u03C4\u03BF"):
                return False
        elif among_var == 6:
            if not self.slice_from(u"\u03BA\u03C1\u03B5"):
                return False
        elif among_var == 7:
            if not self.slice_from(u"\u03C0\u03B5\u03C1"):
                return False
        elif among_var == 8:
            if not self.slice_from(u"\u03C4\u03B5\u03C1"):
                return False
        elif among_var == 9:
            if not self.slice_from(u"\u03C6\u03C9"):
                return False
        elif among_var == 10:
            if not self.slice_from(u"\u03BA\u03B1\u03B8\u03B5\u03C3\u03C4"):
                return False
        else:
            if not self.slice_from(u"\u03B3\u03B5\u03B3\u03BF\u03BD"):
                return False
        self.B_test1 = False
        return True

    def __r_steps1(self):
        self.ket = self.cursor
        if self.find_among_b(GreekStemmer.a_3) == 0:
            return False
        self.bra = self.cursor
        if not self.slice_del():
            return False

        self.B_test1 = False
        self.ket = self.cursor
        self.bra = self.cursor
        among_var = self.find_among_b(GreekStemmer.a_2)
        if among_var == 0:
            return False
        if self.cursor > self.limit_backward:
            return False
        if among_var == 1:
            if not self.slice_from(u"\u03B9"):
                return False
        else:
            if not self.slice_from(u"\u03B9\u03B6"):
                return False
        return True

    def __r_steps2(self):
        self.ket = self.cursor
        if self.find_among_b(GreekStemmer.a_5) == 0:
            return False
        self.bra = self.cursor
        if not self.slice_del():
            return False

        self.B_test1 = False
        self.ket = self.cursor
        self.bra = self.cursor
        if self.find_among_b(GreekStemmer.a_4) == 0:
            return False
        if self.cursor > self.limit_backward:
            return False
        if not self.slice_from(u"\u03C9\u03BD"):
            return False
        return True

    def __r_steps3(self):
        self.ket = self.cursor
        if self.find_among_b(GreekStemmer.a_7) == 0:
            return False
        self.bra = self.cursor
        if not self.slice_del():
            return False

        self.B_test1 = False
        try:
            v_1 = self.limit - self.cursor
            try:
                if not self.eq_s_b(u"\u03B9\u03C3\u03B1"):
                    raise lab1()
                if self.cursor > self.limit_backward:
                    raise lab1()
                if not self.slice_from(u"\u03B9\u03C3"):
                    return False
                raise lab0()
            except lab1: pass
            self.cursor = self.limit - v_1
            self.ket = self.cursor
            self.bra = self.cursor
            among_var = self.find_among_b(GreekStemmer.a_6)
            if among_var == 0:
                return False
            if self.cursor > self.limit_backward:
                return False
            if among_var == 1:
                if not self.slice_from(u"\u03B9"):
                    return False
            else:
                if not self.slice_from(u"\u03B9\u03C3"):
                    return False
        except lab0: pass
        return True

    def __r_steps4(self):
        self.ket = self.cursor
        if self.find_among_b(GreekStemmer.a_9) == 0:
            return False
        self.bra = self.cursor
        if not self.slice_del():
            return False

        self.B_test1 = False
        self.ket = self.cursor
        self.bra = self.cursor
        if self.find_among_b(GreekStemmer.a_8) == 0:
            return False
        if self.cursor > self.limit_backward:
            return False
        if not self.slice_from(u"\u03B9"):
            return False
        return True

    def __r_steps5(self):
        self.ket = self.cursor
        if self.find_among_b(GreekStemmer.a_11) == 0:
            return False
        self.bra = self.cursor
        if not self.slice_del():
            return False

        self.B_test1 = False
        self.ket = self.cursor
        self.bra = self.cursor
        among_var = self.find_among_b(GreekStemmer.a_10)
        if among_var == 0:
            return False
        if self.cursor > self.limit_backward:
            return False
        if among_var == 1:
            if not self.slice_from(u"\u03B9"):
                return False
        else:
            if not self.slice_from(u"\u03B9\u03C3\u03C4"):
                return False
        return True

    def __r_steps6(self):
        self.ket = self.cursor
        if self.find_among_b(GreekStemmer.a_14) == 0:
            return False
        self.bra = self.cursor
        if not self.slice_del():
            return False

        self.B_test1 = False
        try:
            v_1 = self.limit - self.cursor
            try:
                self.ket = self.cursor
                self.bra = self.cursor
                among_var = self.find_among_b(GreekStemmer.a_12)
                if among_var == 0:
                    raise lab1()
                if self.cursor > self.limit_backward:
                    raise lab1()
                if among_var == 1:
                    if not self.slice_from(u"\u03B9\u03C3\u03BC"):
                        return False
                else:
                    if not self.slice_from(u"\u03B9"):
                        return False
                raise lab0()
            except lab1: pass
            self.cursor = self.limit - v_1
            self.ket = self.cursor
            among_var = self.find_among_b(GreekStemmer.a_13)
            if among_var == 0:
                return False
            self.bra = self.cursor
            if among_var == 1:
                if not self.slice_from(u"\u03B1\u03B3\u03BD\u03C9\u03C3\u03C4"):
                    return False
            elif among_var == 2:
                if not self.slice_from(u"\u03B1\u03C4\u03BF\u03BC"):
                    return False
            elif among_var == 3:
                if not self.slice_from(u"\u03B3\u03BD\u03C9\u03C3\u03C4"):
                    return False
            elif among_var == 4:
                if not self.slice_from(u"\u03B5\u03B8\u03BD"):
                    return False
            elif among_var == 5:
                if not self.slice_from(u"\u03B5\u03BA\u03BB\u03B5\u03BA\u03C4"):
                    return False
            elif among_var == 6:
                if not self.slice_from(u"\u03C3\u03BA\u03B5\u03C0\u03C4"):
                    return False
            elif among_var == 7:
                if not self.slice_from(u"\u03C4\u03BF\u03C0"):
                    return False
            elif among_var == 8:
                if not self.slice_from(u"\u03B1\u03BB\u03B5\u03BE\u03B1\u03BD\u03B4\u03C1"):
                    return False
            elif among_var == 9:
                if not self.slice_from(u"\u03B2\u03C5\u03B6\u03B1\u03BD\u03C4"):
                    return False
            else:
                if not self.slice_from(u"\u03B8\u03B5\u03B1\u03C4\u03C1"):
                    return False
        except lab0: pass
        return True

    def __r_steps7(self):
        self.ket = self.cursor
        if self.find_among_b(GreekStemmer.a_16) == 0:
            return False
        self.bra = self.cursor
        if not self.slice_del():
            return False

        self.B_test1 = False
        self.ket = self.cursor
        self.bra = self.cursor
        if self.find_among_b(GreekStemmer.a_15) == 0:
            return False
        if self.cursor > self.limit_backward:
            return False
        if not self.slice_from(u"\u03B1\u03C1\u03B1\u03BA"):
            return False
        return True

    def __r_steps8(self):
        self.ket = self.cursor
        if self.find_among_b(GreekStemmer.a_18) == 0:
            return False
        self.bra = self.cursor
        if not self.slice_del():
            return False

        self.B_test1 = False
        try:
            v_1 = self.limit - self.cursor
            try:
                self.ket = self.cursor
                self.bra = self.cursor
                among_var = self.find_among_b(GreekStemmer.a_17)
                if among_var == 0:
                    raise lab1()
                if self.cursor > self.limit_backward:
                    raise lab1()
                if among_var == 1:
                    if not self.slice_from(u"\u03B1\u03BA"):
                        return False
                else:
                    if not self.slice_from(u"\u03B9\u03C4\u03C3"):
                        return False
                raise lab0()
            except lab1: pass
            self.cursor = self.limit - v_1
            self.ket = self.cursor
            self.bra = self.cursor
            if not self.eq_s_b(u"\u03BA\u03BF\u03C1"):
                return False
            if not self.slice_from(u"\u03B9\u03C4\u03C3"):
                return False
        except lab0: pass
        return True

    def __r_steps9(self):
        self.ket = self.cursor
        if self.find_among_b(GreekStemmer.a_21) == 0:
            return False
        self.bra = self.cursor
        if not self.slice_del():
            return False

        self.B_test1 = False
        try:
            v_1 = self.limit - self.cursor
            try:
                self.ket = self.cursor
                self.bra = self.cursor
                if self.find_among_b(GreekStemmer.a_19) == 0:
                    raise lab1()
                if self.cursor > self.limit_backward:
                    raise lab1()
                if not self.slice_from(u"\u03B9\u03B4"):
                    return False
                raise lab0()
            except lab1: pass
            self.cursor = self.limit - v_1
            self.ket = self.cursor
            self.bra = self.cursor
            if self.find_among_b(GreekStemmer.a_20) == 0:
                return False
            if not self.slice_from(u"\u03B9\u03B4"):
                return False
        except lab0: pass
        return True

    def __r_steps10(self):
        self.ket = self.cursor
        if self.find_among_b(GreekStemmer.a_23) == 0:
            return False
        self.bra = self.cursor
        if not self.slice_del():
            return False

        self.B_test1 = False
        self.ket = self.cursor
        self.bra = self.cursor
        if self.find_among_b(GreekStemmer.a_22) == 0:
            return False
        if self.cursor > self.limit_backward:
            return False
        if not self.slice_from(u"\u03B9\u03C3\u03BA"):
            return False
        return True

    def __r_step2a(self):
        self.ket = self.cursor
        if self.find_among_b(GreekStemmer.a_24) == 0:
            return False
        self.bra = self.cursor
        if not self.slice_del():
            return False

        v_1 = self.limit - self.cursor
        try:
            if self.find_among_b(GreekStemmer.a_25) == 0:
                raise lab0()
            return False
        except lab0: pass
        self.cursor = self.limit - v_1
        c = self.cursor
        self.insert(self.cursor, self.cursor, u"\u03B1\u03B4")
        self.cursor = c
        return True

    def __r_step2b(self):
        self.ket = self.cursor
        if self.find_among_b(GreekStemmer.a_26) == 0:
            return False
        self.bra = self.cursor
        if not self.slice_del():
            return False

        self.ket = self.cursor
        self.bra = self.cursor
        if self.find_among_b(GreekStemmer.a_27) == 0:
            return False
        if not self.slice_from(u"\u03B5\u03B4"):
            return False
        return True

    def __r_step2c(self):
        self.ket = self.cursor
        if self.find_among_b(GreekStemmer.a_28) == 0:
            return False
        self.bra = self.cursor
        if not self.slice_del():
            return False

        self.ket = self.cursor
        self.bra = self.cursor
        if self.find_among_b(GreekStemmer.a_29) == 0:
            return False
        if not self.slice_from(u"\u03BF\u03C5\u03B4"):
            return False
        return True

    def __r_step2d(self):
        self.ket = self.cursor
        if self.find_among_b(GreekStemmer.a_30) == 0:
            return False
        self.bra = self.cursor
        if not self.slice_del():
            return False

        self.B_test1 = False
        self.ket = self.cursor
        self.bra = self.cursor
        if self.find_among_b(GreekStemmer.a_31) == 0:
            return False
        if self.cursor > self.limit_backward:
            return False
        if not self.slice_from(u"\u03B5"):
            return False
        return True

    def __r_step3(self):
        self.ket = self.cursor
        if self.find_among_b(GreekStemmer.a_32) == 0:
            return False
        self.bra = self.cursor
        if not self.slice_del():
            return False

        self.B_test1 = False
        self.ket = self.cursor
        self.bra = self.cursor
        if not self.in_grouping_b(GreekStemmer.g_v, 945, 969):
            return False
        if not self.slice_from(u"\u03B9"):
            return False
        return True

    def __r_step4(self):
        self.ket = self.cursor
        if self.find_among_b(GreekStemmer.a_33) == 0:
            return False
        self.bra = self.cursor
        if not self.slice_del():
            return False

        self.B_test1 = False
        try:
            v_1 = self.limit - self.cursor
            try:
                self.ket = self.cursor
                self.bra = self.cursor
                if not self.in_grouping_b(GreekStemmer.g_v, 945, 969):
                    raise lab1()
                if not self.slice_from(u"\u03B9\u03BA"):
                    return False
                raise lab0()
            except lab1: pass
            self.cursor = self.limit - v_1
            self.ket = self.cursor
        except lab0: pass
        self.bra = self.cursor
        if self.find_among_b(GreekStemmer.a_34) == 0:
            return False
        if self.cursor > self.limit_backward:
            return False
        if not self.slice_from(u"\u03B9\u03BA"):
            return False
        return True

    def __r_step5a(self):
        v_1 = self.limit - self.cursor
        try:
            if not self.eq_s_b(u"\u03B1\u03B3\u03B1\u03BC\u03B5"):
                raise lab0()
            if self.cursor > self.limit_backward:
                raise lab0()
            if not self.slice_from(u"\u03B1\u03B3\u03B1\u03BC"):
                return False
        except lab0: pass
        self.cursor = self.limit - v_1
        v_2 = self.limit - self.cursor
        try:
            self.ket = self.cursor
            if self.find_among_b(GreekStemmer.a_35) == 0:
                raise lab1()
            self.bra = self.cursor
            if not self.slice_del():
                return False

            self.B_test1 = False
        except lab1: pass
        self.cursor = self.limit - v_2
        self.ket = self.cursor
        if not self.eq_s_b(u"\u03B1\u03BC\u03B5"):
            return False
        self.bra = self.cursor
        if not self.slice_del():
            return False

        self.B_test1 = False
        self.ket = self.cursor
        self.bra = self.cursor
        if self.find_among_b(GreekStemmer.a_36) == 0:
            return False
        if self.cursor > self.limit_backward:
            return False
        if not self.slice_from(u"\u03B1\u03BC"):
            return False
        return True

    def __r_step5b(self):
        v_1 = self.limit - self.cursor
        try:
            self.ket = self.cursor
            if self.find_among_b(GreekStemmer.a_38) == 0:
                raise lab0()
            self.bra = self.cursor
            if not self.slice_del():
                return False

            self.B_test1 = False
            self.ket = self.cursor
            self.bra = self.cursor
            if self.find_among_b(GreekStemmer.a_37) == 0:
                raise lab0()
            if self.cursor > self.limit_backward:
                raise lab0()
            if not self.slice_from(u"\u03B1\u03B3\u03B1\u03BD"):
                return False
        except lab0: pass
        self.cursor = self.limit - v_1
        self.ket = self.cursor
        if not self.eq_s_b(u"\u03B1\u03BD\u03B5"):
            return False
        self.bra = self.cursor
        if not self.slice_del():
            return False

        self.B_test1 = False
        try:
            v_2 = self.limit - self.cursor
            try:
                self.ket = self.cursor
                self.bra = self.cursor
                if not self.in_grouping_b(GreekStemmer.g_v2, 945, 969):
                    raise lab2()
                if not self.slice_from(u"\u03B1\u03BD"):
                    return False
                raise lab1()
            except lab2: pass
            self.cursor = self.limit - v_2
            self.ket = self.cursor
        except lab1: pass
        self.bra = self.cursor
        if self.find_among_b(GreekStemmer.a_39) == 0:
            return False
        if self.cursor > self.limit_backward:
            return False
        if not self.slice_from(u"\u03B1\u03BD"):
            return False
        return True

    def __r_step5c(self):
        v_1 = self.limit - self.cursor
        try:
            self.ket = self.cursor
            if self.find_among_b(GreekStemmer.a_40) == 0:
                raise lab0()
            self.bra = self.cursor
            if not self.slice_del():
                return False

            self.B_test1 = False
        except lab0: pass
        self.cursor = self.limit - v_1
        self.ket = self.cursor
        if not self.eq_s_b(u"\u03B5\u03C4\u03B5"):
            return False
        self.bra = self.cursor
        if not self.slice_del():
            return False

        self.B_test1 = False
        try:
            v_2 = self.limit - self.cursor
            try:
                self.ket = self.cursor
                self.bra = self.cursor
                if not self.in_grouping_b(GreekStemmer.g_v2, 945, 969):
                    raise lab2()
                if not self.slice_from(u"\u03B5\u03C4"):
                    return False
                raise lab1()
            except lab2: pass
            self.cursor = self.limit - v_2
            try:
                self.ket = self.cursor
                self.bra = self.cursor
                if self.find_among_b(GreekStemmer.a_41) == 0:
                    raise lab3()
                if not self.slice_from(u"\u03B5\u03C4"):
                    return False
                raise lab1()
            except lab3: pass
            self.cursor = self.limit - v_2
            self.ket = self.cursor
        except lab1: pass
        self.bra = self.cursor
        if self.find_among_b(GreekStemmer.a_42) == 0:
            return False
        if self.cursor > self.limit_backward:
            return False
        if not self.slice_from(u"\u03B5\u03C4"):
            return False
        return True

    def __r_step5d(self):
        self.ket = self.cursor
        if self.find_among_b(GreekStemmer.a_43) == 0:
            return False
        self.bra = self.cursor
        if not self.slice_del():
            return False

        self.B_test1 = False
        try:
            v_1 = self.limit - self.cursor
            try:
                self.ket = self.cursor
                self.bra = self.cursor
                if not self.eq_s_b(u"\u03B1\u03C1\u03C7"):
                    raise lab1()
                if self.cursor > self.limit_backward:
                    raise lab1()
                if not self.slice_from(u"\u03BF\u03BD\u03C4"):
                    return False
                raise lab0()
            except lab1: pass
            self.cursor = self.limit - v_1
            self.ket = self.cursor
            self.bra = self.cursor
            if not self.eq_s_b(u"\u03BA\u03C1\u03B5"):
                return False
            if not self.slice_from(u"\u03C9\u03BD\u03C4"):
                return False
        except lab0: pass
        return True

    def __r_step5e(self):
        self.ket = self.cursor
        if self.find_among_b(GreekStemmer.a_44) == 0:
            return False
        self.bra = self.cursor
        if not self.slice_del():
            return False

        self.B_test1 = False
        self.ket = self.cursor
        self.bra = self.cursor
        if not self.eq_s_b(u"\u03BF\u03BD"):
            return False
        if self.cursor > self.limit_backward:
            return False
        if not self.slice_from(u"\u03BF\u03BC\u03B1\u03C3\u03C4"):
            return False
        return True

    def __r_step5f(self):
        v_1 = self.limit - self.cursor
        try:
            self.ket = self.cursor
            if not self.eq_s_b(u"\u03B9\u03B5\u03C3\u03C4\u03B5"):
                raise lab0()
            self.bra = self.cursor
            if not self.slice_del():
                return False

            self.B_test1 = False
            self.ket = self.cursor
            self.bra = self.cursor
            if self.find_among_b(GreekStemmer.a_45) == 0:
                raise lab0()
            if self.cursor > self.limit_backward:
                raise lab0()
            if not self.slice_from(u"\u03B9\u03B5\u03C3\u03C4"):
                return False
        except lab0: pass
        self.cursor = self.limit - v_1
        self.ket = self.cursor
        if not self.eq_s_b(u"\u03B5\u03C3\u03C4\u03B5"):
            return False
        self.bra = self.cursor
        if not self.slice_del():
            return False

        self.B_test1 = False
        self.ket = self.cursor
        self.bra = self.cursor
        if self.find_among_b(GreekStemmer.a_46) == 0:
            return False
        if self.cursor > self.limit_backward:
            return False
        if not self.slice_from(u"\u03B9\u03B5\u03C3\u03C4"):
            return False
        return True

    def __r_step5g(self):
        v_1 = self.limit - self.cursor
        try:
            self.ket = self.cursor
            if self.find_among_b(GreekStemmer.a_47) == 0:
                raise lab0()
            self.bra = self.cursor
            if not self.slice_del():
                return False

            self.B_test1 = False
        except lab0: pass
        self.cursor = self.limit - v_1
        self.ket = self.cursor
        if self.find_among_b(GreekStemmer.a_50) == 0:
            return False
        self.bra = self.cursor
        if not self.slice_del():
            return False

        self.B_test1 = False
        try:
            v_2 = self.limit - self.cursor
            try:
                self.ket = self.cursor
                self.bra = self.cursor
                if self.find_among_b(GreekStemmer.a_48) == 0:
                    raise lab2()
                if not self.slice_from(u"\u03B7\u03BA"):
                    return False
                raise lab1()
            except lab2: pass
            self.cursor = self.limit - v_2
            self.ket = self.cursor
            self.bra = self.cursor
            if self.find_among_b(GreekStemmer.a_49) == 0:
                return False
            if self.cursor > self.limit_backward:
                return False
            if not self.slice_from(u"\u03B7\u03BA"):
                return False
        except lab1: pass
        return True

    def __r_step5h(self):
        self.ket = self.cursor
        if self.find_among_b(GreekStemmer.a_53) == 0:
            return False
        self.bra = self.cursor
        if not self.slice_del():
            return False

        self.B_test1 = False
        try:
            v_1 = self.limit - self.cursor
            try:
                self.ket = self.cursor
                self.bra = self.cursor
                if self.find_among_b(GreekStemmer.a_51) == 0:
                    raise lab1()
                if not self.slice_from(u"\u03BF\u03C5\u03C3"):
                    return False
                raise lab0()
            except lab1: pass
            self.cursor = self.limit - v_1
            self.ket = self.cursor
            self.bra = self.cursor
            if self.find_among_b(GreekStemmer.a_52) == 0:
                return False
            if self.cursor > self.limit_backward:
                return False
            if not self.slice_from(u"\u03BF\u03C5\u03C3"):
                return False
        except lab0: pass
        return True

    def __r_step5i(self):
        self.ket = self.cursor
        if self.find_among_b(GreekStemmer.a_56) == 0:
            return False
        self.bra = self.cursor
        if not self.slice_del():
            return False

        self.B_test1 = False
        try:
            v_1 = self.limit - self.cursor
            try:
                self.ket = self.cursor
                self.bra = self.cursor
                if not self.eq_s_b(u"\u03BA\u03BF\u03BB\u03BB"):
                    raise lab1()
                if not self.slice_from(u"\u03B1\u03B3"):
                    return False
                raise lab0()
            except lab1: pass
            self.cursor = self.limit - v_1
            try:
                v_2 = self.limit - self.cursor
                try:
                    self.ket = self.cursor
                    self.bra = self.cursor
                    among_var = self.find_among_b(GreekStemmer.a_54)
                    if among_var == 0:
                        raise lab3()
                    if among_var == 1:
                        if not self.slice_from(u"\u03B1\u03B3"):
                            return False
                    raise lab2()
                except lab3: pass
                self.cursor = self.limit - v_2
                self.ket = self.cursor
                self.bra = self.cursor
                if self.find_among_b(GreekStemmer.a_55) == 0:
                    return False
                if self.cursor > self.limit_backward:
                    return False
                if not self.slice_from(u"\u03B1\u03B3"):
                    return False
            except lab2: pass
        except lab0: pass
        return True

    def __r_step5j(self):
        self.ket = self.cursor
        if self.find_among_b(GreekStemmer.a_57) == 0:
            return False
        self.bra = self.cursor
        if not self.slice_del():
            return False

        self.B_test1 = False
        self.ket = self.cursor
        self.bra = self.cursor
        if self.find_among_b(GreekStemmer.a_58) == 0:
            return False
        if self.cursor > self.limit_backward:
            return False
        if not self.slice_from(u"\u03B7\u03C3"):
            return False
        return True

    def __r_step5k(self):
        self.ket = self.cursor
        if self.find_among_b(GreekStemmer.a_59) == 0:
            return False
        self.bra = self.cursor
        if not self.slice_del():
            return False

        self.B_test1 = False
        self.ket = self.cursor
        self.bra = self.cursor
        if self.find_among_b(GreekStemmer.a_60) == 0:
            return False
        if self.cursor > self.limit_backward:
            return False
        if not self.slice_from(u"\u03B7\u03C3\u03C4"):
            return False
        return True

    def __r_step5l(self):
        self.ket = self.cursor
        if self.find_among_b(GreekStemmer.a_61) == 0:
            return False
        self.bra = self.cursor
        if not self.slice_del():
            return False

        self.B_test1 = False
        self.ket = self.cursor
        self.bra = self.cursor
        if self.find_among_b(GreekStemmer.a_62) == 0:
            return False
        if self.cursor > self.limit_backward:
            return False
        if not self.slice_from(u"\u03BF\u03C5\u03BD"):
            return False
        return True

    def __r_step5m(self):
        self.ket = self.cursor
        if self.find_among_b(GreekStemmer.a_63) == 0:
            return False
        self.bra = self.cursor
        if not self.slice_del():
            return False

        self.B_test1 = False
        self.ket = self.cursor
        self.bra = self.cursor
        if self.find_among_b(GreekStemmer.a_64) == 0:
            return False
        if self.cursor > self.limit_backward:
            return False
        if not self.slice_from(u"\u03BF\u03C5\u03BC"):
            return False
        return True

    def __r_step6(self):
        v_1 = self.limit - self.cursor
        try:
            self.ket = self.cursor
            if self.find_among_b(GreekStemmer.a_65) == 0:
                raise lab0()
            self.bra = self.cursor
            if not self.slice_from(u"\u03BC\u03B1"):
                return False
        except lab0: pass
        self.cursor = self.limit - v_1
        if not self.B_test1:
            return False
        self.ket = self.cursor
        if self.find_among_b(GreekStemmer.a_66) == 0:
            return False
        self.bra = self.cursor
        if not self.slice_del():
            return False

        return True

    def __r_step7(self):
        self.ket = self.cursor
        if self.find_among_b(GreekStemmer.a_67) == 0:
            return False
        self.bra = self.cursor
        if not self.slice_del():
            return False

        return True

    def _stem(self):
        self.limit_backward = self.cursor
        self.cursor = self.limit
        v_1 = self.limit - self.cursor
        self.__r_tolower()
        self.cursor = self.limit - v_1
        if not self.__r_has_min_length():
            return False
        self.B_test1 = True
        v_2 = self.limit - self.cursor
        self.__r_step1()
        self.cursor = self.limit - v_2
        v_3 = self.limit - self.cursor
        self.__r_steps1()
        self.cursor = self.limit - v_3
        v_4 = self.limit - self.cursor
        self.__r_steps2()
        self.cursor = self.limit - v_4
        v_5 = self.limit - self.cursor
        self.__r_steps3()
        self.cursor = self.limit - v_5
        v_6 = self.limit - self.cursor
        self.__r_steps4()
        self.cursor = self.limit - v_6
        v_7 = self.limit - self.cursor
        self.__r_steps5()
        self.cursor = self.limit - v_7
        v_8 = self.limit - self.cursor
        self.__r_steps6()
        self.cursor = self.limit - v_8
        v_9 = self.limit - self.cursor
        self.__r_steps7()
        self.cursor = self.limit - v_9
        v_10 = self.limit - self.cursor
        self.__r_steps8()
        self.cursor = self.limit - v_10
        v_11 = self.limit - self.cursor
        self.__r_steps9()
        self.cursor = self.limit - v_11
        v_12 = self.limit - self.cursor
        self.__r_steps10()
        self.cursor = self.limit - v_12
        v_13 = self.limit - self.cursor
        self.__r_step2a()
        self.cursor = self.limit - v_13
        v_14 = self.limit - self.cursor
        self.__r_step2b()
        self.cursor = self.limit - v_14
        v_15 = self.limit - self.cursor
        self.__r_step2c()
        self.cursor = self.limit - v_15
        v_16 = self.limit - self.cursor
        self.__r_step2d()
        self.cursor = self.limit - v_16
        v_17 = self.limit - self.cursor
        self.__r_step3()
        self.cursor = self.limit - v_17
        v_18 = self.limit - self.cursor
        self.__r_step4()
        self.cursor = self.limit - v_18
        v_19 = self.limit - self.cursor
        self.__r_step5a()
        self.cursor = self.limit - v_19
        v_20 = self.limit - self.cursor
        self.__r_step5b()
        self.cursor = self.limit - v_20
        v_21 = self.limit - self.cursor
        self.__r_step5c()
        self.cursor = self.limit - v_21
        v_22 = self.limit - self.cursor
        self.__r_step5d()
        self.cursor = self.limit - v_22
        v_23 = self.limit - self.cursor
        self.__r_step5e()
        self.cursor = self.limit - v_23
        v_24 = self.limit - self.cursor
        self.__r_step5f()
        self.cursor = self.limit - v_24
        v_25 = self.limit - self.cursor
        self.__r_step5g()
        self.cursor = self.limit - v_25
        v_26 = self.limit - self.cursor
        self.__r_step5h()
        self.cursor = self.limit - v_26
        v_27 = self.limit - self.cursor
        self.__r_step5j()
        self.cursor = self.limit - v_27
        v_28 = self.limit - self.cursor
        self.__r_step5i()
        self.cursor = self.limit - v_28
        v_29 = self.limit - self.cursor
        self.__r_step5k()
        self.cursor = self.limit - v_29
        v_30 = self.limit - self.cursor
        self.__r_step5l()
        self.cursor = self.limit - v_30
        v_31 = self.limit - self.cursor
        self.__r_step5m()
        self.cursor = self.limit - v_31
        v_32 = self.limit - self.cursor
        self.__r_step6()
        self.cursor = self.limit - v_32
        v_33 = self.limit - self.cursor
        self.__r_step7()
        self.cursor = self.limit - v_33
        self.cursor = self.limit_backward
        return True


class lab0(BaseException): pass


class lab1(BaseException): pass


class lab2(BaseException): pass


class lab3(BaseException): pass
